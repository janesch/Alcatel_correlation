#######################################################################
#
#       Copyright (C) 2001 Micromuse Inc.
#       All Rights Reserved
#
#    RESTRICTED RIGHTS:
#
#    This file may have been supplied under a license.
#    It may be used, disclosed, and/or copied only as permitted
#    under such license agreement.  Any copy must contain the
#    above copyright notice and this restricted rights notice.
#    Use, copying, and/or disclosure of the file is strictly
#    prohibited unless otherwise provided in the license agreement.
#
#    IETF-OSPF-TRAP-MIB.include.rules 1.0 2000/08/11 Robert Cowart
#
#######################################################################
#
# 1.0 - Initial Release
# Ident $Id: IETF-OSPF-TRAP-MIB.include.rules 1.1 2003/03/17 16:08:24 csmith Development $
#
#######################################################################

case ".1.3.6.1.2.1.14.16" | ".1.3.6.1.2.1.14.16.2": ### OSPF Version 2 - Notifications from RFC1850 (OSPF-TRAP-MIB)

    @Agent = "IETF-OSPF-TRAP-MIB"
    @Class = ""

    ##########
    # All traps defined by the OSPF-TRAP-MIB contain the following ar the first
    # variable binding.
    #
    # $1 = ospfRouterId - A 32-bit integer uniquely identifying the router in the
    #                     Autonomous System. By convention, to ensure uniqueness,
    #                     this should default to the value of one of the router's
    #                     IP interface addresses. 
    ##########

    switch ($specific-trap)
    {
        case "1": ### ospfVirtIfStateChange

            ##########
            # An ospfIfStateChange trap signifies that there has been a change in the
            # state of an OSPF virtual interface. This trap should be generated when
            # the interface state regresses (e.g., goes from Point-to-Point to Down)
            # or progresses to a terminal state (i.e., Point-to-Point).
            #
            # $2 = ospfVirtIfAreaId - The Transit Area that the Virtual Link
            #                         traverses. By definition, this is not 0.0.0.0
            # $3 = ospfVirtIfNeighbor - The Router ID of the Virtual Neighbor.
            # $4 = ospfVirtIfState - OSPF virtual interface states.
            ##########

            @AlertGroup = "Virtual IF Status"
            @AlertKey = $2 + "." + $3
            switch($4)
            {
                case "1": ### down
                    @Summary = "Virtual Interface ( AreaID = " + $2 + " ) regresse to Down state"
                    @Severity = 4
                    @Type = 1
                case "4": ### pointToPoint
                    @Summary = "Virtual Interface ( AreaID = " + $2 + " ) progressed to Point-to-Point state"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        case "2": ### ospfNbrStateChange

            ##########
            # An ospfNbrStateChange trap signifies that there has been a change in
            # the state of a non-virtual OSPF neighbor. This trap should be generated
            # when the neighbor state regresses (e.g., goes from Attempt or Full to
            # 1-Way or Down) or progresses to a terminal state (e.g., 2-Way or Full).
            # When an neighbor transitions from or to Full on non-broadcast
            # multi-access and broadcast networks, the trap should be generated by
            # the designated router. A designated router transitioning to Down will
            # be noted by ospfIfStateChange.
            #
            # $2 = ospfNbrIpAddr - The IP address this neighbor is using in its IP
            #                      Source Address. Note that, on addressless links,
            #                      this will not be 0.0.0.0, but the address of
            #                      another of the neighbor's interfaces.
            # $3 = ospfNbrAddressLessIndex - On an interface having an IP Address,
            #                                zero. On addressless interfaces, the
            #                                corresponding value of ifIndex in the
            #                                Internet Standard MIB. On row creation,
            #                                this can be derived from the instance.
            # $4 = ospfNbrRtrId - A 32-bit integer (represented as a type IpAddress)
            #                     uniquely identifying the neighboring router in the
            #                     Autonomous System.
            # $5 = ospfNbrState - The State of the relationship with this Neighbor.
            ##########

            @AlertGroup = "Neighbor Status"
            @AlertKey = $2 + "." + $3
	    @ExpireTime = 900
            switch($5)
            {
                case "1": ### down
                    @Summary = "OSPF Neighbor, " + $4 + ", down"
                    @Severity = 4
                    @Type = 1
                case "2": ### attempt
                    @Summary = "OSPF Neighbor, " + $4 + ", attempt"
                    @Severity = 2
                    @Type = 1
                case "3": ### init
                    @Summary = "OSPF Neighbor, " + $4 + ", init"
                    @Severity = 2
                    @Type = 1
                case "4": ### twoWay
                    @Summary = "OSPF Neighbor, " + $4 + ", 2-way"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "5": ### exchangeStart
                    @Summary = "OSPF Neighbor, " + $4 + ", exchange start"
                    @Severity = 2
                    @Type = 1
                case "6": ### exchange
                    @Summary = "OSPF Neighbor, " + $4 + ", exchange"
                    @Severity = 2
                    @Type = 1
                case "7": ### loading
                    @Summary = "OSPF Neighbor, " + $4 + ", loading"
                    @Severity = 2
                    @Type = 1
                case "8": ### full
                    @Summary = "OSPF Neighbor, " + $4 + ", full"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + @Agent + " " + @Manager

        case "3": ### ospfVirtNbrStateChange

            ##########
            # An ospfIfStateChange trap signifies that there has been a change in the
            # state of an OSPF virtual neighbor. This trap should be generated when
            # the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way
            # or Down) or progresses to a terminal state (e.g., Full).
            #
            # $2 = ospfVirtNbrArea - The Transit Area Identifier.
            # $3 = ospfVirtNbrRtrId - A 32-bit integer uniquely identifying the
            #                         neighboring router in the Autonomous System.
            # $4 = ospfVirtNbrState - The state of the Virtual Neighbor Relationship.
            ##########

            @AlertGroup = "Virtual Neighbor Status"
            @AlertKey = $2 + "." + $3
	    @ExpireTime = 900
            switch($4)
            {
                case "1": ### down
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", down"
                    @Severity = 4
                    @Type = 1
                case "2": ### attempt
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", attempt"
                    @Severity = 2
                    @Type = 1
                case "3": ### init
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", init"
                    @Severity = 2
                    @Type = 1
                case "4": ### twoWay
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", 2-way"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "5": ### exchangeStart
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", exchange start"
                    @Severity = 2
                    @Type = 1
                case "6": ### exchange
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", exchange"
                    @Severity = 2
                    @Type = 1
                case "7": ### loading
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", loading"
                    @Severity = 2
                    @Type = 1
                case "8": ### full
                    @Summary = "OSPF Virtual Neighbor, " + $3 + ", full"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        case "4" | "6": 

            ##########
            # 4: ospfIfConfigError - An ospfIfConfigError trap signifies that a
            #                        packet has been received on a non-virtual
            #                        interface from a router whose configuration
            #                        parameters conflict with this router's
            #                        configuration parameters. Note that the event
            #                        optionMismatch should cause a trap only if it
            #                        prevents an adjacency from forming.
            # 6: ospfIfAuthFailure - An ospfIfAuthFailure trap signifies that a
            #                        packet has been received on a non-virtual
            #                        interface from a router whose authentication key
            #                        or authentication type conflicts with this
            #                        router's authentication key or authentication
            #                        type.
            #
            # $2 = ospfIfIpAddress - The IP address of this OSPF interface.
            # $3 = ospfAddressLessIf - For the purpose of easing the instancing of
            #                          addressed and addressless interfaces; This
            #                          variable takes the value 0 on interfaces with
            #                          IP Addresses, and the corresponding value of
            #                          ifIndex for interfaces having no IP Address.
            # $4 = ospfPacketSrc - The IP address of an inbound packet that cannot be
            #                      identified by a neighbor instance.
            # $5 = ospfConfigErrorType - Potential types of configuration conflicts.
            #                            Used by the ospfConfigError and
            #                            ospfConfigVirtError traps.
            # $6 = ospfPacketType - OSPF packet types.
            ##########

            @AlertGroup = "IF Packet Conflict"
            @AlertKey = $2 + "." + $3 + "." + $4
            $ErrorType = lookup($5, ospfConfigErrorType)
            $PacketType = lookup($6, ospfPacketType)
            @Summary = "Conflicting packet received from " + $4 + ", " + $ErrorType + ": PacketType = " + $PacketType
            @Severity = 3
            @Type = 1
	    @ExpireTime = 900
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + $6 + " " + @Agent + " " + @Manager

        case "5" | "7":

            ##########
            # 5: ospfVirtIfConfigError - An ospfConfigError trap signifies that a
            #                            packet has been received on a virtual
            #                            interface from a router whose configuration
            #                            parameters conflict with this router's
            #                            configuration parameters. Note that the
            #                            event optionMismatch should cause a trap
            #                            only if it prevents an adjacency from
            #                            forming.
            # 7: ospfVirtIfAuthFailure - An ospfVirtIfAuthFailure trap signifies that
            #                            a packet has been received on a virtual
            #                            interface from a router whose authentication
            #                            key or authentication type conflicts with
            #                            this router's authentication key or
            #                            authentication type.
            #
            # $2 = ospfVirtIfAreaId - The Transit Area that the Virtual Link
            #                         traverses. By definition, this is not 0.0.0.0
            # $3 = ospfVirtIfNeighbor - The Router ID of the Virtual Neighbor.
            # $4 = ospfConfigErrorType - Potential types of configuration conflicts.
            #                            Used by the ospfConfigError and
            #                            ospfConfigVirtError traps.
            # $5 = ospfPacketType - OSPF packet types.
            ##########

            @AlertGroup = "Virtual IF Packet Conflict"
            @AlertKey = $2 + "." + $3
            $ErrorType = lookup($4, ospfConfigErrorType)
            $PacketType = lookup($5, ospfPacketType)
            @Summary = "Conflicting packet received from " + $3 + ", " + $ErrorType + ": PacketType = " + $PacketType
            @Severity = 3
            @Type = 1
	    @ExpireTime = 900
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + $5 + " " + @Agent + " " + @Manager

        case "8": ### ospfIfRxBadPacket

            ##########
            # An ospfIfRxBadPacket trap signifies that an OSPF packet has been
            # received on a non-virtual interface that cannot be parsed.
            #
            # $2 = ospfIfIpAddress - The IP address of this OSPF interface.
            # $3 = ospfAddressLessIf - For the purpose of easing the instancing of
            #                          addressed and addressless interfaces; This
            #                          variable takes the value 0 on interfaces with
            #                          IP Addresses, and the corresponding value of
            #                          ifIndex for interfaces having no IP Address.
            # $4 = ospfPacketSrc - The IP address of an inbound packet that cannot be
            #                      identified by a neighbor instance.
            # $5 = ospfPacketType - OSPF packet types.
            ##########

            @AlertGroup = "IF Rx Packet"
            @AlertKey = $2 + "." + $3 + "." + $4
            $PacketType = lookup($5, ospfPacketType)
            @Summary = "OSPF packet has been received cannot be parsed: PacketType = " + $PacketType
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + @Agent + " " + @Manager

        case "9": ### ospfVirtIfRxBadPacket

            ##########
            # An ospfRxBadPacket trap signifies that an OSPF packet has been received
            # on a virtual interface that cannot be parsed.
            #
            # $2 = ospfVirtIfAreaId - The Transit Area that the Virtual Link
            #                         traverses. By definition, this is not 0.0.0.0
            # $3 = ospfVirtIfNeighbor - The Router ID of the Virtual Neighbor.
            # $4 = ospfPacketType - OSPF packet types.
            ##########

            @AlertGroup = "Virtual IF Rx Packet"
            @AlertKey = $2 + "." + $3
            $PacketType = lookup($4, ospfPacketType)
            @Summary = "OSPF packet has been received cannot be parsed: PacketType = " + $PacketType
            @Severity = 3
            @Type = 1
	    @ExpireTime = 900
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        case "10": ### ospfTxRetransmit

            ##########
            # An ospfTxRetransmit trap signifies than an OSPF packet has been
            # retransmitted on a non-virtual interface. All packets that may be
            # retransmitted are associated with an LSDB entry. The LS type, LS ID,
            # and Router ID are used to identify the LSDB entry.
            #
            # $2 = ospfIfIpAddress - The IP address of this OSPF interface.
            # $3 = ospfAddressLessIf - For the purpose of easing the instancing of
            #                          addressed and addressless interfaces; This
            #                          variable takes the value 0 on interfaces with
            #                          IP Addresses, and the corresponding value of
            #                          ifIndex for interfaces having no IP Address.
            # $4 = ospfNbrRtrId - A 32-bit integer (represented as a type IpAddress)
            #                     uniquely identifying the neighboring router in the
            #                     Autonomous System.
            # $5 = ospfPacketType - OSPF packet types.
            # $6 = ospfLsdbType - The type of the link state advertisement. Each link
            #                     state type has a separate advertisement format.
            # $7 = ospfLsdbLsid - The Link State ID is an LS Type Specific field
            #                     containing either a Router ID or an IP Address; it
            #                     identifies the piece of the routing domain that is
            #                     being described by the advertisement.
            # $8 = ospfLsdbRouterId - The 32 bit number that uniquely identifies the
            #                         originating router in the Autonomous System.
            ##########

            @AlertGroup = "IF Retransmit"
            @AlertKey = $2 + "." + $6 + "." + $7 + "." + $8
            $PacketType = lookup($5, ospfPacketType)
            $LsdbType = lookup($6, ospfLsdbType)
            @Summary = "OSPF packet, " + $PacketType + ", has been retransmitted ( LS Type = " + $LsdbType + ", LS ID = " + $7 + ", Router ID = " + $8 + " )"
            @Severity = 3
            @Type = 1
	    @ExpireTime = 900 
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + @Agent + " " + @Manager

        case "11": ### ospfVirtIfTxRetransmit

            ##########
            # An ospfTxRetransmit trap signifies than an OSPF packet has been
            # retransmitted on a virtual interface. All packets that may be
            # retransmitted are associated with an LSDB entry. The LS type, LS ID,
            # and Router ID are used to identify the LSDB entry.
            #
            # $2 = ospfVirtIfAreaId - The Transit Area that the Virtual Link
            #                         traverses. By definition, this is not 0.0.0.0
            # $3 = ospfVirtIfNeighbor - The Router ID of the Virtual Neighbor.
            # $4 = ospfPacketType - OSPF packet types.
            # $5 = ospfLsdbType - The type of the link state advertisement. Each link
            #                     state type has a separate advertisement format.
            # $6 = ospfLsdbLsid - The Link State ID is an LS Type Specific field
            #                     containing either a Router ID or an IP Address; it
            #                     identifies the piece of the routing domain that is
            #                     being described by the advertisement.
            # $7 = ospfLsdbRouterId - The 32 bit number that uniquely identifies the
            #                         originating router in the Autonomous System.
            ##########

            @AlertGroup = "Virtual IF Retransmit"
            @AlertKey = $2 + "." + $5 + "." + $6 + "." + $7
            $PacketType = lookup($4, ospfPacketType)
            $LsdbType = lookup($5, ospfLsdbType)
            @Summary = "OSPF packet, " + $PacketType + ", has been retransmitted ( LS Type = " + $LsdbType + ", LS ID = " + $7 + ", Router ID = " + $8 + " )"
            @Severity = 3
            @Type = 1
	    @ExpireTime = 900
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        case "12": ### ospfOriginateLsa

            ##########
            # An ospfOriginateLsa trap signifies that a new LSA has been originated
            # by this router. This trap should not be invoked for simple refreshes of
            # LSAs (which happesn every 30 minutes), but instead will only be invoked
            # when an LSA is (re)originated due to a topology change. Additionally,
            # this trap does not include LSAs that are being flushed because they
            # have reached MaxAge.
            #
            # $2 = ospfLsdbAreaId - The 32 bit identifier of the Area from which the
            #                       LSA was received.
            # $3 = ospfLsdbType - The type of the link state advertisement. Each link
            #                     state type has a separate advertise- ment format.
            # $4 = ospfLsdbLsid - The Link State ID is an LS Type Specific field
            #                     containing either a Router ID or an IP Address; it
            #                     identifies the piece of the routing domain that is
            #                     being described by the advertisement.
            # $5 = ospfLsdbRouterId - The 32 bit number that uniquely identifies the
            #                         originating router in the Autonomous System.
            ##########

            @AlertGroup = "LSA Status"
            @AlertKey = $2 + "." + $3 + "." + $4 + "." + $5
            $LsdbType = lookup($5, ospfLsdbType)
            @Summary = "New LSA has been originated by this router ( LS Type = " + $LsdbType + ", LS ID = " + $4 + ", Router ID = " + $5 + " )"
            #@Severity = 1
            @Severity = 2
            #@Type = 0
            @Type = 13
	    @ExpireTime = 900
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + @Agent + " " + @Manager

        case "13": ### ospfMaxAgeLsa

            ##########
            # An ospfMaxAgeLsa trap signifies that one of the LSA in the router's
            # link-state database has aged to MaxAge.
            #
            # $2 = ospfLsdbAreaId - The 32 bit identifier of the Area from which the
            #                       LSA was received.
            # $3 = ospfLsdbType - The type of the link state advertisement. Each link
            #                     state type has a separate advertisement format.
            # $4 = ospfLsdbLsid - The Link State ID is an LS Type Specific field
            #                     containing either a Router ID or an IP Address; it
            #                     identifies the piece of the routing domain that is
            #                     being described by the advertisement.
            # $5 = ospfLsdbRouterId - The 32 bit number that uniquely identifies the
            #                         originating router in the Autonomous System.
            ##########

            @AlertGroup = "LSA Status"
            @AlertKey = $2 + "." + $3 + "." + $4 + "." + $5
            $LsdbType = lookup($5, ospfLsdbType)
            @Summary = "LSA has aged to MaxAge ( LS Type = " + $LsdbType + ", LS ID = " + $4 + ", Router ID = " + $5 + " )"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + @Agent + " " + @Manager

        case "14": ### ospfLsdbOverflow

            ##########
            # An ospfLsdbOverflow trap signifies that the number of LSAs in the
            # router's link-state database has exceeded ospfExtLsdbLimit.
            #
            # $2 = ospfExtLsdbLimit - The maximum number of non-default
            #                         AS-external-LSAs entries that can be stored in
            #                         the link-state database. If the value is -1,
            #                         then there is no limit. When the number of
            #                         non-default AS-external-LSAs in a router's
            #                         link-state database reaches ospfExtLsdbLimit,
            #                         the router enters Overflow-State. The router
            #                         never holds more than ospfExtLsdbLimit
            #                         non-default AS-external-LSAs in its database.
            #                         OspfExtLsdbLimit MUST be set identically in all
            #                         routers attached to the OSPF backbone and/or
            #                         any regular OSPF area. (i.e., OSPF stub areas
            #                         and NSSAs are excluded).
            ##########

            @AlertGroup = "LSDB Status"
            @AlertKey = ""
            @Summary = "Number of LSAs has exceeded ospfExtLsdbLimit ( " + $2 + " )"
            @Severity = 3
            @Type = 1
	    @ExpireTime = 900
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + @Agent + " " + @Manager

        case "15": ### ospfLsdbApproachingOverflow

            ##########
            # An ospfLsdbApproachingOverflow trap signifies that the number of LSAs
            # in the router's link-state database has exceeded ninety percent of
            # ospfExtLsdbLimit.
            #
            # $2 = ospfExtLsdbLimit - The maximum number of non-default
            #                         AS-external-LSAs entries that can be stored in
            #                         the link-state database. If the value is -1,
            #                         then there is no limit. When the number of
            #                         non-default AS-external-LSAs in a router's
            #                         link-state database reaches ospfExtLsdbLimit,
            #                         the router enters Overflow-State. The router
            #                         never holds more than ospfExtLsdbLimit
            #                         non-default AS-external-LSAs in its database.
            #                         OspfExtLsdbLimit MUST be set identically in all
            #                         routers attached to the OSPF backbone and/or
            #                         any regular OSPF area. (i.e., OSPF stub areas
            #                         and NSSAs are excluded).
            ##########

            @AlertGroup = "LSDB Status"
            @AlertKey = ""
            @Summary = "Number of LSAs has exceeded 90% of ospfExtLsdbLimit ( " + $2 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + @Agent + " " + @Manager

        case "16": ### ospfIfStateChange

            ##########
            # An ospfIfStateChange trap signifies that there has been a change in the
            # state of a non-virtual OSPF interface. This trap should be generated
            # when the interface state regresses (e.g., goes from Dr to Down) or
            # progresses to a terminal state (i.e., Point-to-Point, DR Other, Dr, or
            # Backup).
            #
            # $2 = ospfIfIpAddress - The IP address of this OSPF interface.
            # $3 = ospfAddressLessIf - For the purpose of easing the instancing of
            #                          addressed and addressless interfaces; This
            #                          variable takes the value 0 on interfaces with
            #                          IP Addresses, and the corresponding value of
            #                          ifIndex for interfaces having no IP Address.
            # $4 = ospfIfState - The OSPF Interface State.
            ##########

            @AlertGroup = "IF Status"
            @AlertKey = $2 + "." + $3
	    @ExpireTime=900
            switch($4)
            {
                case "1": ### down
                    @Summary = "OSPF Interface ( " + @AlertKey + " ) down"
                    @Severity = 4
                    @Type = 1
                case "2": ### loopback
                    @Summary = "OSPF Interface ( " + @AlertKey + " ) loopback"
                    @Severity = 2
                    @Type = 1
                case "3": ### waiting
                    @Summary = "OSPF Interface ( " + @AlertKey + " ) waiting"
                    @Severity = 2
                    @Type = 1
                case "4": ### pointToPoint
                    @Summary = "OSPF Interface ( " + @AlertKey + " ) pointToPoint"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "5": ### designatedRouter
                    @Summary = "OSPF Interface ( " + @AlertKey + " ) designatedRouter"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "6": ### backupDesignatedRouter
                    @Summary = "OSPF Interface ( " + @AlertKey + " ) backupDesignatedRouter"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "7": ### otherDesignatedRouter
                    @Summary = "OSPF Interface ( " + @AlertKey + " ) otherDesignatedRouter"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown specific trap number (" + $specific-trap + ") received for enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + $enterprise + " " + $generic-trap + " " + $specific-trap + " " + @Agent + " " + @Manager
            #details($*)
    }
