###############################################################################
#
#    Copyright (C) 1994 - 2003 Micromuse Inc.
#    All Rights Reserved
#
#    RESTRICTED RIGHTS:
#
#    This file may have been supplied under a license. It may be used,
#    disclosed, and/or copied only as permitted under such license agreement.
#    Any copy must contain the above copyright notice and this restricted
#    rights notice. Use, copying, and/or disclosure of the file is strictly
#    prohibited unless otherwise provided in the license agreement.
#
#    cisco.include.snmp.rules 3.0 2003/06/17 Robert Cowart
#
###############################################################################
#
# 3.0 - Rewritten for compliance with the Micromuse Rules File Standards
#       (MUSE-STD-RF-02, July 2002) - NOTE: Rewrite not yet 100% complete.
#
#     - Added Trap Handling for the folowing MIBs: CISCO-CALLHOME-MIB,
#       CISCO-DM-MIB, CISCO-EXT-SCSI-MIB, CISCO-FC-FE-MIB, CISCO-FCPING-MIB,
#       CISCO-FCS-MIB, CISCO-FCTRACEROUTE-MIB, CISCO-FSPF-MIB,
#       CISCO-HC-ALARM-MIB, CISCO-ISCSI-MIB, CISCO-NS-MIB, CISCO-RSCN-MIB,
#       CISCO-SCSI-MIB, CISCO-SYSTEM-EXT-MIB, CISCO-VIRTUAL-NW-IF-MIB,
#       CISCO-VSAN-MIB, CISCO-WWNMGR-MIB, CISCO-ZS-MIB.
#
#     - Changed case statement for Cisco SIBU Stackable Dual-Speed Hub to
#       process event from both .1.3.6.1.4.1.9.10.44.2.0 and
#       .1.3.6.1.4.1.9.10.44.2.0. This was necessary to account for cases where
#       the Cisco device sends traps which differ from that which is defined in
#       CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB.
#
# 2.7 - Fixed a bug and improved handling of traps defined in CISCO-ISDN-MIB.
#
# 2.6 - Removed old handling of CISCO-STP-EXTENSIONS-MIB's specific trap 1,
#       that was inadvertently left after the rewrite for v2.5.
#
#     - Corrected the case statement values for handling of reload and
#       tcpConnectionClose traps from CISCOTRAP-MIB.
#
# 2.5 - Where necessary added $specific-trap to @Identifier for ALL traps
#       handled in this include file in accordance with the most recent
#       standards for the SNMP include Library.
#       
#     - Completely rewrote the handling of traps defined in the following MIBs:
#       CISCO-VOICE-DIAL-CONTROL-MIB, CISCO-C8500-REDUNDANCY-MIB,
#       CISCO-CONFIG-MAN-MIB, CISCO-STP-EXTENSIONS-MIB (included adding
#       handling for specific traps 2 & 3), CISCO-ENVMON-MIB, CISCO-BSTUN-MIB,
#       CISCO-C2900-MIB, CISCO-CHANNEL-MIB, CISCO-CIPCMPC-MIB, CISCO-FLASH-MIB,
#       CISCO-CIPCSNA-MIB, CISCO-CLUSTER-MIB, CISCO-CONFIG-COPY-MIB,
#       CISCO-DLSW-EXT-MIB, CISCO-DLSW-MIB, CISCO-DSP-MGMT-MIB, CISCO-HSRP-MIB,
#       CISCO-ICSUDSU-MIB, CISCO-IP-ENCRYPTION-MIB, CISCO-ISDNU-IF-MIB,
#       CISCO-NETWORK-REGISTRAR-MIB, CISCO-RSRB-MIB, CISCO-RTTMON-MIB,
#       CISCO-SDLLC-MIB, CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB,
#       CISCO-SNA-LLC-MIB, CISCO-ALPS-MIB (including adding handling for
#       specific traps 4-6), CISCO-SYSLOG-MIB, CISCO-DOCS-EXT-MIB,
#       CISCO-ENTITY-SENSOR-MIB, CISCO-PING-MIB, CISCO-VTP-MIB
#
#     - Added Trap Handling for the folowing MIBs: CISCO-AAA-SERVER-MIB,
#       CISCO-APS-MIB, CISCO-CALL-TRACKER-MIB, CISCO-CCM-MIB, CISCO-SP-MIB,
#       CISCO-CONTENT-ENGINE-MIB, CISCO-CONTENT-NETWORK-MIB, CISCOWORKS-MIB,
#       CISCO-DOCS-REMOTE-QUERY-MIB, CISCO-ENTITY-ALARM-MIB, CISCO-STUN-MIB,
#       CISCO-ENTITY-FRU-CONTROL-MIB, CISCO-FIREWALL-MIB, CISCO-GATEKEEPER-MIB,
#       CISCO-GPRS-GTP-MIB, CISCO-IF-THRESHOLD-MIB, CISCO-IPSEC-FLOW-MONITOR-MIB,
#       CISCO-IPSEC-MIB, CISCO-ITP-SCCP-MIB, CISCO-ITP-SP-MIB, CISCO-SRP-MIB,
#       CISCO-OPTICAL-PATCH-MIB, CISCO-OSCP-MIB, CISCO-PIM-MIB, CISCO-PPPOE-MIB,
#       CISCO-RF-MIB, CISCO-RTTMON-MIB-120_5_T, CISCO-MAC-NOTIFICATION-MIB,
#       CISCO-TS-STACK-MIB, CISCO-VOICE-APPS-MIB, CISCO-SLB-MIB,
#       CISCO-WIRELESS-IF-MIB, CISCO-WIRELESS-P2MP-LINK-METRICS-MIB,
#       CISCO-WIRELESS-P2MP-PHY-MIB, CISCO-WIRELESS-P2MP-RF-METRICS-MIB
#       
#     - Made minor readability improvements to many other events not mentioned
#       above. 
#
# 2.4 - Improved event handling for Cisco ISDN events:
#         - Events reduction is improved due to improved compatibility with
#           GenericClear.
#         - Additional modifications were made to handle inconsistent varbind
#           numbers.
#
#     - Changed case statement for Cisco remote source-route bridging to
#       process event from both .1.3.6.1.4.1.9.9.29 and .1.3.6.1.4.1.9.9.29.2.
#       This was necessary to account for cases where the Cisco device sends
#       traps which differ from that which is defined in CISCO-RSRB-MIB.
#
#     - Changed definition of @Agent from "CISCO Network Registrar" to
#       "Cisco-Network Registrar".
#
# 2.3 - removed traps from enterprise .1.3.6.1.3.90.2. These traps are now
#       handled in IETF-DRAFT-XGCP-MIB.include.rules.
#    
#     - removed traps from enterprise .1.3.6.1.4.1.437.1.1.3. These traps are
#       now handled in grandjunctions.include.rules.
#
# 2.2 - Removed traps from enterprise .1.3.6.1.4.1.1570.1
#
# 2.1 - Corrected @Summary for ciscoEnvMonRedundantSupplyNotification
#
#     - Added specific-trap 3 to Cisco ISDN (not documented in MIB)
#
#     - Logic changed for Cisco Airline Protocol Support to properly use the
#       "status" varbind ($1) to set Summary, Severity, and Type.
#
#     - Improved @Identifier for various events, correcting cases where events
#       were either being improperly deduplicated or improperly correlated by
#       GenericClear.
#
# 2.0 - Initial Release based on Cisco MIBs.
#
#######################################################################

case ".1.3.6.1.4.1.9.10.17.3": ### Cisco Accounting Control - Notifications from ACCOUNTING-CONTROL-MIB

    @Agent = "Cisco-Accounting Control"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### acctngFileNearlyFull

            ##########
            # An indication that the size of the file into which accounting
            # information is currently being collected has exceeded the
            # threshold percentage of its maximum file size. This notification
            # is generated only at the time of the transition from
            # not-exceeding to exceeding.
            #
            # $1 = acctngFileName - The name of the file into which accounting
            #        data is to be stored. If files are named using suffixes,
            #        then the name of the current file is the concatenation of
            #        acctngFileName and acctngFileNameSuffix. An agent will
            #        respond with an error (e.g., 'wrongValue') to a management
            #        set operation which attempts to modify the value of this
            #        object to the same value as already held by another
            #        instance of acctngFileName. An agent will also respond
            #        with an error (e.g., 'wrongValue') if the new value is
            #        invalid for use as a file name on the local file system
            #        (e.g., many file systems do not support white space
            #        embedded in file names). The value of this object can not
            #        be modified while the corresponding instance of
            #        acctngFileRowStatus is 'active'.
            # $2 = acctngFileMaximumSize - The maximum size of the file
            #        (including header information). When the file of collected
            #        data reaches this size, either the agent automatically
            #        swaps to a new version (i.e., a new value
            #        acctngFileNameSuffix) of the file, or new records are
            #        discarded. Since a file must contain an integral number of
            #        connection records, the actual maximum size of the file
            #        may be just less OR Just greater than the value of this
            #        object. The value of this object can not be modified while
            #        the corresponding instance of acctngFileRowStatus is
            #        'active'. The largest value of the maximum file size in
            #        some agents will be less than 2147483647 bytes.
            # $3 = acctngControlTrapThreshold - A percentage of the maximum
            #        file size at which a 'nearly- full' trap is generated. The
            #        value of 0 indicates that no 'nearly-full' trap is to be
            #        generated.
            ##########

            $acctngFileName = $1
            $acctngFileMaximumSize = $2 + " bytes"
            $acctngControlTrapThreshold = $3 + "%"
            $acctngFileIndex = extract($OID1, "\.([0-9]+)$")
            #details($acctngFileName,$acctngFileMaximumSize,$acctngControlTrapThreshold,$acctngFileIndex)

            @AlertGroup = "Accounting File Size"
            @AlertKey = "acctngFileEntry." + $acctngFileIndex
            @Summary = "Accounting File Over " + $3 + "% Full, Max. Size " + $2 + " bytes  ( " + $1 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### acctngFileFull
        
            ##########
            # An indication that the size of the file into which accounting
            # information is currently being collected has transistioned to its
            # maximum file size. This notification is generated at the time of
            # the transition from not-full to full, and periodically thereafter
            # until such time as collection of data is no longer inhibited by
            # the file full condition.
            #
            # $1 = acctngFileName - The name of the file into which accounting
            #        data is to be stored. If files are named using suffixes,
            #        then the name of the current file is the concatenation of
            #        acctngFileName and acctngFileNameSuffix. An agent will
            #        respond with an error (e.g., 'wrongValue') to a management
            #        set operation which attempts to modify the value of this
            #        object to the same value as already held by another
            #        instance of acctngFileName. An agent will also respond
            #        with an error (e.g., 'wrongValue') if the new value is
            #        invalid for use as a file name on the local file system
            #        (e.g., many file systems do not support white space
            #        embedded in file names). The value of this object can not
            #        be modified while the corresponding instance of
            #        acctngFileRowStatus is 'active'.
            # $2 = acctngFileMaximumSize - The maximum size of the file
            #        (including header information). When the file of collected
            #        data reaches this size, either the agent automatically
            #        swaps to a new version (i.e., a new value
            #        acctngFileNameSuffix) of the file, or new records are
            #        discarded. Since a file must contain an integral number of
            #        connection records, the actual maximum size of the file
            #        may be just less OR Just greater than the value of this
            #        object. The value of this object can not be modified while
            #        the corresponding instance of acctngFileRowStatus is
            #        'active'. The largest value of the maximum file size in
            #        some agents will be less than 2147483647 bytes.
            ##########

            $acctngFileName = $1
            $acctngFileMaximumSize = $2
            $acctngFileIndex = extract($OID1, "\.([0-9]+)$")
            #details($acctngFileName,$acctngFileMaximumSize,$acctngFileIndex)

            @AlertGroup = "Accounting File Size"
            @AlertKey = "acctngFileEntry." + $acctngFileIndex
            @Summary = "Accounting File Full, Max. Size " + $2 + " bytes  ( " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.28.3": ### Cisco Health Monitor - from CISCO-5800-HEALTH-MON-MIB

    @Agent = "Cisco-Health Monitor"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoHealthMonNotification

            ##########
            # A ciscoHealthMonNotification is sent if the measured utilization
            # has crossed the threshold value. It will be generated when the
            # value rises above the threshold. ciscoHealthMonShelfId and
            # ciscoHealthMonAddress are optional entries. This entry is valid
            # only if the notification generated for the monitoring types set
            # on the router shelf. This entry will not have anything if
            # notification is generated for the monitoring types set on the
            # system controller.
            #
            # $1 = ciscoHealthMonStatusType - Monitoring type modemUtil(1),
            #        trunkUtil(2), iomemUtil(3)
            # $2 = ciscoHealthMonShelfId - This is the shelf-id of the
            #        monitored shelf.
            # $3 = ciscoHealthMonAddress - This is the IP address of the
            #        monitored shelf.
            # $4 = ciscoHealthMonDescr - Textual description of the utilization
            #        type being monitored on a shelf. This description is a
            #        short textual label, suitable as a human-sensible
            #        identification for the rest of the information in the
            #        entry.
            # $5 = ciscoHealthMonValue - The current value for the monitoring
            #        type on a monitored shelf.
            # $6 = ciscoHealthMonThreshold - This is the monitoring threshold
            #        value configured through the command line. If the
            #        configured monitoring type is io-mem, rmon alarm on the
            #        shelf will use this value as the threshold for generating
            #        the event. Shelf will be asked to send this generated
            #        event trap to the system controller. Once the system
            #        controller receives this trap, trap will converted to the
            #        health monitor mib format and sent to the management
            #        station. If the configured monitoring types are trunk
            #        and/or modem, ciscoHealthMonValue is compared with this
            #        value and if ciscoHealthMonValue exceeds this value, a
            #        notification is sent to the configured management station.
            #        Also, a notification will be sent to the management
            #        station if the current monitoring value is less than the
            #        configured threshold and the previous monitored value is
            #        greater than the configured threshold value.
            ##########
            
            @AlertGroup = "Cisco Health Monitor"
            @AlertKey = $2 + "." + $3
            @Summary = lookup($1, ciscoHealthMonStatusType) + ": " + $4 + " (" + $5 + ") Exceeds " + $6 + "  ( ShelfId = " + $2 + ", Address = " + $3 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.27.2": ### Cisco 6400 Chassis - Failure Notification from CISCO-6400-CHASSIS-MIB

    @Agent = "Cisco-6400 Chassis"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cisco6400ChassisFailureNotification
        
            ##########
            # The notification signifies that the agent detects a change in the
            # c64ChassisAlarmTable, the NMS application should start to poll
            # the c64ChassisAlarmTable to get up-to-date alarm information.
            #
            # $1 = c64ChassisFacilityAlarmStatus (Integer32) - This object is
            #        an OR bit mask indicating the presence of
            #        critical/major/minor telco alarm:
            #
            #              Bit 0, if set, indicates the presence of minor alarm
            #              Bit 1, if set, indicates the presence of major alarm
            #              Bit 2, if set, indicates the presence of critical alarm
            ##########

            @AlertGroup = "Cisco 6400 Chassis Status"
            @AlertKey = ""
            @Summary = "Cisco 6400 Chassis Failure - Poll the c64ChassisAlarmTable for Alarm Information"
            switch ($1)
            {
                case "1":
                    @Severity = 3
                case "2":
                    @Severity = 4
                case "4":
                    @Severity = 5
                default:
            }
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            update(@Severity)

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.61.2": ### Cisco Access Environment Monitor - traps from CISCO-ACCESS-ENVMON-MIB

    @Agent = "Cisco-Access Environment"
    @Class = "40057"
    
    switch ($2)
    {
        case "1":
            #@Severity = 1
            @Severity = 2
            @Type = 2
        case "2":
            @Severity = 2
            @Type = 1
        case "3":
            @Severity = 4
            @Type = 1
        case "4":
            @Severity = 5
            @Type = 1
        case "5":
            @Severity = 5
            @Type = 1
        default:
    }
    
    switch ($specific-trap)
    {
        case "1": ### caemTemperatureNotification
        
            ##########
            # A caemTemperatureNotification is sent if the over temperature
            # condition is detected in the managed system. This is a
            # replacement for the ciscoEnvMonTemperatureNotification trap
            # because the information 'ciscoEnvMonTemperatureStatusValue'
            # required by the trap is not available in the managed system. 
            #
            # $1 = ciscoEnvMonTemperatureStatusDescr - Textual description of
            #        the testpoint being instrumented. This description is a
            #        short textual label, suitable as a human-sensible
            #        identification for the rest of the information in the
            #        entry.
            # $2 = ciscoEnvMonTemperatureState - The current state of the
            #        testpoint being instrumented.
            ##########
            
            @AlertGroup = "Temperature Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ciscoEnvMonTemperatureStatusIndex
            @Summary = "Cisco Access Temperature " + lookup($2, ciscoEnvMonState) + ": " + $1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager
        
        case "2": ### caemVoltageNotification - A caemVoltageNotification is sent if the over voltage condition is detected and ciscoEnvMonVoltageState is not set to 'notPresent' in the managed system.
            
            ##########
            # A caemVoltageNotification is sent if the over voltage condition
            # is detected and ciscoEnvMonVoltageState is not set to
            # 'notPresent' in the managed system. This is a replacement for the
            # ciscoEnvMonVoltageNotification trap because the information
            # 'ciscoEnvMonVoltageStatusValue' required by the trap is not
            # available in the managed system. 
            #
            # $1 = ciscoEnvMonVoltageStatusDescr - Textual description of the
            #        testpoint being instrumented. This description is a short
            #        textual label, suitable as a human-sensible identification
            #        for the rest of the information in the entry.
            # $2 = ciscoEnvMonVoltageState - The current state of the testpoint
            #        being instrumented.
            ##########
            
            @AlertGroup = "Voltage Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ciscoEnvMonVoltageStatusIndex
            @Summary = "Cisco Access Voltage " + lookup($2, ciscoEnvMonState) + ": " + $1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.95.2": ### Cisco Airline Protocol Support - ALPS Notifications from CISCO-ALPS-MIB

    @Agent = "Cisco-Airline Protocol"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### alpsPeerStatusChange

            ##########
            # This Notification is generated when there is a change in state
            # for the peer connection, provided alarms are enabled for that
            # peer.
            #
            # $1 = alpsRemPeerState - TCP Peer State. Initially the connection
            #        is in the closed state. For permanent connections, it
            #        starts opening the TCP connection immediately, but for
            #        dynamic ones, it waits till there is traffic addressed to
            #        the remote peer. It then progresses via opening into the
            #        opened state.
            ##########

            @AlertGroup = "ALPS Peer Connection Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$") ### alpsRemPeerIpAddr
            switch ($1)
            {
                case "1": ### closed
                    @Summary = "ALPS Peer Connection Closed  ( RemotePeer = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "2": ### opening
                    @Summary = "ALPS Peer Connection Opening  ( RemotePeer = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### opened
                    @Summary = "ALPS Peer Connection Opened  ( RemotePeer = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "2": ### alpsCktStatusChange

            ##########
            # This Notification has to be generated whenever there is a state
            # change for the ALPS circuit, provided alarms are enabled for that
            # circuit.
            #
            # $1 = alpsCktBaseState - Indicates the state of ALPS Circuit.
            ##########

            @AlertGroup = "ALPS Circuit Status"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)\.[0-9]+$") ### alpsCktBaseName
            
            switch(extract($OID1, "\.([0-9]+)$")) ### alpsCktBaseDlcType
            { 
                case "1": ### emtox
                    @Summary = "ALPS EMTOX Circuit"
                case "2": ### ax25
                    @Summary = "ALPS AX25 Circuit"
                case "3": ### alc
                    @Summary = "ALPS ALC Circuit"
                case "4": ### uts
                    @Summary = "ALPS UTS Circuit"
                default:
                    @Summary = "ALPS Circuit"
            }
            
            switch ($1)
            {
                case "1": ### disabled
                    @Summary = @Summary + " Disabled  ( CircuitName = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "2": ### inoperable
                    @Summary = @Summary + " Inoperable  ( CircuitName = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "3": ### opening
                    @Summary = @Summary + " Opening  ( CircuitName = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### opened
                    @Summary = @Summary + " Opened  ( CircuitName = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "5": ### cktBusy
                    @Summary = @Summary + " Busy  ( CircuitName = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### peerBusy
                    @Summary = @Summary + " Peer Busy  ( CircuitName = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "7": ### updating
                    @Summary = @Summary + " Updating  ( CircuitName = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "3": ### alpsAscuStatusChange

            ##########
            # This Notification has to be generated whenever there is a change
            # in ASCU status, provided alarms are enabled for that ASCU.
            #
            # $1 = alpsAscuState - Reports the current ASCU Status. ASCUs are
            #        initially in disabled state. They are enabled from the
            #        parser if the operator wants to. This takes them to an UP
            #        state from which they go to a DOWN state if there are too
            #        many errors. 
            ##########

            @AlertGroup = "ALPS ASCU Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### ifIndex.alpsAscuId
            switch ($1)
            {
                case "1": ### disabled
                    @Summary = "ALPS ASCU Disabled  ( ifIndex.AscuId = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "2": ### unknown
                    @Summary = "ALPS ASCU Unknown  ( ifIndex.AscuId = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### down
                    @Summary = "ALPS ASCU Down  ( ifIndex.AscuId = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "4": ### up
                    @Summary = "ALPS ASCU Up  ( ifIndex.AscuId = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "4": ### alpsPeerConnStatusChange

            ##########
            # This Notification is generated when there is a change in state
            # for an ALPS peer connection, provided alarms are enabled for that
            # peer connection.
            #
            # $1 = alpsRemPeerConnState - The state of the connection to an
            #        ALPS remote peer.
            ##########

            @AlertGroup = "ALPS Peer Connection Status"
            @AlertKey = extract($OID1, "9\.95\.1\.2\.4\.1\.5\.(.*)$") ### alpsRemPeerConnIpAddr.alpsRemPeerConnIdString
            switch ($1)
            {
                case "1": ### closed
                    @Summary = "ALPS Peer Connection Closed  ( RemPeerIpAddr.ConnId = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "2": ### opening
                    @Summary = "ALPS Peer Connection Opening  ( RemPeerIpAddr.ConnId = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### opened
                    @Summary = "ALPS Peer Connection Opened  ( RemPeerIpAddr.ConnId = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "4": ### busy
                    @Summary = "ALPS Peer Connection Busy  ( RemPeerIpAddr.ConnId = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "5": ### alpsCktOpenFailure

            ##########
            # This Notification is generated whenever there is an open failure
            # for the ALPS circuit, provided alarms are enabled for that
            # circuit.
            #
            # $1 = alpsCktBaseDownReason - Reports the reason why this ALPS
            #        Circuit is down, if it is down.
            ##########

            @AlertGroup = "ALPS Circuit Status"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)\.[0-9]+$") ### alpsCktBaseName
            
            switch(extract($OID1, "\.([0-9]+)$")) ### alpsCktBaseDlcType
            { 
                case "1": ### emtox
                    @Summary = "ALPS EMTOX Circuit"
                case "2": ### ax25
                    @Summary = "ALPS AX25 Circuit"
                case "3": ### alc
                    @Summary = "ALPS ALC Circuit"
                case "4": ### uts
                    @Summary = "ALPS UTS Circuit"
                default:
                    @Summary = "ALPS Circuit"
            }
            
            @Summary = @Summary + " Open Failure, " + lookup($1, alpsCktBaseDownReason) + "  ( CircuitName = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "6": ### alpsCktPartialReject

            ##########
            # This Notification is generated whenever there is an open
            # confirmation that contains a list of rejected ASCUs for the ALPS
            # circuit, provided alarms are enabled for that circuit.
            #
            # $1 = alpsCktAscuIfIndex - Reports the interface the ASCU is on.
            #        This field, along with alpsCktAscuId is provided so that
            #        it is possible to correlate this information with the
            #        configured ASCU information in alpsAscuTable.
            # $2 = alpsCktAscuId - Reports the ASCU Identifier which uniquely
            #        identifies an ASCU on a given interface. This value is the
            #        Interface Address (IA) for ALC and the Remote Identifier
            #        (RID) for UTS. A value of 0 indicates that the ASCU id is
            #        either unavailable or not applicable.
            ##########

            @AlertGroup = "ALPS ASCU Status"
            @AlertKey = $1 + "." + $2
            @Summary = "ASCU Rejected During Circuit Startup   ( ifIndex = " + $1 + ", ASCU + " + $2 + " ) "
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.60.2": ### Cisco ATM Dual Physical Interface - from CISCO-ATM-DUAL-PHY-MIB

    @Agent = "Cisco-ATM Dual Phy"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoAtmDualPhyChange

            ##########
            # A ciscoAtmDualPhyChange trap is sent when the active phy changes
            # either because of a failure or because of user intervention
            # (setting cadpStatAdminActivePhy, for example).
            #
            # $1 = cadpStatOperActivePhy - Returns the ifIndex of the phy which
            #        is currently the active phy. A value of 0 indicates that
            #        no phy is currently active.
            ##########

            @AlertGroup = "ATM Active Phy Change"
            @AlertKey = $1
            @Summary = "ATM Active Physical Interface Change: New Active ifIndex = " + $1
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.35.2": ### Cisco Blocked Serial Tunnel - BSTUN Notifications from CISCO-BSTUN-MIB

    @Agent = "Cisco-Blocked Serial Tunnel"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### bstunPeerStateChangeNotification
            
            ##########
            # This notification indicates that the state of a BSTUN route has
            # transitioned to active (connected) or inactive (dead or closed).
            #
            # $1 = bstunRoutePeerState - The state of the peer connection
            #        through the BSTUN tunnel.
            ##########
            
            @AlertGroup = "BSTUN Peer State Change"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)") ### bstunRouteGroupIndex.bstunRouteStationAddress
            switch ($1)
            {
                case "1": ### dead
                    @Summary = "Blocked Serial Tunnel (BSTUN) Route Dead  ( GroupIndex.StationAddress = " + @AlertKey + " )" 
                    @Severity = 5
                    @Type = 1
                case "2": ### closed
                    @Summary = "Blocked Serial Tunnel (BSTUN) Route Closed  ( GroupIndex.StationAddress = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "3": ### opening
                    @Summary = "Blocked Serial Tunnel (BSTUN) Route Opening  ( GroupIndex.StationAddress = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### openWait
                    @Summary = "Blocked Serial Tunnel (BSTUN) Route Open, Waiting  ( GroupIndex.StationAddress = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### connected
                    @Summary = "Blocked Serial Tunnel (BSTUN) Route Connected  ( GroupIndex.StationAddress = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "6": ### direct
                    @Summary = "Blocked Serial Tunnel (BSTUN) Route Direct  ( GroupIndex.StationAddress = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)        
    }

case ".1.3.6.1.4.1.9.9.87.2": ### Cisco C2900 - Catalyst Notifications from CISCO-C2900-MIB

    @Agent = "Cisco-C2900"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### c2900AddressViolation
        
            ##########
            # The addressViolation notification is generated when an address
            # violation is detected on a secured port. The generation of the
            # addressViolation notification can be enabled or suppressed using
            # the object c2900ConfigAddressViolationAction. The particular
            # secured port is indicated by the value of c2900PortIfIndex.
            #
            # $1 = c2900PortIfIndex - The value of the instance of the ifIndex
            #        object, defined in MIB-II, for the interface corresponding
            #        to this port.
            ##########
            
            @AlertGroup = "c2900 Address Violation"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)") ### c2900PortModuleIndex.c2900PortIndex
            @Summary = "Address Violation on Secured Port  ( Module.Port = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        case "2": ### c2900BroadcastStorm - The broadcastStorm notification is generated upon detecting a port is receiving broadcast packets at a rate crossing the specified broadcast threshold. This trap is only for the rising threshold. The particular port is indicated by the values of c2900PortModuleIndex and c2900PortIndex, and the value of the threshold is given by c2900PortBroadcastRisingThreshold.
            
            ##########
            # The broadcastStorm notification is generated upon detecting a
            # port is receiving broadcast packets at a rate crossing the
            # specified broadcast threshold. This trap is only for the rising
            # threshold. The particular port is indicated by the values of
            # c2900PortModuleIndex and c2900PortIndex, and the value of the
            # threshold is given by c2900PortBroadcastRisingThreshold.
            #
            # $1 = c2900PortBroadcastRisingThreshold - The broadcast rising
            #        threshold is measured in the number of broadcast frames
            #        received on a port in a second. When the number of
            #        broadcast frames received per second on this port crosses
            #        this threshold, the appropriate action as specified by the
            #        object c2900PortBroadcastStormAction will take place. See
            #        the description of c2900PortBroadcastStormAction.
            ##########
            
            @AlertGroup = "c2900 Broadcast Storm"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)") ### c2900PortModuleIndex.c2900PortIndex
            @Summary = "Port Receiving Excessive Broadcast Packets, over " + $1 + " frames/sec.  ( Module.Port = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.105.2": ### Cisco Cat8540MSR Redundancy Management - Notifications from CISCO-C8500-REDUNDANCY-MIB

    @Agent = "Cisco-Cat8540MSR Redundancy"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ccrCpuStatusChange
            
            ##########
            # This notification is generated when the value of ccrCpuStatus
            # changes for a CPU card. The varbind indicates the current status
            # of the affected card.
            #
            # $1 = ccrCpuStatus - The operational status of this CPU card.
            ##########
            
            @AlertGroup = "CPU Redundancy Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ccrCpuSlotIndex
            switch ($1)
            {
                case "1": ### notPresent
                    @Summary = "CPU Card Redundancy Not Present  ( Slot " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "2": ### ok
                    @Summary = "CPU Card Redundancy OK  ( Slot " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### fault
                    @Summary = "CPU Card Redundancy Fault  ( Slot " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
                    @Summary = "CPU Card Redundancy Unknown  ( Slot " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        case "2": ### ccrSwitchStatusChange
            
            ##########
            # This notification is generated when the value of ccrSwitchStatus
            # changes for a switch card. The varbind indicates the current
            # status of the affected card.
            #
            # $1 = ccrSwitchStatus - The operational status of this switch
            #        card.
            ##########
            
            @AlertGroup = "Switch Redundancy Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ccrSwitchSlotIndex
            switch ($1)
            {
                case "1": ### notPresent
                    @Summary = "Switch Card Redundancy Not Present  ( Slot " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "2": ### ok
                    @Summary = "Switch Card Redundancy OK  ( Slot " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### fault
                    @Summary = "Switch Card Redundancy Fault  ( Slot " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
                    @Summary = "Switch Card Redundancy Unknown  ( Slot " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        case "3": ### ccrSwitchModeChange
            
            ##########
            # This notification is generated when the value of ccrSwitchMode
            # changes from active(1) to either standby(2) or unused(3) or
            # notPresent(4). The varbind indicates the current mode of the
            # affected card.
            #
            # $1 = ccrSwitchMode - The redundancy mode of this switch card.
            ##########
            
            @AlertGroup = "Switch Redundancy Mode"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ccrSwitchSlotIndex
            switch ($1)
            {
                case "1": ### active - also called 'primary'
                    @Summary = "Switch Card in Active Redundancy Mode  ( Slot " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### standby - also called 'secondary'
                    @Summary = "Switch Card in Standby Redundancy Mode  ( Slot " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 600
                case "3": ### unused - 'not used' or 'non participant'
                    @Summary = "Switch Card Not Used for Redundancy  ( Slot " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### notPresent - no card in slot
                    @Summary = "Switch Card Not Present  ( Slot " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
                    @Summary = "Switch Card Redundancy Mode Unknown  ( Slot " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.20.1.5": ### Cisco IBM channel - Notifications from CISCO-CHANNEL-MIB

    @Agent = "Cisco-IBM channel"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### cipCardLinkFailure

            ##########
            # This trap indicates that a significant link event has been recognized
            # resulting in the degradation of the interface line quality. (This trap
            # was deactivated 6/97, below trap is now sent on link failures)
            #
            # $1 = cipCardDtrBrdIndex - This indicates which daughter board is
            #                           being referenced for a particular CMCC card.
            # $2 = cipCardDtrBrdStatus - cipCardDtrBrdStatus is true(1) when the
            #                            microcode for the daughter board has been
            #                            successfully loaded and is executing,
            #                            false(2) otherwise.
            # $3 = cipCardDtrBrdSignal - For ESCON, cipCardDtrBrdSignal is true(1)
            #                            when light has been seen on the fiber and
            #                            synchronization has been established,
            #                            false(2) otherwise.
            #             
            #                            For the Parallel Channel Adapter (PCA) which
            #                            provides the Bus and Tag connection,
            #                            cipCardDtrBrdSignal is true when Operational
            #                            out has been sensed, false otherwise.
            # $4 = linkIncidentTrapCause - This indicates the reason for the last
            #                              link failure. (see lookup table)
            # $5 = implicitIncidents - This counts the number of times the ESCON
            #                          Processor recovers from an internal error.
            # $6 = codeViolationErrors - The number of recognized code-violation
            #                            errors.
            #
            #                            A trap is issued when this number exceeds
            #                            the bit error rate threshold for ESCON. The
            #                            bit error rate threshold is set at 15 error
            #                            burst within a 5 minute period. An error
            #                            burst is the time period of 1.5 seconds plus
            #                            or minus 0.05 seconds during which one or
            #                            more code violations errors occur.
            # $7 = linkFailureSignalOrSyncLoss - The number of link failures
            #                                    recognized as a result of a loss-of-
            #                                    signal or loss of synchronization
            #                                    that persisted longer than the link
            #                                    interval duration, the link interval 
            #                                    duration is one second with a
            #                                    tolerance of +1.5/-0 seconds.
            # $8 = linkFailureNOSs - The number of link failures recognized as a
            #                        result of the not-operational sequence (NOS).
            # $9 = linkFailureSequenceTimeouts - The number of link failures
            #                                    recognized as a result of a
            #                                    connection recovery timeout or
            #                                    response timeout occurring while in
            #                                    transmit OLS state.
            # $10 = linkFailureInvalidSequences - The number of link failures
            #                                     recognized as a result of an
            #                                     invalid sequence for Link-Level-
            #                                     Facility State. Either a UD or UDR
            #                                     sequence was recognized while in
            #                                     wait-for-offline-sequence state.
            ##########

            @AlertGroup = "Card Link Failure"
            @AlertKey = $1
            @Summary = "Significant Link Event: Degraded Interface Line Quality"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cipCardDtrBrdLinkFailure
        
            ##########
            # This trap indicates that a significant link event has been recognized
            # resulting in the degradation of the interface line quality.
            #
            # $1 = cipCardDtrBrdStatus - cipCardDtrBrdStatus is true(1) when the
            #                            microcode for the daughter board has been
            #                            successfully loaded and is executing,
            #                            false(2) otherwise.
            # $2 = cipCardDtrBrdSignal - For ESCON, cipCardDtrBrdSignal is true(1)
            #                            when light has been seen on the fiber and
            #                            synchronization has been established,
            #                            false(2) otherwise.
            #             
            #                            For the Parallel Channel Adapter (PCA) which
            #                            provides the Bus and Tag connection,
            #                            cipCardDtrBrdSignal is true when Operational
            #                            out has been sensed, false otherwise.
            # $3 = linkIncidentTrapCause - This indicates the reason for the last
            #                              link failure. (see lookup table)
            ##########

            @AlertGroup = "Card Link Failure"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### cipCardEntryIndex.cipCardDtrBrdIndex
            switch ($1)
            {
                case "1":
                    switch ($2)
                    {
                        case "1":
                            @Summary = "Board Loaded and Executing, Signal OK: " + lookup($3, linkIncidentTrapCause) + "  ( Card.DtrBrd = " + @AlertKey + " )"
                            #@Severity = 1
                            @Severity = 2
                            @Type = 2
                        case "2":
                            @Summary = "Board Loaded and Executing, Signal Failure: " + lookup($3, linkIncidentTrapCause) + "  ( Card.DtrBrd = " + @AlertKey + " )"
                            @Severity = 3
                            @Type = 1
                        default:
                    }
                case "2":
                    switch ($2)
                    {
                        case "1":
                            @Summary = "Board Failed, Signal OK: " + lookup($3, linkIncidentTrapCause) + "  ( Card.DtrBrd = " + @AlertKey + " )"
                            @Severity = 3
                            @Type = 1
                        case "2":
                            @Summary = "Board Failed, Signal Failure: " + lookup($3, linkIncidentTrapCause) + "  ( Card.DtrBrd = " + @AlertKey + " )"
                            @Severity = 4
                            @Type = 1
                        default:
                    }
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + $2 + " " + $3 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.72.2": ### Cisco MultiPath Channel - Notifications from CISCO-CIPCMPC-MIB

    @Agent = "Cisco-MultiPath Channel"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### cipCmpcDirectionMismatch
            
            ##########
            # This trap indicates that the configured direction for the
            # specified CMPC subchannel does not match the direction specified
            # by the host. The CMPC subchannel will not activate as long as
            # this mismatch exists.
            #
            # $1 = cipCmpcSubChannelAdminDirection - Specifies whether the CMPC
            #        subchannel is for host reads or host writes.
            ##########
            
            @AlertGroup = "CMPC Direction Mismatch"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+)$") ### cipCardEntryIndex.cipCardDtrBrdIndex.cipCardSubChannelIndex
            @Summary = "Configured Direction ( " + lookup($1, cipCmpcSubChannelAdminDirection) + " ) of CMPC Subchannel does Not Match Direction Specified by Host  ( Card.DtrBrd.SubChannel = " + @AlertKey + " )" 
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager + " " + $1
        
        case "2": ### cipCmpcSeqNumError

            ##########
            # This trap indicates that the CMPC TG has detected an MPC sequence
            # number error. This error will cause the CMPC TG to disconnect.
            #
            # $1 = cipCmpcTgOperLastSeqNumFailureCause - The last CMPC TG
            #        sequence number failure cause. none - No sequence number
            #        errors have been detected.
            #          blockSeqError - Sequence number received in a cmpc I/O
            #            block did not match the expected sequence number.
            #          sweepSeqError - Sequence number received in a sweep
            #            message does not compare to the expected sequence
            #            number. for this CMPC TG.
            # $2 = cipCmpcTgOperExpectedReceiveSeqNum - This is the sequence
            #        number expected from the host by this CMPC TG.
            # $3 = cipCmpcTgOperLastSeqNumReceived - This is the last sequence
            #        number received from the host by this CMPC TG.
            ##########
            
            @AlertGroup = "CMPC Sequence Number Error"
            @AlertKey = rtrim(extract($OID1, "\.([0-9]+\.[A-Z|a-z|0-9|-|_]+)$")) ### ifIndex.cipCmpcTgOperName
            switch($1)
            {
                case "1": ### none - No sequence number errors have been detected.
                    @Summary = "No MPC Sequence Number Error  ( Interface.CMPCTransGroup = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### blockSeqError - Sequence number received in a cmpc I/O block did not match the expected sequence number.
                    @Summary = "I/O Block MPC Sequence Number Error  ( Interface.CMPCTransGroup = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### sweepSeqError - Sequence number received in a sweep message does not compare to the expected sequence number for this CMPC TG.
                    @Summary = "Sweep Message MPC Sequence Number Error  ( Interface.CMPCTransGroup = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager + " " + $1
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.33.2": ### CIP Channel SNA - Notifications from CISCO-CIPCSNA-MIB

    @Agent = "Cisco-CIP Channel SNA"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### cipCsnaOpenDuplicateSapFailure

            ##########
            # This trap indicates that VTAM attempted to open a SAP that was
            # already open via another Path/Device on this CMCC card.
            #
            # $1 = cipCardCsnaSlot - Slot number of the CMCC card that the Path
            #        and Device are configured.
            # $2 = cipCardCsnaPort - Port number on the CMCC card that the Path
            #        and Device are configured.
            # $3 = cipCardCsnaConnPath - Hex path identifier used by this
            #        instance of CMCC LAN adapter/SAP to connect SNA sessions
            #        to VTAM. For more information see the textual convention
            #        ChannelPath.
            # $4 = cipCardCsnaConnDevice - Two digit hex device address used by
            #        this CMCC LAN adapter/SAP instance to connect SNA sessions
            #        to VTAM. For more information see the textual convention
            #        ChannelDevice.
            ##########
            
            @AlertGroup = "SAP Open"
            @AlertKey = $1 + "." + $2 + "." + $3 + "." + $4 ### slot.port.connPath.connDevice
            @Summary = "VTAM Attempted to Open SAP, Already Open by Path/Device on this CMCC card  ( Slot.Port.ConnPath.ConnDevice = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        case "2": ### cipCsnaLlc2ConnectionLimitExceeded

            ##########
            # This trap indicates that a connection attempt was rejected due to
            # a connection resource limitation
            #
            # $1 = cipCardAdminMaxLlc2Sessions - The configured maximum number
            #        of LLC2 sessions allowed on a CMCC card. A value of zero
            #        indicates that the maximum should only be limited by the
            #        amount of available memory on the CMCC. A value greater
            #        than zero indicates the maximum number of sessions the
            #        CMCC will support given there is enough memory available
            #        on the CMCC card. This value can be set at any time,
            #        however it will only affect the Maximum number of LLC2
            #        sessions supported on a CIP the first time it is set and
            #        only if the value it is being set to is greater than the
            #        current value for cipCardStatsHiWaterLlc2Sessions.
            # $2 = cipCardOperMaxLlc2Sessions - This value indicates the
            #        current number of LLC2 sessions that can be supported on
            #        this CMCC card. If this value is zero, then the limit of
            #        LLC2 sessions on the CMCC card is only limited by the
            #        amount of memory available.
            # $3 = cipCardStatsHiWaterLlc2Sessions - High water LLC2 sessions
            #        count per CMCC card. If cipCardOperMaxLlc2Sessions is zero
            #       (0), then this value starts at 256 Llc2 sessions and will
            #        be incremented in values of 64 as more active concurrent
            #        LLC2 sessions are established. If
            #        cipCardOperMaxLlc2Sessions is greater then zero (0), then
            #        this value will either be equal to the
            #        cipCardOperMaxLlc2Sessions given enough memory is
            #        available on the CMCC card to support that many LLC2
            #        sessions or the the value will be less than
            #        cipCardOperMaxLlc2Sessions, reflecting the maximum number
            #        of LLC2 sessions the CMCC card can support.
            # $4 = cipCardStatsLlc2SessionAllocationErrs - This value
            #        represents the number of memory allocation errors that
            #        have occurred when attempting to create a new block of
            #        memory for the LLC2 session buffer pool.
            ##########
            
            @AlertGroup = "LLC2 Connection"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### cipCardEntryIndex
            @Summary = "LLC2 Connection Limit ( AdminMax = " + $1 + ", OperMax = " + $2 + " ) Exceeded:  Llc2SessionAllocationErrs = " + $4 + "  ( Card = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.134.2": ### Cisco Cluster - Notifications from CISCO-CLUSTER-MIB

    @Agent = "Cisco-Cluster"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ccStatusMemberStatusChange

            ##########
            # A cluster member status change notification is generated whenever
            # the value of any instance of ccClusterMemberOperStatus changes
            # after the member is completely added to the cluster.
            #
            # $1 = ccMemberOperStatus - The status of cluster management
            #        connectivity between the command switch and a cluster
            #        member. Cluster management connectivity is determined by
            #        the exchange of cluster management messages between the
            #        command switch and a cluster member. A member that has
            #        failed to exchange cluster management messages with the
            #        command switch is deemed to be inactive. Otherwise, it is
            #        deemed to be active.
            ##########
            
            @AlertGroup = "Cluster Member Status"
            @AlertKey = extract($OID1, "9\.134\.1\.2\.1\.1\.3\.(.*)$") ### ccMemberMacAddress
            switch ($1) ### ccMemberOperStatus
            {
                case "1": ### active
                    @Summary = "Cluster Member Active  ( MemberMacAddress = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### inactive
                    @Summary = "Cluster Member Inactive  ( MemberMacAddress = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.96.2.1": ### Cisco Router Configuration Copy - Notifications from CISCO-CONFIG-COPY-MIB

    @Agent = "Cisco-Router Configuration Copy"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ccCopyCompletion

            ##########
            # A ccCopyCompletion trap is sent at the completion of a
            # config-copy request. The ccCopyFailCause is not instantiated, and
            # hence not included in a trap, when the ccCopyState is success.
            #
            # $1 = ccCopyServerAddress - The ip address of the tftp server from
            #        (or to) which to copy the configuration file. This object
            #        must be created when either the ccCopySourceFileType or
            #        ccCopyDestFileType has the value networkFile. Values of
            #        0.0.0.0 or FF.FF.FF.FF for ccCopyServerAddress are not
            #        allowed.
            # $2 = ccCopyFileName - The file name (including the path, if
            #        applicable) of the file. This object must be created when
            #        either the ccCopySourceFileType or ccCopyDestFileType has
            #        the value networkFile or iosFile.
            # $3 = ccCopyState - Specifies the state of this config-copy
            #        request. This value of this object is instantiated only
            #        after the row has been instantiated, i.e. after the
            #        ccCopyEntryRowStatus has been made active.
            # $4 = ccCopyTimeStarted - Specifies the time the ccCopyState last
            #        transitioned to running, or 0 if the state has never
            #        transitioned to running (for e.g., stuck in waiting
            #        state). This object is instantiated only after the row has
            #        been instantiated.
            # $5 = ccCopyTimeCompleted - Specifies the time the ccCopyState
            #        last transitioned from running to successful or failed
            #        states. This object is instantiated only after the row has
            #        been instantiated. Its value will remain 0 until he
            #        request has completed.
            # $6 = ccCopyFailCause - The reason why the config-copy operation
            #        failed. This object is instantiated only when the
            #        ccCopyState for this entry is in the failed state.
            ##########
            
            $ccCopyServerAddress = $1
            $ccCopyFileName = $2
            $ccCopyState = lookup($3, ConfigCopyState) + " ( " + $3 + " )"
            $ccCopyTimeStarted = $4
            $ccCopyTimeCompleted = $5
            $ccCopyFailCause = lookup($6, ConfigCopyFailCause)
            
            @AlertGroup = "Configuration Copy Status"
            @AlertKey = "TFTP Server: " + $1 + ", File: " + $2
            switch ($3)
            {
                case "1": ### Waiting
                    @Summary = "Configuration Copy Waiting"
                    @Severity = 2
                    @Type = 1
                case "2": ### Running
                    @Summary = "Configuration Copy Running"
                    @Severity = 2
                    @Type = 1
                case "3": ### Successful
                    @Summary = "Configuration Copy Successful"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "4": ### Failed
                    @Summary = "Configuration Copy Failed, " + $ccCopyFailCause
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Summary = @Summary + "  ( " + @AlertKey +  " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2
            
            $ccCopyFailCause = $ccCopyFailCause + " ( " + $6 + " )"
            #details($ccCopyServerAddress,$ccCopyFileName,$ccCopyState,$ccCopyTimeStarted,$ccCopyTimeCompleted,$ccCopyFailCause)
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.43.2": ### Cisco Configuration Management - Notifications from CISCO-CONFIG-MAN-MIB

    @Agent = "Cisco-Configuration Management"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoConfigManEvent

            ##########
            # Notification of a configuration management event as recorded in
            # ccmHistoryEventTable.
            #
            # $1 = ccmHistoryEventCommandSource - The source of the command
            #        that instigated the event.
            # $2 = ccmHistoryEventConfigSource - The configuration data source
            #        for the event.
            # $3 = ccmHistoryEventConfigDestination - The configuration data
            #        destination for the event.
            ##########
            
            $ccmHistoryEventCommandSource = lookup($1, ccmHistoryEventCommandSource)
            $ccmHistoryEventConfigSource = lookup($2, HistoryEventMedium)
            $ccmHistoryEventConfigDestination = lookup($3, HistoryEventMedium)
            $ccmHistoryEventIndex = extract($OID1, "\.([0-9]+)$")
            
            @AlertGroup = "Configuration Change"
            @AlertKey = "ccmHistoryEventEntry." + $ccmHistoryEventIndex
            @Summary = "Configuration Changed via " + $ccmHistoryEventCommandSource + "  ( Config Data Source: " + $ccmHistoryEventConfigSource + ", Config Data Destination: " + lookup($3, HistoryEventMedium) + " )"
            @Severity = 2
            @Type = 1800
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1 + " " + $2 + " " + $3
            
            $ccmHistoryEventCommandSource = $ccmHistoryEventCommandSource + " ( " + $1 + " )"
            $ccmHistoryEventConfigSource = $ccmHistoryEventConfigSource + " ( " + $2 + " )"
            $ccmHistoryEventConfigDestination = $ccmHistoryEventConfigDestination + " ( " + $3 + " )"
            #details($ccmHistoryEventCommandSource,$ccmHistoryEventConfigSource,$ccmHistoryEventConfigDestination ,$ccmHistoryEventIndex)
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.74.2": ### DLSw-Cisco Specific Features - Notifications from CISCO-DLSW-EXT-MIB

    @Agent = "Cisco-DLSw Extensions"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### cdeTrapTConnUpDown

            ##########
            # This trap is sent each time a transport connection changes state
            # to `connected' or `disconnected'. The emission of this trap is
            # controlled by cdeTrapCntlTConn.
            #
            # $1 = dlswTConnOperState - The state of this transport connection.
            #        The transport connection enters `connecting' state when
            #        DLSw makes a connection request to the transport layer.
            #        Once initial Capabilities Exchange is sent, the transport
            #        connection enters enters `initCapExchange' state. When
            #        partner capabilities have been determined and the
            #        transport connection is ready for sending CanUReach (CUR)
            #        messages, it moves to the `connected' state. When DLSw is
            #        in the process of bringing down the connection, it is in
            #        the `disconnecting' state. When the transport layer
            #        indicates one of its connections is disconnected, the
            #        transport connection moves to the `disconnected' state.
            #        Whereas all of the values will be returned in response to
            #        a management protocol retrieval operation, only two values
            #        may be specified in a management protocol set operation:
            #        `quiescing' and `disconnecting'. Changing the value to
            #        `quiescing' prevents new circuits from being established,
            #        and will cause a transport disconnect when the last
            #        circuit on the connection goes away. Changing the value to
            #        `disconnecting' will force off all circuits immediately
            #        and bring the connection to `disconnected' state.
            ##########
            
            @AlertGroup = "Transport Connection Status"
            @AlertKey = extract($OID1, "46\.1\.2\.3\.1\.1\.(.*)$") ### dlswTConnOperTDomain.dlswTConnOperRemoteTAddr
            switch ($1)
            {
                case "1": ### connecting
                    @Summary = "DLSw Transport Connection, Connecting  ( TransDomain.RemoteTransAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "2": ### initCapExchange
                    @Summary = "DLSw Transport Connection, Initial Capability Exchange  ( TransDomain.RemoteTransAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### connected
                    @Summary = "DLSw Transport Connection, Connected  ( TransDomain.RemoteTransAddr = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "4": ### quiescing
                    @Summary = "DLSw Transport Connection, Quiescing: Will Disconnect when Last Circuit Disconnects  ( TransDomain.RemoteTransAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### disconnecting
                    @Summary = "DLSw Transport Connection, Disconnecting  ( TransDomain.RemoteTransAddr = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### disconnected
                    @Summary = "DLSw Transport Connection, Disconnected  ( TransDomain.RemoteTransAddr = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        case "2": ### cdeTrapCircuitUpDown

            ##########
            # This trap is sent each time a circuit changes state to
            # `connected' or `disconnected'. the emission of this trap is
            # controlled by cdeTrapCntlCircuit.
            #
            # $1 = dlswCircuitState - The current state of this circuit. The
            #        agent, implementation specific, may choose to keep entries
            #        for some period of time after circuit disconnect, so the
            #        manager can gather the time and cause of disconnection.
            #        While all of the specified values may be returned from a
            #        GET operation, the only SETable value is
            #        `disconnectPending'. When this value is set, DLSw should
            #        perform the appropriate action given its previous state
            #        (e.g., send HALT_DL if the state was `connected') to bring
            #        the circuit down to the `disconnected' state. Both the
            #        partner DLSw and local end station(s) should be notified
            #        as appropriate. This MIB provides no facility to
            #        re-establish a disconnected circuit, because in DLSw this
            #        should be an end station-driven function.
            ##########
            
            @AlertGroup = "Transport Circuit Status"
            @AlertKey = extract($OID1, "46\.1\.5\.2\.1\.17\.(.*)$") ### dlswCircuitS1Mac.dlswCircuitS1Sap.dlswCircuitS2Mac.dlswCircuitS2Sap
            switch ($1)
            {
                case "1": ### disconnected
                    @Summary = "DLSw Circuit Disconnected  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "2": ### circuitStart
                    @Summary = "DLSw Circuit Starting  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### resolvePending
                    @Summary = "DLSw Circuit Resolve Pending  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### circuitPending
                    @Summary = "DLSw Circuit Pending: Transport will Disconnect when Last Circuit on Connection Disconnects  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### circuitEstablished
                    @Summary = "DLSw Circuit Established  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "6": ### connectPending
                    @Summary = "DLSw Circuit Connection Pending  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### contactPending
                    @Summary = "DLSw Circuit Contact Pending  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### connected
                    @Summary = "DLSw Circuit Connected  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "9": ### disconnectPending
                    @Summary = "DLSw Circuit Disconnect Pending  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "10": ### haltPending
                    @Summary = "DLSw Circuit Halt Pending  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "11": ### haltPendingNoack
                    @Summary = "DLSw Circuit Pending, No Acknowledge  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "12": ### circuitRestart
                    @Summary = "DLSw Circuit Restart  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "13": ### restartPending
                    @Summary = "DLSw Circuit Restart Pending  ( S1Mac.S1Sap.S2Mac.S2Sap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.9.1.7": ### Cisco DLSw - Notifications from CISCO-DLSW-MIB

    @Agent = "Cisco-DLSw"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoDlswTrapTConnPartnerReject

            ##########
            # This trap is sent each time a transport connection is rejected
            # by a partner DLSw during Capabilities Exchanges.
            #
            # $1 = ciscoDlswTConnOperTDomain - The object identifier indicates
            #        the transport domain of this transport connection.
            # $2 = ciscoDlswTConnOperRemoteTAddr - The remote transport address
            #        of this transport connection.
            ##########
            
            @AlertGroup = "DLSw Transport Connection Partner"
            @AlertKey = $1 + "." + $2 ### ciscoDlswTConnOperTDomain.ciscoDlswTConnOperRemoteTAddr
            @Summary = "Transport Connection Rejected Partner DLSw during Capabilities Exchanges  ( TransDomain = " + $1 + ", RemoteTransAddr = " + $2 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        case "2": ### ciscoDlswTrapTConnProtViolation

            ##########
            # This trap is sent each time a protocol violation is detected for
            # a transport connection.
            #
            # $1 = ciscoDlswTConnOperTDomain - The object identifier indicates
            #        the transport domain of this transport connection.
            # $2 = ciscoDlswTConnOperRemoteTAddr - The remote transport address
            #        of this transport connection.
            ##########
            
            @AlertGroup = "DLSw Transport Connection Protocol"
            @AlertKey = $1 + "." + $2 ### ciscoDlswTConnOperTDomain.ciscoDlswTConnOperRemoteTAddr
            @Summary = "Protocol Violation Detected for DLSw Transport Connection  ( TransDomain = " + $1 + ", RemoteTransAddr = " + $2 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        case "3": ### ciscoDlswTrapTConnUp

            ##########
            # This trap is sent each time a transport connection enters
            # `connected' state.
            #
            # $1 = ciscoDlswTConnOperTDomain - The object identifier indicates
            #        the transport domain of this transport connection.
            # $2 = ciscoDlswTConnOperRemoteTAddr - The remote transport address
            #        of this transport connection.
            ##########
            
            @AlertGroup = "DLSw Transport Connection Status"
            @AlertKey = $1 + "." + $2 ### ciscoDlswTConnOperTDomain.ciscoDlswTConnOperRemoteTAddr
            @Summary = "DLSw Transport Connected  ( TransDomain = " + $1 + ", RemoteTransAddr = " + $2 + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        case "4": ### ciscoDlswTrapTConnDown

            ##########
            # This trap is sent each time a transport connection enters
            # `disconnected' state.
            #
            # $1 = ciscoDlswTConnOperTDomain - The object identifier indicates
            #        the transport domain of this transport connection.
            # $2 = ciscoDlswTConnOperRemoteTAddr - The remote transport address
            #        of this transport connection.
            ##########
            
            @AlertGroup = "DLSw Transport Connection Status"
            @AlertKey = $1 + "." + $2 ### ciscoDlswTConnOperTDomain.ciscoDlswTConnOperRemoteTAddr
            @Summary = "DLSw Transport Connection Disconnected  ( TransDomain = " + $1 + ", RemoteTransAddr = " + $2 + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        case "5": ### ciscoDlswTrapCircuitUp

            ##########
            # This trap is sent each time a circuit enters `connected' state.
            #
            # $1 = ciscoDlswCircuitS1Mac - The MAC Address of End Station 1
            #        (S1) used for this circuit.
            # $2 = ciscoDlswCircuitS1Sap - The SAP at End Station 1 (S1) used
            #        for this circuit.
            # $3 = ciscoDlswCircuitS2Mac - The MAC Address of End Station 2
            #        (S2) used for this circuit.
            # $4 = ciscoDlswCircuitS2Sap - The SAP at End Station 2 (S2) used
            #        for this circuit.
            ##########
            
            @AlertGroup = "DLSw Circuit Status"
            @AlertKey = $1 + "." + $2 + "." + $3 + "." + $4 ### ciscoDlswCircuitS1Mac.ciscoDlswCircuitS1Sap.ciscoDlswCircuitS2Mac.ciscoDlswCircuitS2Sap
            @Summary = "DLSw Circuit Connected  ( S1Mac = " + $1 + ", S1Sap = " + $2 + ", S2Mac = " + $3 + ", S2Sap = " + $4 + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        case "6": ### ciscoDlswTrapCircuitDown

            ##########
            # This trap is sent each time a circuit enters `disconnected' state.
            #
            # $1 = ciscoDlswCircuitS1Mac - The MAC Address of End Station 1
            #        (S1) used for this circuit.
            # $2 = ciscoDlswCircuitS1Sap - The SAP at End Station 1 (S1) used
            #        for this circuit.
            # $3 = ciscoDlswCircuitS2Mac - The MAC Address of End Station 2
            #        (S2) used for this circuit.
            # $4 = ciscoDlswCircuitS2Sap - The SAP at End Station 2 (S2) used
            #        for this circuit.
            ##########
            
            @AlertGroup = "DLSw Circuit Status"
            @AlertKey = $1 + "." + $2 + "." + $3 + "." + $4 ### ciscoDlswCircuitS1Mac.ciscoDlswCircuitS1Sap.ciscoDlswCircuitS2Mac.ciscoDlswCircuitS2Sap
            @Summary = "DLSw Circuit Disconnected  ( S1Mac = " + $1 + ", S1Sap = " + $2 + ", S2Mac = " + $3 + ", S2Sap = " + $4 + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.116.2": ### Cisco Data Over Cable Service Extension - Notification from CISCO-DOCS-EXT-MIB

    @Agent = "Cisco-Data Over Cable"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cdxCmtsCmOnOffNotification

            ##########
            # This notification indicates that the cable modem coming online
            # and going offline. A notification will be sent from CMTS for a
            # cable modem status changing to online or offline within the
            # interval specified in cdxCmtsCmOnOffTrapInterval. 
            #
            # $1 = docsIfCmtsCmStatusMacAddress - MAC address of this Cable
            #        Modem. If the Cable Modem has multiple MAC addresses, this
            #        is the MAC address associated with the Cable interface.
            # $2 = docsIfCmtsCmStatusIpAddress - IP address of this Cable
            #        Modem. If the Cable Modem has no IP address assigned, or
            #        the IP address is unknown, this object returns a value of
            #        0.0.0.0. If the Cable Modem has multiple IP addresses,
            #        this object returns the IP address associated with the
            #        Cable interface.
            # $3 = docsIfCmtsCmStatusDownChannelIfIndex - IfIndex of the
            #        downstream channel this CM is connected to. If the
            #        downstream channel is unknown, this object returns a value
            #        of zero.
            # $4 = docsIfCmtsCmStatusUpChannelIfIndex - IfIndex of the upstream
            #        channel this CM is connected to. If the upstream channel
            #        is unknown, this object returns a value of zero.
            # $5 = cdxCmCpeCmtsServiceId - The cable modem's primary Service ID
            #        if the type is cm. The primary Service ID for the CM which
            #        the CPE connects if the type is cpe. Use cdxCmCpeIfIndex
            #        and cdxCmCpeCmtsServiceId to identify an entry in
            #        docsIfCmtsServiceTable. 
            # $6 = cdxCmtsCmStatusValue - Current Cable Modem connectivity
            #        state. The object extends states in
            #        docsIfCmtsCmStatusValue in more #details. (see lookup table
            #        for #details) 
            ##########

            @AlertGroup = "Cable Modem Status"
            @AlertKey = $5
            switch ($6)
            {
                case "1": ### offline
                    @Summary = "Cable Modem Offline  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 4
                    @Type = 1
                case "2": ### others
                    @Summary = "Cable Modem State Change  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 2
                    @Type = 0
                case "3": ### initRangingRcvd
                    @AlertGroup = "Cable Modem Ranging Status"
                    @Summary = "Cable Modem - Ranging Received  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### initDhcpReqRcvd
                    @AlertGroup = "Cable Modem DHCP Status"
                    @Summary = "Cable Modem DHCP Request Received  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### onlineNetAccessDisabled
                    @Summary = "Cable Modem Online, Network Access Disabled  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 2
                    @Type = 1
                case "6": ### onlineKekAssigned
                    @Summary = "Cable Modem Online, KEK Assigned  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "7": ### onlineTekAssigned
                    @Summary = "Cable Modem Online, TEK Assigned  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "8": ### rejectBadMic
                    @Summary = "Cable Modem Rejected, Bad MIC  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "9": ### rejectBadCos
                    @Summary = "Cable Modem Rejected, Bad COS  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "10": ### kekRejected
                    @Summary = "Cable Modem KEK modem key assignment rejected  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "11": ### tekRejected
                    @Summary = "Cable Modem TEK modem key assignment rejected  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "12": ### online
                    @Summary = "Cable Modem Online  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "13": ### initTftpPacketRcvd - tftp packet received and option file tranfer started
                    @Summary = "Cable Modem TFTP File Transfer Started  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 2
                    @Type = 1
                case "14": ### initTodRequestRcvd - Time of the Day (TOD) request received
                    @Summary = "Cable Modem Time of Day Request  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 2
                    @Type = 1
                case "15": ### reset - modem is resetting
                    @Summary = "Cable Modem Resetting  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "16": ### rangingInProgress - initial ranging is in progress
                    @AlertGroup = "Cable Modem Ranging Status"
                    @Summary = "Cable Modem Ranging In Progress  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 2
                    @Type = 1
                case "17": ### rangingCompleted - initial ranging is completed 
                    @AlertGroup = "Cable Modem Ranging Status"
                    @Summary = "Cable Modem Ranging Completed  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "18": ### dhcpGotIpAddr - modem has got an IP address from the DHCP server
                    @AlertGroup = "Cable Modem DHCP Status"
                    @Summary = "Cable Modem Assigned IP Address via DHCP  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "19": ### rejStaleConfig - modem did attempt to register but registration was refused due to stale Config
                    @Summary = "Cable Modem Registration Refused, Stale Config  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "20": ### rejIpSpoof - modem did attempt to register but registration was refused due to IP Spoof
                    @Summary = "Cable Modem Registration Refused, IP Spoof  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "21": ### rejClassFail - modem did attempt to register but registration was refused due to Class failure
                    @Summary = "Cable Modem Registration Refused, Class Failure  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "22": ### rejRegNack - modem did attempt to register but no acknowledgement was recieved
                    @Summary = "Cable Modem Registration Failed, No Acknowledgement Recieved  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "23": ### bpiKekExpired - KEK modem key assignment expired
                    @Summary = "Cable Modem KEK modem key assignment Expired  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "24": ### bpiTekExpired - TEK modem key assignment expired     
                    @Summary = "Cable Modem TEK modem key assignment Expired  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                case "25": ### shutdown - modem is in shutdown state
                    @Summary = "Cable Modem Shutdown  ( ServiceId = " + $5 + ", MacAddress = " + $1 + ", IpAddr = " + $2 + ", DownChanifIndex = " + $3 + ", UpChanIfIndex = " + $4 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $6 + " " + @Agent + " " + @Manager

        case "2": ### cdxCmtsCmChOverNotification

            ##########
            # This notification is sent at the completion of a CMTS channel
            # override operation if cdxCmtsCmChOverTrapOnCompletion is true in
            # the original entry. Once a channel override operation has been
            # activated, it cannot be stopped. That is, it will run until
            # either the CMTS has generated downstream frequency and/or
            # upstream channel override fields in the RNG-RSP message sent to a
            # cable modem or cdxCmtsCmChOverTimeExpiration time expired. In
            # either case, the operation is completed. State in the
            # cdxCmtsCmChOverState object will tell in which condition the
            # operation is completed. 
            #
            # $1 = cdxCmtsCmChOverMacAddress - The mac address of the cable
            #        modem that the CMTS instructs to move to a new downstream
            #        and/or upstream channel. This column must be set to a
            #        valid Mac address currently in the CMTS in order for this
            #        entry's row status to be set to active successfully.
            # $2 = cdxCmtsCmChOverDownFrequency - The new downstream frequency
            #        which the cable modem is instructed to move to. The value
            #        0 is to ask the CMTS not to override the downstream
            #        frequency. 
            # $3 = cdxCmtsCmChOverUpChannelId - The new channel Id which the
            #        cable modem is instructed to move to. The value -1 is to
            #        ask the CMTS not to override the upstream channel Id. 
            # $4 = cdxCmtsCmChOverOpInitiatedTime - The value of sysUpTime at
            #        which the operation was initiated. Since it is possible to
            #        have more than one entry in this table for a cable modem,
            #        this object can help to distinguish the entries for the
            #        same cable modem. 
            # $5 = cdxCmtsCmChOverState - The status of the specified channel
            #        override operation. The enumerations are:
            #
            #        messageSent(1): the CMTS has sent a RNG-RSP message with
            #          channel override to the cable modem.
            #        commandNotActive(2): the command is not in active mode due
            #          to this entry's row status is not in active yet.
            #        noOpNeed(3): The downstream frequency and the upstream
            #          channel Id in this entry are the same as original ones
            #          when this entry's row status is set to active, so CMTS
            #          does not need to do any operation.
            #        modemNotFound(4): The modem is not found in the CMTS at
            #          the time when the command becomes active.
            #        waitToSendMessage(5): specified the operation is active
            #          and CMTS is waiting to send a RNG-RSP message with
            #          channel override to the cable modem.
            #        timeOut(6): specified the operation is timed out. That is,
            #          the CMTS cannot send a RNG-RSP message with channel
            #          override to the cable modem within the time specified in
            #          the object of cdxCmtsCmChOverTimeExpiration. The
            #          possible reason is that the cable modem does not repeat
            #          the initial ranging.
            #
            #        The possible state change diagram is as below:
            #          [commandNotActive ->] waitToSendMessage -> messageSent
            #           or timeOut
            #          [commandNotActive ->] noOpNeeded or modemNotFound
            #
            #        REFERENCE "Data-Over-Cable Service Interface Specifications
            #        (DOCSIS) Radio Frequency Interface Specification
            #        (SP-RFI-I04-980724), 6.3.2.5.3 Overriding Channels. 
            ##########

            @AlertGroup = "Channel Change Status"
            @AlertKey = $1
            @Summary = "Cable Modem ( " + $1 + " ) Channel Override"
            switch($5)
            {
                case "1": ### messageSent
                    @Summary = @Summary + ", Message Sent"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### commandNotActive
                    @Summary = @Summary + ", Command Not Active"
                    @Severity = 2
                    @Type = 1
                case "3": ### noOpNeed
                    @Summary = @Summary + ", No Operation Needed"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "4": ### modemNotFound
                    @Summary = @Summary + ", Modem Not Found"
                    @Severity = 3
                    @Type = 1
                case "5": ### waitToSendMessage
                    @Summary = @Summary + ", Wait To Send Message"
                    @Severity = 2
                    @Type = 1
                case "6": ### timeOut
                    @Summary = @Summary + ", Time Out"
                    @Severity = 3
                    @Type = 1
                default:
                    @Summary = @Summary + ", Unknown"
                    @Severity = 2
                    @Type = 1
            } 
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }


case ".1.3.6.1.4.1.9.9.86.2": ### Cisco Digital Signal Processing Management - Notifications from CISCO-DSP-MGMT-MIB

    @Agent = "Cisco-DSP Mgmt"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### cdspMIBCardStateNotification

            ##########
            # A cdspMIBCardStateNotification is sent when the cdspCardState
            # enters into or exits from fatal(4) state. 
            #
            # $1 = cdspCardState - The object indicates the current state of
            #        DSP card being monitored.
            #        (1)normal - DSP card in normal condition.
            #        (2)warning - DSP card has some problem and need attention.
            #        (3)critical - DSP card has a major alarm.
            #        (4)fatal - DSP card is not functional. DSP subsystem might
            #             reset DSP card to recover it from the fatal error
            #             condition. After the DSP card is reset successfully,
            #             the object cdspCardResourceUtilization and
            #             cdspCardLastHiWaterUtilization are reset to 0. If the
            #             fatal error is persistent in this object after card
            #             is reset, the card should be replaced.
            #        (5)offLine - DSP card is in off-line maintenance state. 
            ##########

            @AlertGroup = "DSP Card State"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### entPhysicalIndex
            switch ($1)
            {
                case "1": ### normal
                    @Summary = "DSP Card Normal  ( entPhysicalIndex = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### warning
                    @Summary = "DSP Card Problem, Needs Attention  ( entPhysicalIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### critical
                    @Summary = "DSP Card Major Alarm  ( entPhysicalIndex = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "4": ### fatal
                    @Summary = "DSP Card Not Functional  ( entPhysicalIndex = " + @AlertKey + " )"
                    @Severity = 5
                    @Type = 1
                case "5": ### offline
                    @Summary = "DSP Card Off-Line, Maintenance State  ( entPhysicalIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }
    
case ".1.3.6.1.4.1.9.9.24.1.4.4": ### Cisco DownStream Physical Unit (DSPU) support - Notifications from CISCO-DSPU-MIB

    @Agent = "Cisco-DSPU PU"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### newdspuPuStateChangeTrap

            ##########
            # Generated when the operational state of the PU changes between
            # active< The following information is returned:
            # dspuPuOperName -> PU name
            # dspuPuOperState -> Current operational state of the PU
            #
            # $1 = dspuPuOperName - Name of the PU.
            # $2 = dspuPuOperState - Operational state of PU is either active
            #        or inactive.
            ##########

            @AlertGroup = "DSPU PU Status"
            @AlertKey = $1
            switch ($2)
            {
                case "1": ### Active
                    @Summary = "DownStream Physical Unit " + $1 + ", Active"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Inactive
                    @Summary = "DownStream Physical Unit " + $1 + ", Inactive"
                    @Severity = 3
                    @Type = 1
                default:
            }        
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "2": ### newdspuPuActivationFailureTrap

            ##########
            # Generated whenever a PU activation failure is detected. The
            # following information is returned:
            # dspuPuOperName -> PU name
            # dspuPuOperState -> Current operational state of the PU
            # dspuPuStatsLastActivationFailureReason -> Reason for PU
            #   activation failure
            #
            # $1 = dspuPuOperName - Name of the PU.
            # $2 = dspuPuOperState - Operational state of PU is either active
            #        or inactive.
            # $3 = dspuPuStatsLastActivationFailureReason - Reason for last
            #        activation failure of this PU as follows:
            #          noError - No PU activation failure has been detected.
            #          otherError - Undefined error detected during PU.
            #            activation internalError - Internal resources error
            #            detected during PU activation.
            #          configurationError - PU configuration.
            #          error - PU could not be activated.
            #          puNegativeResponse - Negative ACTPU response received
            #            from remote PU.
            #          puAlreadyActive - PU is already active.
            ##########

            @AlertGroup = "DSPU PU Status"
            @AlertKey = $1
            switch ($2)
            {
                case "1": ### Active
                    @Summary = "DownStream Physical Unit " + $1 + ", Active: " + lookup($3, dspuPuStatsLastActivationFailureReasonExpanded)
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Inactive
                    @Summary = "DownStream Physical Unit " + $1 + ", Inactive: " + lookup($3, dspuPuStatsLastActivationFailureReasonExpanded)
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }
    
case ".1.3.6.1.4.1.9.9.24.1.5.3": ### Cisco DownStream Physical Unit (DSPU) support - Notifications from CISCO-DSPU-MIB

    @Agent = "Cisco-DSPU LU"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### newdspuLuStateChangeTrap

            ##########
            # Generated when the operational state of the LU changes between
            # active< The following information is returned:
            # dspuPuOperName -> PU name
            # dspuLuOperState -> Current operational state of the LU
            #
            # $1 = dspuPuOperName - Name of the PU.
            # $2 = dspuLuOperState - Operational state of LU is either active
            #        or inactive.
            ##########

            @AlertGroup = "DSPU LU Status"
            @AlertKey = extract($OID2, "9\.24\.1\.5\.2\.1\.6\.(.*)$") ### dspuPuOperIndex.dspuLuOperLuLocalAddress
            switch ($2)
            {
                case "1": ### Active
                    @Summary = "DownStream Logical Unit Active  ( PuOperIndex.LuLocalAddres = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Inactive
                    @Summary = "DownStream Logical Unit Inactive  ( PuOperIndex.LuLocalAddres = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }        
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "2": ### dspuLuActivationFailureTrap

            ##########
            # Generated whenever an LU activation failure is detected. The
            # following information is returned:
            # dspuPuOperName -> PU
            # name dspuLuOperState -> Current operational state of the LU
            # dspuLuOperLastActivationFailureReason -> Reason for LU activation
            #   failure
            #
            # $1 = dspuPuOperName - Name of the PU.
            # $2 = dspuLuOperState - Operational state of LU is either active
            #        or inactive.
            # $3 = dspuLuOperLastActivationFailureReason - Reason for last
            #        activation failure of this PU as follows:
            #          noError - No LU activation failure has been detected.
            #          otherError - Undefined error detected during LU
            #            activation.
            #          luNegativeResponse - Negative ACTLU response received
            #            from remote LU.
            ##########

            @AlertGroup = "DSPU LU Status"
            @AlertKey = $1
            switch ($2)
            {
                case "1": ### Active
                    @Summary = "DownStream Logical Unit Active, " + lookup($3, dspuLuOperLastActivationFailureReason) + "  ( PuOperIndex.LuLocalAddres = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Inactive
                    @Summary = "DownStream Logical Unit Inactive, " + lookup($3, dspuLuOperLastActivationFailureReason) + "  ( PuOperIndex.LuLocalAddres = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.13.3": ### Cisco Environmental Monitor - Notification from CISCO-ENVMON-MIB

    @Agent = "Cisco-Environmental Monitor"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoEnvMonShutdownNotification

            ##########
            # A ciscoEnvMonShutdownNotification is sent if the environmental
            # monitor detects a testpoint reaching a critical state and is
            # about to initiate a shutdown. This notification contains no
            # objects so that it may be encoded and sent in the shortest amount
            # of time possible. Even so, management applications should not
            # rely on receiving such a notification as it may not be sent
            # before the shutdown completes.
            ##########

            @AlertGroup = "EnvMon Shutdown"
            @AlertKey = ""
            @Summary = "Environmental Monitor: Critical State, Shutdown Initiated"
            @Severity = 5
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
        case "2": ### ciscoEnvMonVoltageNotification
        
            ##########
            # A ciscoEnvMonVoltageNotification is sent if the voltage measured
            # at a given testpoint is outside the normal range for the
            # testpoint (i.e. is at the warning, critical, or shutdown stage).
            # Since such a notification is usually generated before the
            # shutdown state is reached, it can convey more data and has a
            # better chance of being sent than does the
            # ciscoEnvMonShutdownNotification.
            #
            # $1 = ciscoEnvMonVoltageStatusDescr - Textual description of the
            #        testpoint being instrumented. This description is a short
            #        textual label, suitable as a human-sensible identification
            #        for the rest of the information in the entry.
            # $2 = ciscoEnvMonVoltageStatusValue - The current measurement of
            #        the testpoint being instrumented.
            # $3 = ciscoEnvMonVoltageState - The current state of the testpoint
            #        being instrumented.
            ##########
            
            @AlertGroup = "EnvMon Voltage"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ciscoEnvMonVoltageStatusIndex
            switch ($3)
            {
                case "1": ### normal
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### warning
                    @Severity = 2
                    @Type = 1
                case "3": ### critical
                    @Severity = 4
                    @Type = 1
                case "4": ### shutdown
                    @Severity = 5
                    @Type = 1
                case "5": ### notPresent
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Summary = "Voltage ( " + $2 + " millivolts ) " + lookup($3, ciscoEnvMonState) + ": " + $1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "3": ### ciscoEnvMonTemperatureNotification
        
            ##########
            # A ciscoEnvMonTemperatureNotification is sent if the temperature
            # measured at a given testpoint is outside the normal range for the
            # testpoint (i.e. is at the warning, critical, or shutdown stage).
            # Since such a Notification is usually generated before the
            # shutdown state is reached, it can convey more data and has a
            # better chance of being sent than does the
            # ciscoEnvMonShutdownNotification.
            #
            # $1 = ciscoEnvMonTemperatureStatusDescr - Textual description of
            #        the testpoint being instrumented. This description is a
            #        short textual label, suitable as a human-sensible
            #        identification for the rest of the information in the
            #        entry.
            # $2 = ciscoEnvMonTemperatureStatusValue - The current measurement
            #        of the testpoint being instrumented.
            # $3 = ciscoEnvMonTemperatureState - The current state of the
            #        testpoint being instrumented.
            ##########
            
            @AlertGroup = "EnvMon Temperature"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ciscoEnvMonTemperatureStatusIndex
            switch ($3)
            {
                case "1":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2":
                    @Severity = 2
                    @Type = 1
                case "3":
                    @Severity = 4
                    @Type = 1
                case "4":
                    @Severity = 5
                    @Type = 1
                case "5":
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Summary = "Temperature ( " + $2 + "C ) " + lookup($3, ciscoEnvMonState) + ": " + $1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "4": ### ciscoEnvMonFanNotification
        
            ##########
            # A ciscoEnvMonFanNotification is sent if any one of the fans in
            # the fan array (where extant) fails. Since such a notification is
            # usually generated before the shutdown state is reached, it can
            # convey more data and has a better chance of being sent than does
            # the ciscoEnvMonShutdownNotification.
            #
            # $1 = ciscoEnvMonFanStatusDescr - Textual description of the fan
            #        being instrumented. This description is a short textual
            #        label, suitable as a human-sensible identification for the
            #        rest of the information in the entry.
            # $2 = ciscoEnvMonFanState - The current state of the fan being
            #        instrumented.
            ##########
            
            @AlertGroup = "EnvMon Fan"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ciscoEnvMonFanStatusIndex
            switch ($2)
            {
                case "1":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2":
                    @Severity = 2
                    @Type = 1
                case "3":
                    @Severity = 4
                    @Type = 1
                case "4":
                    @Severity = 5
                    @Type = 1
                case "5":
                    @Severity = 5
                    @Type = 1
                default:
            }
            @Summary = "Fan " + lookup($2, ciscoEnvMonState) + ": " + $1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "5": ### ciscoEnvMonRedundantSupplyNotification
        
            ##########
            # A ciscoEnvMonRedundantSupplyNotification is sent if the redundant
            # power supply (where extant) fails. Since such a notification is
            # usually generated before the shutdown state is reached, it can
            # convey more data and has a better chance of being sent than does
            # the ciscoEnvMonShutdownNotification.
            #
            # $1 = ciscoEnvMonSupplyStatusDescr - Textual description of the
            #        power supply being instrumented. This description is a
            #        short textual label, suitable as a human-sensible
            #        identification for the rest of the information in the
            #        entry.
            # $2 = ciscoEnvMonSupplyState - The current state of the power
            #        supply being instrumented.
            ##########
            
            @AlertGroup = "EnvMon Redundant Supply"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ciscoEnvMonSupplyStatusIndex
            switch ($2)
            {
                case "1":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2":
                    @Severity = 2
                    @Type = 1
                case "3":
                    @Severity = 4
                    @Type = 1
                case "4":
                    @Severity = 5
                    @Type = 1
                case "5":
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Summary = "Redundant Power Supply " + lookup($2, ciscoEnvMonState) + ": " + $1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.2.11.1": ### Cisco FastHub 116T+/116C, 216T, 316T/316C - Traps from CISCO-FASTHUB-MIB

    @Agent = "Cisco-FastHub"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "0": ### logonIntruder
        
            ##########
            # A user is repeatedly trying to log on to the Management Console using
            # an invalid password. The number of attempts exceeds the preset limit
            # given in mrNetMgmtConsolePasswordThreshold. Depending on how the object
            # mrNetMgmtConsoleSilentTime is configured, FastHub may shut down the
            # Management Console following the generation of this trap.
            #
            # $1 = sysName
            ##########
            
            @AlertGroup = "Logon Intruder"
            @AlertKey = $1 ### sysName
            @Summary = "Logon Intruder: User Repeatedly Trying to Logon to Management Console using Invalid Password"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "1": ### hubStackDiagnostic
        
            ##########
            # FastHub issues this trap when its Power On Self Test (POST) code does
            # not pass all tests. Some failures are catastrophic and may prevent the
            # generation of this trap.
            #
            # $1 = sysName
            ##########
            
            @AlertGroup = "Hub Stack Diagnostic"
            @AlertKey = $1 ### sysName
            @Summary = "Power-On Self-Test (POST) Did Not Pass All Tests"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### rpsFailed
        
            ##########
            # A redundant power source is connected to FastHub but a failure exists
            # in the power system.
            #
            # $1 = sysName
            ##########
            
            @AlertGroup = "Redund Power Source Status"
            @AlertKey = $1 ### sysName
            @Summary = "Redundant Power Source Connected but Failed"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### ipAddressChange
        
            ##########
            # The ipAddressChange trap is issued when the FastHub Supervisor is
            # unable to complete its DHCPDISCOVER/DHCPREQUEST process, or when it
            # fails to extend the lease for the current address, or when it accepts
            # an address change from the user.
            #
            # $1 = sysName
            ##########
            
            @AlertGroup = "IP Address Change"
            @AlertKey = $1 ### sysName
            ### One of the following @Summary definitions should be uncommented depending on whether static or dynamic(DHCP) addressing is used.
            ### @Summary = "FastHub Supervisor is unable to complete its DHCPDISCOVER/DHCPREQUEST process"
            @Summary = "FastHub Supervisor IP Address Changed"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.10.1.3": ### Cisco Flash - Notifications from CISCO-FLASH-MIB

    @Agent = "Cisco-Flash"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoFlashCopyCompletionTrap

            ##########
            # A ciscoFlashCopyCompletionTrap is sent at the completion of a
            # flash copy operation if such a trap was requested when the
            # operation was initiated. 
            #
            # $1 = ciscoFlashCopyStatus - The status of the specified copy
            #        operation.
            #        copyInProgress: specified operation is active
            #        copyOperationSuccess: specified operation is supported and
            #          completed successfully
            #        copyInvalidOperation: command invalid or
            #          command-protocol-device combination unsupported
            #        copyInvalidProtocol: invalid protocol specified
            #        copyInvalidSourceName: invalid source file name specified
            #          For the copy from flash to lex operation, this error
            #          code will be returned when the source file is not a
            #          valid lex image.
            #        copyInvalidDestName: invalid target name (file or
            #          partition or device name) specified For the copy from
            #          flash to lex operation, this error code will be returned
            #          when no lex devices are connected to the router or when
            #          an invalid lex interface number has been specified in
            #          the destination string.
            #        copyInvalidServerAddress: invalid server address specified
            #        copyDeviceBusy: specified device is in use and locked by
            #          another process
            #        copyDeviceOpenError: invalid device name
            #        copyDeviceError: device read, write or erase error
            #        copyDeviceNotProgrammable: device is read-only but a write
            #          or erase operation was specified
            #        copyDeviceFull: device is filled to capacity
            #        copyFileOpenError: invalid file name; file not found in
            #          partition
            #        copyFileTransferError: file transfer was unsuccessfull;
            #          network failure
            #        copyFileChecksumError: file checksum in Flash failed
            #        copyNoMemory: system running low on memory
            #        copyUnknownFailure: failure unknown 
            ##########
            
            $ciscoFlashCopyStatus = lookup($1, ciscoFlashCopyStatus) + " ( " + $1 + " )"
            #details($ciscoFlashCopyStatus)

            @AlertGroup = "Flash Copy Status"
            @AlertKey = "ciscoFlashCopyEntry." + extract($OID1, "\.([0-9]+)$")
            switch ($1)
            {
                case "1": ### copyInProgress
                    @Summary = "Flash Copy Active"
                    @Severity = 2
                    @Type = 1
                case "2": ### copyOperationSuccess
                    @Summary = "Flash Copy Completed Successfully"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### copyInvalidOperation
                    @Summary = "Flash Copy Failure, Invalid Command"
                    @Severity = 3
                    @Type = 1
                case "4": ### copyInvalidProtocol
                    @Summary = "Flash Copy Failure, Invalid Protocol"
                    @Severity = 3
                    @Type = 1
                case "5": ### copyInvalidSourceName
                    @Summary = "Flash Copy Failure, Invalid Source Filename"
                    @Severity = 3
                    @Type = 1
                case "6": ### copyInvalidDestName
                    @Summary = "Flash Copy Failure, Invalid Target Name"
                    @Severity = 3
                    @Type = 1
                case "7": ### copyInvalidServerAddress
                    @Summary = "Flash Copy Failure, Invalid Server Address"
                    @Severity = 3
                    @Type = 1
                case "8": ### copyDeviceBusy
                    @Summary = "Flash Copy Failure, Device In Use and Locked"
                    @Severity = 3
                    @Type = 1
                case "9": ### copyDeviceOpenError
                    @Summary = "Flash Copy Failure, Invalid Device Name"
                    @Severity = 3
                    @Type = 1
                case "10": ### copyDeviceError
                    @Summary = "Flash Copy Failure, Device Read/Write/Erase Error"
                    @Severity = 3
                    @Type = 1
                case "11": ### copyDeviceNotProgrammable
                    @Summary = "Flash Copy Failure, Read-Only Device"
                    @Severity = 3
                    @Type = 1
                case "12": ### copyDeviceFull
                    @Summary = "Flash Copy Failure, Device Full"
                    @Severity = 3
                    @Type = 1
                case "13": ### copyFileOpenError
                    @Summary = "Flash Copy Failure, Invalid Filename"
                    @Severity = 3
                    @Type = 1
                case "14": ### copyFileTransferError
                    @Summary = "Flash Copy Failure, File Transfer Unsuccessful, Network Failure"
                    @Severity = 3
                    @Type = 1
                case "15": ### copyFileChecksumError
                    @Summary = "Flash Copy Failure, File Checksum Failed"
                    @Severity = 3
                    @Type = 1
                case "16": ### copyNoMemory
                    @Summary = "Flash Copy Failure, System Low on Memory"
                    @Severity = 3
                    @Type = 1
                case "17": ### copyUnknownFailure
                    @Summary = "Flash Copy Failure, Unknown"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1      

        case "2": ### ciscoFlashPartitioningCompletionTrap

            ##########
            # A ciscoFlashPartitioningCompletionTrap is sent at the completion
            # of a partitioning operation if such a trap was requested when the
            # operation was initiated. 
            #
            # $1 = ciscoFlashPartitioningStatus - The status of the specified
            #        partitioning operation.
            #          partitioningInProgress: specified operation is active
            #          partitioningOperationSuccess: specified operation is
            #            supported and completed successfully
            #          partitioningInvalidOperation: command invalid or
            #            command-protocol-device combination unsupported
            #          partitioningInvalidDestName: invalid target name (file
            #            or partition or device name) specified
            #          partitioningInvalidPartitionCount: invalid partition
            #            count specified for the partitioning command
            #          partitioningInvalidPartitionSizes: invalid partition
            #            size, or invalid count of partition sizes
            #          partitioningDeviceBusy: specified device is in use and
            #            locked by another process
            #          partitioningDeviceOpenError: invalid device name
            #          partitioningDeviceError: device read, write or erase
            #            error
            #          partitioningNoMemory: system running low on memory
            #          partitioningUnknownFailure: failure unknown
            ##########
            
            $ciscoFlashPartitioningStatus = lookup($1, ciscoFlashPartitioningStatus) + " ( " + $1 + " )"
            #details($ciscoFlashPartitioningStatus)

            @AlertGroup = "Flash Partitioning Status"
            @AlertKey = "ciscoFlashPartitioningEntry." + extract($OID1, "\.([0-9]+)$")
            switch ($1)
            {
                case "1": ### partitioningInProgress
                    @Summary = "Flash Partitioning Active"
                    @Severity = 2
                    @Type = 1
                case "2": ### partitioningOperationSuccess
                    @Summary = "Flash Partitioning Completed Successfully"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### partitioningInvalidOperation
                    @Summary = "Flash Partitioning Failed, Invalid Command"
                    @Severity = 3
                    @Type = 1
                case "4": ### partitioningInvalidDestName
                    @Summary = "Flash Partitioning Failed, Invalid Target Name"
                    @Severity = 3
                    @Type = 1
                case "5": ### partitioningInvalidPartitionCount
                    @Summary = "Flash Partitioning Failed, Invalid Partition Count"
                    @Severity = 3
                    @Type = 1
                case "6": ### partitioningInvalidPartitionSizes
                    @Summary = "Flash Partitioning Failed, Invalid Partition Size"
                    @Severity = 3
                    @Type = 1
                case "7": ### partitioningDeviceBusy
                    @Summary = "Flash Partitioning Failed, Device In Use and Locked"
                    @Severity = 3
                    @Type = 1
                case "8": ### partitioningDeviceOpenError
                    @Summary = "Flash Partitioning Failed, Invalid Device Name"
                    @Severity = 3
                    @Type = 1
                case "9": ### partitioningDeviceError
                    @Summary = "Flash Partitioning Failed, Device Read/Write/Erase Error"
                    @Severity = 3
                    @Type = 1
                case "10": ### partitioningNoMemory
                    @Summary = "Flash Partitioning Failed, System Low on Memory"
                    @Severity = 3
                    @Type = 1
                case "11": ### partitioningUnknownFailure
                    @Summary = "Flash Partitioning Failed, Unknown"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1
        
        case "3": ### ciscoFlashMiscOpCompletionTrap

            ##########
            # A ciscoFlashMiscOpCompletionTrap is sent at the completion of a
            # miscellaneous flash operation
            # (enumerated in ciscoFlashMiscOpCommand) if such a trap was
            # requested when the operation was initiated. 
            #
            # $1 = ciscoFlashMiscOpStatus - The status of the specified
            #        operation.
            #          miscOpInProgress: specified operation is active
            #          miscOpOperationSuccess: specified operation is supported
            #            and completed successfully
            #          miscOpInvalidOperation: command invalid or
            #            command-protocol-device combination unsupported
            #          miscOpInvalidDestName: invalid target name (file or
            #            partition or device name) specified
            #          miscOpDeviceBusy: specified device is in use and locked
            #            by another process
            #          miscOpDeviceOpenError: invalid device name
            #          miscOpDeviceError: device read, write or erase error
            #          miscOpDeviceNotProgrammable: device is read-only but a
            #            write or erase operation was specified
            #          miscOpFileOpenError: invalid file name; file not found
            #            in partition
            #          miscOpFileDeleteFailure: file could not be deleted;
            #            delete count exceeded
            #          miscOpFileUndeleteFailure: file could not be undeleted;
            #            undelete count exceeded
            #          miscOpFileChecksumError: file has a bad checksum
            #          miscOpNoMemory: system running low on memory
            #          miscOpUnknownFailure: failure unknown
            #          miscOpSqueezeFailure: the squeeze operation failed
            #          miscOpNoSuchFile: a valid but nonexistent file name was
            #            specified
            #          miscOpFormatFailure: the format operation failed 
            ##########
            
            $ciscoFlashMiscOpStatus = lookup($1, ciscoFlashMiscOpStatus) + " ( " + $1 + " )"
            #details($ciscoFlashMiscOpStatus)

            @AlertGroup = "Flash Misc. Operation Status"
            @AlertKey = "ciscoFlashMiscOpEntry." + extract($OID1, "\.([0-9]+)$")
            switch ($1)
            {
                case "1": ### miscOpInProgress
                    @Summary = "Misc. Flash Operation Active"
                    @Severity = 2
                    @Type = 1
                case "2": ### miscOpOperationSuccess
                    @Summary = "Misc. Flash Operation Completed Successfully"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### miscOpInvalidOperation
                    @Summary = "Misc. Flash Operation Failed, Invalid Command"
                    @Severity = 3
                    @Type = 1
                case "4": ### miscOpInvalidDestName
                    @Summary = "Misc. Flash Operation Failed, Invalid Target Name"
                    @Severity = 3
                    @Type = 1
                case "5": ### miscOpDeviceBusy
                    @Summary = "Misc. Flash Operation Failed, Device In Use and Locked"
                    @Severity = 3
                    @Type = 1
                case "6": ### miscOpDeviceOpenError
                    @Summary = "Misc. Flash Operation Failed, Invalid Device Name"
                    @Severity = 3
                    @Type = 1
                case "7": ### miscOpDeviceError
                    @Summary = "Misc. Flash Operation Failed, Device Read/Write/Erase Error"
                    @Severity = 3
                    @Type = 1
                case "8": ### miscOpDeviceNotProgrammable
                    @Summary = "Misc. Flash Operation Failed, Read-Only Device"
                    @Severity = 3
                    @Type = 1
                case "9": ### miscOpFileOpenError
                    @Summary = "Misc. Flash Operation Failed, Invalid Filename"
                    @Severity = 3
                    @Type = 1
                case "10": ### miscOpFileDeleteFailure
                    @Summary = "Misc. Flash Operation Failed, Delete Failed, Delete Count exceeded"
                    @Severity = 3
                    @Type = 1
                case "11": ### miscOpFileUndeleteFailure
                    @Summary = "Misc. Flash Operation Failed, Undeleted Failed, Undelete Count Exceeded"
                    @Severity = 3
                    @Type = 1
                case "12": ### miscOpFileChecksumError
                    @Summary = "Misc. Flash Operation Failed, File Checksum Bad"
                    @Severity = 3
                    @Type = 1
                case "13": ### miscOpNoMemory
                    @Summary = "Misc. Flash Operation Failed, System Low on Memory"
                    @Severity = 3
                    @Type = 1
                case "14": ### miscOpUnknownFailure
                    @Summary = "Misc. Flash Operation Failed, Unknown"
                    @Severity = 3
                    @Type = 1
                case "18": ### miscOpSqueezeFailure
                    @Summary = "Misc. Flash Operation Failed, Squeeze Failed"
                    @Severity = 3
                    @Type = 1
                case "19": ### miscOpNoSuchFile
                    @Summary = "Misc. Flash Operation Failed, File Does Not Exist"
                    @Severity = 3
                    @Type = 1
                case "20": ### miscOpFormatFailure
                    @Summary = "Misc. Flash Operation Failed, Format Failed"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1
        
        case "4": ### ciscoFlashDeviceChangeTrap

            ##########
            # A ciscoFlashDeviceChangeTrap is sent whenever a removable Flash
            # device is inserted or removed. 
            #
            # $1 = ciscoFlashDeviceIndex - Flash device sequence number to
            #        index within the table of initialized flash devices. The
            #        lowest value should be 1. The highest should be less than
            #        or equal to the value of the ciscoFlashDevicesSupported
            #        object. 
            ##########
            
            $ciscoFlashDeviceIndex = $1
            #details($ciscoFlashDeviceIndex)

            @AlertGroup = "Flash Device Change"
            @AlertKey = "ciscoFlashDeviceEntry." + $1
            @Summary = "Removable Flash Device Inserted/Removed  ( " + @AlertKey + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9": ### Cisco General Traps - Traps from CISCOTRAP-MIB

    @Agent = "Cisco-General"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "0": ### reload
            
            ##########
            # A reload trap signifies that the sending protocol entity is
            # reinitializing itself such that the agent's configuration or the
            # protocol entity implementation may be altered.
            #
            # $1 = sysUpTime
            # $2 = whyReload - This variable contains a printable octet string
            #        which contains the reason why the system was last
            #        restarted.
            ##########
            
            @AlertGroup = "Reload"
            @AlertKey = ""
            @Summary = "System Reinitialized, " + $2
            @Severity = 2
            @Type = 1800
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            update(@Summary)

        case "1": ### tcpConnectionClose
        
            ##########
            # A tty trap signifies that a TCP connection, previously
            # established with the sending protocol entity for the purposes of
            # a tty session, has been terminated.
            # 
            # $1 = tslineSesType - Type of session. (see Lookup table)
            # $2 = tcpConnState - The state of this TCP connection.
            # $3 = loctcpConnElapsed - How long this TCP connection has been
            #        established.
            # $4 = loctcpConnInBytes - Bytes input for this TCP connection.
            # $5 = loctcpConnOutBytes - Bytes output for this TCP connection.
            # $6 = tsLineUser - TACACS user name, if TACACS enabled, of user on
            #        this line.
            ##########
        
            $tslineSesType = lookup($1, tslineSesType)
            $tcpConnState = lookup($2, tcpConnState)
            $loctcpConnElapsed = $3
            $loctcpConnInBytes = $4
            $loctcpConnOutBytes = $5
            if (!exists($6)||match($6, ""))
            {
                $tsLineUser = "Unknown (TACACS not enabled)"
            }
            else
            {
                $tsLineUser = $6
            }
            $tcpConnLocalAddress = extract($OID2, "1\.3\.6\.1\.2\.1\.6\.13\.1\.1\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$")
            $tcpConnLocalPort = extract($OID2, "1\.3\.6\.1\.2\.1\.6\.13\.1\.1\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.([0-9]+)\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$")
            $tcpConnRemAddress = extract($OID2, "1\.3\.6\.1\.2\.1\.6\.13\.1\.1\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\.[0-9]+$")
            $tcpConnRemPort = extract($OID2, "1\.3\.6\.1\.2\.1\.6\.13\.1\.1\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.([0-9]+)$")
            
            @AlertGroup = "TCP Connection"
            @AlertKey = "tcpConnEntry." + $tcpConnLocalAddress + "." + $tcpConnLocalPort + "." + $tcpConnRemAddress + ".(Remote Port Ignored)"
            @Summary = $tslineSesType + " Connection Terminated  ( from " + $tcpConnRemAddress + ", User: " + $tsLineUser + " )"
            @Severity = 2
            @Type = 1800
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $6
            
            $tslineSesType = $tslineSesType + " ( " + $1 + " )"
            $tcpConnState = $tcpConnState + " ( " + $2 + " )"
            #details($tslineSesType,$tcpConnState,$loctcpConnElapsed,$loctcpConnInBytes,$loctcpConnOutBytes,$tsLineUser,$tcpConnLocalAddress,$tcpConnLocalPort,$tcpConnRemAddress,$tcpConnRemPort)
            
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.106.2": ### Cisco IOS proprietary Hot Standby Router Protocol (HSRP) - Notifications from CISCO-HSRP-MIB

    @Agent = "Cisco-HSRP"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### cHsrpStateChange

            ##########
            # A cHsrpStateChange notification is sent when a
            # cHsrpGrpStandbyState transitions to either active or standby
            # state, or leaves active or standby state. There will be only
            # one notification issued when the state change is from standby
            # to active and vice versa.
            #
            # $1 = cHsrpGrpStandbyState - The current HSRP state of this group
            #        on this interface.
            ##########
            
            @AlertGroup = "HSRP State Change"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### ifIndex.cHsrpGrpNumber
            switch($1)
            {
                case "1": ### initial
                    @Summary = "HSRP Group Initializing  ( ifIndex.cHsrpGrpNumber = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "2": ### learn
                    @Summary = "HSRP Group Learning  ( ifIndex.cHsrpGrpNumber = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### listen
                    @Summary = "HSRP Group Listening  ( ifIndex.cHsrpGrpNumber = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### speak
                    @Summary = "HSRP Group Speaking  ( ifIndex.cHsrpGrpNumber = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### standby
                    @Summary = "HSRP Group in Standby  ( ifIndex.cHsrpGrpNumber = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "6": ### active
                    @Summary = "HSRP Group Active  ( ifIndex.cHsrpGrpNumber = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.44.3": ### Cisco Integrated CSU/DSU - Notifications from CISCO-ICSUDSU-MIB

    @Agent = "Cisco-Integrated CSU/DSU"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoICsuDsuT1LoopStatusNotification
        
            ##########
            # Indicates a change in T1 Loop Status.
            #
            # $1 = ciscoICsuDsuT1LoopStatus - Current Loop status of T1
            #        CSU/DSU. Represented as a sum of a bit map. The variable
            #        bit positions are:
            #          (1)lossofSignal (LOS) - unable to detect the DS1 signal.
            #          (2)lossofFrame (LOF) - unable to synchronize on the DS1
            #               signal.
            #          (4)detectedRemoteAlarmIndication (RAI) - indicates that
            #               the transmitting equipment has lost its incoming
            #               signal. RAI is commonly called yellow alarm.
            #          (8)detectedAlarmIndicationSignal (AIS) - indicates that
            #               there is a transmission interruption located either
            #               at the equipment originating the AIS signal or
            #               upstream of that equipment. Indicated by an
            #               unframed, all-'ones' signal.  Also known as blue
            #               alarm.
            #          (16)placedInLoopback - Line placed in loopback from
            #               remote.
            ##########
            
            @AlertGroup = "T1 Loop Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            @Summary = "Current Loop Status of T1 CSU/DSU: ciscoICsuDsuT1LoopStatus = " + $1 + "  ( ifIndex = " + @AlertGroup + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "2": ### ciscoICsuDsuSw56kLoopStatusNotification
            
            ##########
            # Indicates a change in Sw56k Loop Status.
            #
            # $1 = ciscoICsuDsuSw56kLoopStatus - Current loop status or alarm
            #        condition. Represented as a sum of a bit map. The variable
            #        bit positions are:
            #          (1)oosOofFromNetwork - The DSU is receiving
            #               Out-of-Service/Out-of-Frame code from network
            #               indicating network trouble. This can be a problem
            #               with a device at the remote DSU. The most common
            #               cause of the this error is either the remote DSU is
            #               powered off or the remote telco connection is open.
            #          (2)noReceiveSignal - The DSU has detected sealing
            #               current from the central office but the receive
            #               level is below -45db.
            #          (4)noSealingCurrent - the DSU does not detect sealing
            #               current on the loop interface. This is normal for a
            #               private network.
            #          (8)noFrameSync - At 64k data rate the local loop
            #               operates at 72k with a framing pattern added to
            #               maintain byte alignment with the network. This
            #               condition is reported if the DSU cannot find the
            #               framing pattern.
            #          (16)attemptingToRateAdap - Set in 'autorate' mode when
            #               the DSU is searching for the loop rate.
            #          (32)rtTestFromTelco - Set when the DSU in telco
            #               initiated RT test.
            #          (64)llTestFromTelco - Set when the DSU in telco
            #               initiated LL test or when the transmit and receive
            #               pairs are reversed.
            #          (128)rdlFromRemoteDSU - Set when remote digital loopback
            #               initiated from remote DSU.
            ##########
            
            @AlertGroup = "Sw56k Loop Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            @Summary= "Current Loop Status of Sw56k CSU/DSU: ciscoICsuDsuSw56kLoopStatus = " + $1 + "  ( ifIndex = " + @AlertGroup + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
            
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.29.2.1": ### Cisco Supplemental ATM Management Objects - Notifications from CISCO-IETF-ATM2-PVCTRAP-MIB

    @Agent = "Cisco-Supplemental ATM Mgmt"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### atmIntfPvcFailuresTrap
        
            ##########
            # A notification indicating that one or more PVCLs on this
            # interface has failed since the last cIntfPvcFailuresTrap was
            # sent. If this trap has not been sent for the last
            # cIntfPvcNotificationInterval, then it will be sent on the next
            # increment of cIntfPvcFailures.
            #
            # $1 = ifIndex
            # $2 = atmIntfPvcFailures - The number of times the operational
            #        status of a PVCL on this interface has gone down.
            # $3 = atmIntfCurrentlyFailingPVcls - The current number of VCLs on
            #        this interface for which there is an active row in the
            #        atmVclTable having an atmVclConnKind value of `pvc' and an
            #        atmVclOperStatus with a value other than `up'.
            ##########
 
            @AlertGroup = "ATM PVC Failure"
            @AlertKey = $1
            @Summary = "One or More PVCLs Failed  ( ifIndex = " + $1 + " ): atmIntfPvcFailures = " + $2 + ", atmIntfCurrentlyFailingPVcls = " + $3
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.52.2": ### Cisco IP encryption - Notifications from CISCO-IP-ENCRYPTION-MIB

    @Agent = "Cisco-IP encryption"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### cieTestCompletion
    
            ##########
            # A cieTestCompletion trap is sent at the completion of a crypto
            # session establishment if such a trap was requested when the
            # sequence was initiated.
            #
            # $1 = cieTestConnSessionStatus - Set to a value that indicates
            #        whether a crypto session was successfully established,
            #        failed or the connection establishment process is in
            #        progress.
            # $2 = cieTestConnProtectedAddr - The IP address of the protected
            #        (secure) node, for the test connection.
            # $3 = cieTestConnUnprotectedAddr - The IP address of the
            #        unprotected (insecure) node for the test connection.
            ##########
        
            @AlertGroup = "CIE Test Completion"
            @AlertKey = $2 + "." + $3
            switch ($1)
            {
                case "1": ### inProgress
                    @Summary = "Crypto Session Establishment In Progress  ( ProtectedAddr = " + $2 + ", UnprotectedAddr = " + $3 + " )"
                    @Severity = 2
                    @Type = 1
                case "2": ### fail
                    @Summary = "Crypto Session Failed  ( ProtectedAddr = " + $2 + ", UnprotectedAddr = " + $3 + " )"
                    @Severity = 4
                    @Type = 1
                case "3": ### success
                    @Summary = "Crypto Session Successful  ( ProtectedAddr = " + $2 + ", UnprotectedAddr = " + $3 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "4": ### badCryptoMapName
                    @Summary = "Crypto Session Failed, Bad Crypto Map Name  ( ProtectedAddr = " + $2 + ", UnprotectedAddr = " + $3 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.26.2": ### Cisco ISDN - Notifications from CISCO-ISDN-MIB

    @Agent = "Cisco-ISDN"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### demandNbrCallInformation (obsolete)
        
            ##########
            # This trap/inform is sent to the manager whenever a successful
            # call clears, or a failed call attempt is determined to have
            # ultimately failed. In the event that call retry is active, then
            # this is after all retry attempts have failed. However, only one
            # such trap is sent in between successful call attempts; subsequent
            # call attempts result in no trap.
            #
            # $1 = demandNbrLogIf - ifIndex value of virtual interface
            #        associated with the neighbor. This interface maintains a
            #        queue of messages holding for the neighbor awaiting call
            #        completion, and all statistics.
            # $2 = demandNbrName - ASCII name of the neighbor.
            # $3 = demandNbrAddress - Call Address  at which the neighbor
            #        should be called. Think of this as the set of characters
            #        following 'ATDT' or the 'phone number' included in a D
            #        channel call request.
            # $4 = demandNbrLastDuration - Duration of last call in seconds.
            # $5 = demandNbrClearReason - ASCII reason that the last call
            #        terminated.
            # $6 = demandNbrClearCode - encoded reason for the last call tear
            #        down.
            ##########

            @AlertGroup = "Call Information"
            @AlertKey = $1
            @Summary = "ISDN Call Attempt Failed: NbrName = " + $2 + ", NbrAddress = " + $3 + ", LastDuration = " + $4 + ", ClearReason = " + $5 + ", ClearCode = " + $6
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + $5 + " " + $6 + " " + @Agent + " " + @Manager

        case "2": ### demandNbrCallDetails

            ##########
            # This trap/inform is sent to the manager whenever a call connects,
            # or clears, or a failed call attempt is determined to have
            # ultimately failed. In the event that call retry is active, then
            # this is after all retry attempts have failed. However, only one
            # such trap is sent in between successful call attempts; subsequent
            # call attempts result in no trap.
            #
            # NOTE: Variable Binding #2 is not always included in the trap. In
            # these cases the other variable binding are "pushed up" one value.
            # this is accounted for in the rules below.
            #
            #
            # $1 = demandNbrLogIf - (.1.3.6.1.4.1.9.9.26.1.1.1.1.3)
            #        ifIndex value of virtual interface associated with the
            #        neighbor. This interface maintains a queue of messages
            #        holding for the neighbor awaiting call completion, and all
            #        statistics.
            # $2 = demandNbrName - (.1.3.6.1.4.1.9.9.26.1.1.1.1.4)
            #        ASCII name of the neighbor.
            # $3 = demandNbrAddress - (.1.3.6.1.4.1.9.9.26.1.1.1.1.5)
            #        Call Address  at which the neighbor should be called.
            #        Think of this as the set of characters following 'ATDT' or
            #        the 'phone number' included in a D channel call request.
            # $4 = demandNbrLastDuration - (.1.3.6.1.4.1.9.9.26.1.1.1.1.8)
            #        Duration of last call in seconds.
            # $5 = demandNbrClearReason - (.1.3.6.1.4.1.9.9.26.1.1.1.1.9)
            #        ASCII reason that the last call terminated. Possible
            #        values include the following:
            #          - Call is Active
            #          - Normal call clearing
            #          - Normal, unspecified
            #          - Destination out of order
            #          - No user responding
            #          - Call rejected
            #          - Invalid call reference value
            #          - Recovery on timer expiry
            #          - Requested circuit/channel not available
            #          - Temporary failure
            #          - Unknown Cause value
            # $6 = demandNbrClearCode - (.1.3.6.1.4.1.9.9.26.1.1.1.1.10)
            #        encoded reason for the last call tear down. Possible
            #        values include the following:
            #          - Connected
            #          - 0x10
            #          - 0x1F
            #          - 0x1B
            #          - 0x12
            #          - 0x15
            #          - 0x51
            #          - 0x66
            #          - 0x2C
            #          - 0x29
            # $7 = demandNbrCallOrigin - (.1.3.6.1.4.1.9.9.26.1.1.1.1.17)
            #        Indication of outgoing or incoming call.
            ##########
       
            @AlertGroup = "Call Details"
            @AlertKey = "demandNbrEntry." + extract($OID1, "\.([0-9]+\.[0-9]+)$") ### demandNbrPhysIf(ifIndex).demandNbrId
            if (regmatch($OID7, "1\.3\.6\.1\.4\.1\.9\.9\.26\.1\.1\.1\.1\.17\..*"))
            {
                switch($7)
                {
                    case "1": ### originate
                        @Summary = "ISDN Call to "
                    case "2": ### answer
                        @Summary = "ISDN Call from "
                    case "3": ### callback
                        @Summary = "ISDN Callback to "
                    default:
                }
                
                if (match($2, $3))
                {
                    @Summary = @Summary + $2 + ", " + $5 + " ( ClearCode = " + $6 + " )"
                }
                else
                {
                    @Summary = @Summary + $2 + " ( " + $3 + " ), " + $5 + " ( ClearCode = " + $6 + " )"
                }
                
                switch($5)
                {
                    case "Call is Active":
                        @Severity = 2
                        @Type = 1
                    case "Normal call clearing":
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "Normal, unspecified":
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "Destination out of order":
                        @Severity = 3
                        @Type = 1
                    case "No user responding":
                        @Severity = 3
                        @Type = 1
                    case "Call rejected":
                        @Severity = 3
                        @Type = 1
                    case "Invalid call reference value":
                        @Severity = 3
                        @Type = 1
                    case "Recovery on timer expiry":
                        @Severity = 3
                        @Type = 1
                    case "Requested circuit/channel not available":
                        @Severity = 3
                        @Type = 1
                    case "Temporary failure":
                        @Severity = 3
                        @Type = 1
                    case "Unknown Cause value":
                        @Severity = 3
                        @Type = 1
                    default:
                        @Severity = 3
                        @Type = 1
                }
                @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + $6 + " " + $7 + " " + @Agent + " " + @Manager
            }
            else if (regmatch($OID6, "1\.3\.6\.1\.4\.1\.9\.9\.26\.1\.1\.1\.1\.17\..*"))
            {
                switch($6)
                {
                    case "1": ### originate
                        @Summary = "ISDN Call to "
                    case "2": ### answer
                        @Summary = "ISDN Call from "
                    case "3": ### callback
                        @Summary = "ISDN Callback to "
                    default:
                }
                
                @Summary = @Summary + $2 + ", " + $4 + " ( ClearCode = " + $5 + " )"
                                
                switch($4)
                {
                    case "Call is Active":
                        @Severity = 2
                        @Type = 1
                    case "Normal call clearing":
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "Normal, unspecified":
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "Destination out of order":
                        @Severity = 3
                        @Type = 1
                    case "No user responding":
                        @Severity = 3
                        @Type = 1
                    case "Call rejected":
                        @Severity = 3
                        @Type = 1
                    case "Invalid call reference value":
                        @Severity = 3
                        @Type = 1
                    case "Recovery on timer expiry":
                        @Severity = 3
                        @Type = 1
                    case "Requested circuit/channel not available":
                        @Severity = 3
                        @Type = 1
                    case "Temporary failure":
                        @Severity = 3
                        @Type = 1
                    case "Unknown Cause value":
                        @Severity = 3
                        @Type = 1
                    default:
                        @Severity = 3
                        @Type = 1
                }
                @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + $6 + " " + $7 + " " + @Agent + " " + @Manager
            }
            else if (regmatch($OID3, "1\.3\.6\.1\.4\.1\.9\.9\.26\.1\.1\.1\.1\.17\..*"))
            {
                switch($3)
                {
                    case "1": ### originate
                        @Summary = "ISDN Call to " + $2
                    case "2": ### answer
                        @Summary = "ISDN Call from " + $2
                    case "3": ### callback
                        @Summary = "ISDN Callback to " + $2
                    default:
                }
                @Severity = 2
                @Type = 1
                @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager
            }
            else if (regmatch($OID2, "1\.3\.6\.1\.4\.1\.9\.9\.26\.1\.1\.1\.1\.17\..*"))
            {
                switch($2)
                {
                    case "1": ### originate
                        @Summary = "Outgoing ISDN Call"
                    case "2": ### answer
                        @Summary = "Incoming ISDN Call"
                    case "3": ### callback
                        @Summary = "ISDN Callback"
                    default:
                }
                @Severity = 2
                @Type = 1
                @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            }
            else
            {
                @Summary = "ISDN Call (see #details)"
                @Severity = 2
                @Type = 1
                @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
                #details($*)
            }
            #details($*)

        case "3": ### isdnLapdOperStatus

            ##########
            # $1 = ifIndex
            # $2 = isdnLapdOperStatus - The operational status of this interface
            ##########
       
            @AlertGroup = "ISDN LAPD Opereration Status"
            @AlertKey = $1
            switch ($2)
            {
                case "1":
                    @Summary = "ISDN LAPD: All layers are Inactive"
                    @Severity = 3
                    @Type = 1
                case "2":
                    @Summary = "ISDN LAPD: layer 1 is activated, layer 2 datalink not established"
                    @Severity = 2
                    @Type = 1
                case "3":
                    @Summary = "ISDN LAPD: layer 1 is activated, layer 2 datalink established"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.18.2": ### Cisco ISDN BRI Integrated U Interface - Notifications from CISCO-ISDNU-IF-MIB

    @Agent = "Cisco-ISDN BRI Int. U IF"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciuIfLoopStatusNotification

            ##########
            # A ciuIfLoopStatusNotification is sent when there is a change in
            # ciscoIsdnuIfLoopStatus object. The status change occurs when the
            # ISDN BRI integrated U interface enters into or exits from
            # Loopback or Maintenance modes. 
            #
            # $1 = ciuIfLoopStatus - Current ISDN BRI integrated U interface
            #        Loop status and NT maintenance mode. The definition of
            #        maintenance modes are as follows:
            #          none - The U interface is not in either Loopback or
            #            maintenance mode.
            #          type2Loopback - Type 2 (CO to U interface) Loopback
            #            mode; this mode is set to perform the loopback between
            #            CO and the ISDN BRI integrated U interface.
            #          type3Loopback - Type 3 (processor to U interface)
            #            Loopback mode; this mode is set by router to perform
            #            the loopback between the router processor and the ISDN
            #            BRI integrated U interface.
            #          ntQuietMode - NT quiet mode; this mode is set by CO for
            #            metallic loop tests. In the NT quiet mode, the ISDN U
            #            interface will not attempt a start-up or will not
            #            initiate transmission during metallic loop tests
            #            conducted by the network.
            #          ilmtMode - Insertion loss measurement test (ILMT); this
            #            mode is set by CO for the Insertion loss measurement
            #            test. The insertion loss measurement test will cause a
            #            known test signal to be generated by the NT. This test
            #            will be used in network measurements of DSL (Digital
            #            Subscriber Line) transmission characteristics.
            #        REFERENCE - ANSI T1.601-1992: Sections 6.5 NT maintence
            #          modes
            ##########

            @AlertGroup = "ciuIf Loop Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            switch ($1)
            {
                case "1": ### none
                    @Summary = "ISDN BRI Int. U Interface Normal  ( ifIndex = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### type2Loopback
                    @Summary = "ISDN BRI Int. U Interface in Type-2 (CO to U) Loopback  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### type3Loopback
                    @Summary = "ISDN BRI Int. U Interface in Type-3 (Processor to U) Loopback  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### ntQuietMode
                    @Summary = "ISDN BRI Int. U Interface in NT Quiet Mode  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### ilmtMode
                    @Summary = "ISDN BRI Int. U Interface in Insertion Loss Measurement Test Mode  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

##########
# Could not find MIBs for the following enterprise:
# enterprise 1.3.6.1.4.1.9.9.99.2
#     1 ciscoLocalDirectorVirtualStateChange
#     2 ciscoLocalDirectorRealStateChange
#     3 ciscoLocalDirectorFailoverEnableChange
#     4 ciscoLocalDirectorFailoverCableChange
#     5 ciscoLocalDirectorFailoverUnitStatus
##########

case ".1.3.6.1.4.1.9.9.120.2": ### CISCO Network Registrar - Notifications from CISCO-NETWORK-REGISTRAR-MIB

    @Agent = "Cisco-Network Registrar"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoNetRegFreeAddressLow
        
            ##########
            # This notification signifies that the number of available IP
            # addresses for a particular scope has fallen below the value of
            # cnrDHCPScopeFreeAddrLowThreshold for that scope.
            #
            # $1 = cnrDHCPScopeFreeAddrLowThreshold
            # $2 = cnrDHCPScopeFreeAddrValue - The number of IP addresses which
            #        are available within this scope. May be expressed as
            #        either an absolute value or a percentage; the units are
            #        given by the value of cnrDHCPScopeFreeAddrUnits.
            # $3 = cnrDHCPScopeFreeAddrUnits - The units associated with the
            #        value of cnrDHCPScopeFreeAddrValue.
            ##########

            @AlertGroup = "NetReg Free Address"
            @AlertKey = extract($OID1, "9\.120\.1\.1\.1\.1\.2\.(.*)$") ### cnrDHCPScopeName
            switch ($3)
            {
                case "1": ### value
                    @Summary = "Available IP Addresses ( " + $2 + " ) Below " + $1 + "  ( DHCPScopeName = " + @AlertKey + " )"
                case "2": ### percent
                    @Summary = "Available IP Addresses ( " + $2 + "% ) Below " + $1 + "%  ( DHCPScopeName = " + @AlertKey + " )"
                default:
            }
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ciscoNetRegFreeAddressHigh
        
            ##########
            # This notification signifies that the number of available IP
            # addresses for a particular scope has risen above the value of
            # cnrDHCPScopeFreeAddrHighThreshold for that scope.
            #
            # $1 = cnrDHCPScopeFreeAddrHighThreshold
            # $2 = cnrDHCPScopeFreeAddrValue - The number of IP addresses which
            #        are available within this scope. May be expressed as
            #        either an absolute value or a percentage; the units are
            #        given by the value of cnrDHCPScopeFreeAddrUnits.
            # $3 = cnrDHCPScopeFreeAddrUnits - The units associated with the
            #        value of cnrDHCPScopeFreeAddrValue.
            ##########

            @AlertGroup = "NetReg Free Address"
            @AlertKey = extract($OID1, "9\.120\.1\.1\.1\.1\.3\.(.*)$") ### cnrDHCPScopeName
            switch ($3)
            {
                case "1": ### value
                    @Summary = "Available IP Addresses ( " + $2 + " ) Above " + $1 + "  ( DHCPScopeName = " + @AlertKey + " )"
                case "2": ### percent
                    @Summary = "Available IP Addresses ( " + $2 + "% ) Above " + $1 + "%  ( DHCPScopeName = " + @AlertKey + " )"
                default:
            }
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### ciscoNetRegServerStart
        
            ##########
            # This notification signifies that the server of the specified type
            # has started on the host from which this notification has been
            # sent.
            #
            # $1 = cnrNotifServerType - The type of server (see Lookup table)
            ##########

            @AlertGroup = "NetReg Server Status"
            @AlertKey = $1
            @Summary = lookup($1, cnrNotifServerType) + " Server started"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### ciscoNetRegServerStop
        
            ##########
            # This notification signifies that the server of the specified type
            # has stopped normally on the host from which this notification has
            # been sent.
            #
            # $1 - cnrNotifServerType - The type of server (see Lookup table)
            ##########

            @AlertGroup = "NetReg Server Status"
            @AlertKey = $1
            @Summary = lookup($1, cnrNotifServerType) + " Server stopped"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### ciscoNetRegDNSQueueTooBig
        
            ##########
            # This notification indicates that the number of pending dns
            # updates has reached its limit. Successive updates may be dropped,
            # and DHCP may stop responding to client requests until this
            # problem has cleared.
            ##########

            @AlertGroup = "NetReg DNS Queue Status"
            @AlertKey = ""
            @Summary = "DNS Queue Too Big, Pending DNS Updates Reached Limit"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "6": ### ciscoNetRegOtherServerNotResponding
        
            ##########
            # This notification signifies that a server is not responding to
            # updates from the CNR server. The identity of the server is given
            # by the cnrNotifServer object.  The type of the server is given by
            # the cnrNotifServerType object.
            #
            # $1 = cnrNotifServer - The IP Address of a server with which CNR
            #        is attempting to communicate.
            # $2 = cnrNotifServerType - The type of server (see Lookup table)
            ##########

            @AlertGroup = "NetReg Other Server Status"
            @AlertKey = $1
            @Summary = lookup($2, cnrNotifServerType) + " Server at " + $1 + " Not Responding to Updates from CNR server"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "7": ### ciscoNetRegDuplicateAddress
        
            ##########
            # This notification signifies that a  duplicate IP address has been
            # detected.  The DHCP server can detect this condition through the
            # ping-before-offer mechanism. Alternatively, the client may have
            # sent a DHCPDECLINE back to the server; this is assumed to be the
            # result of the client detecting that the address was in use. In
            # either case, the DHCP server marks the IP address as unavailable
            # for leasing to clients. The cnrNotifDupIpAddressDetectedBy object
            # indicates whether the client or server detected this condition.
            #
            # $1 = cnrNotifDupIpAddress - The IP address which was found to be
            #        a duplicate.
            # $2 = cnrNotifMACAddress - The offending MAC address which caused
            #        a duplicate IP address to be detected.
            # $3 = cnrNotifDupIpAddressDetectedBy - Indicates whether the
            #        client or server detected the condition. ( see Lookup
            #        Table)
            ##########

            @AlertGroup = "NetReg Duplicate Address"
            @AlertKey = $2
            @Summary = "Duplicate IP Address ( " + $1 + " ) at MAC Address " + $2
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "8": ### ciscoNetRegAddressConflict
        
            ##########
            # This notification indicates that the DHCP server on this host,
            # and a DHCP server on another host, have claimed ownership for the
            # same IP address. The cnrNotifContestedIpAddress object indicates
            # which address is under contention.  The cnrNotifServer object
            # indicates with which other server a conflict was detected.
            #
            # $1 = cnrNotifContestedIpAddress - The IP address for which
            #        ownership is claimed by two or more DHCP servers.
            # $2 = cnrNotifServer - The IP Address of a server with which CNR
            #        is attempting to communicate. 
            ##########
            
            @AlertGroup = "NetReg Address Conflict"
            @AlertKey = $1
            @Summary = "Ownership of IP Address " + $1 + " Claimed by Two or More DHCP Servers  ( cnrNotifServer = " + $2 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "9": ### ciscoNetRegOtherServerResponding
        
            ##########
            # This notification signifies that a server which had formerly been
            # in a 'not responding' state is now responding to updates from the
            # CNR protocol server.  The identity of the server is given by the
            # cnrNotifServer object. The type of the server is given by the
            # cnrNotifServerType object.
            #
            # NOTE: One should not rely on recieving this notification as an
            # indication that all is well with the network. Several conditions,
            # including restart of the CNR protocol server, could result in
            # either multiple ciscoNetRegOtherServerNotResponding notifications
            # being sent, or in a ciscoNetRegOtherServerResponding notification
            # NOT being sent.
            #
            # $1 = cnrNotifServer - The IP Address of a server with which CNR
            #        is attempting to communicate.
            # $2 = cnrNotifServerType - The type of server (see Lookup table)
            ##########

            @AlertGroup = "NetReg Other Server Status"
            @AlertKey = $1
            @Summary = lookup($2, cnrNotifServerType) + " Server at " + $1 + " Responding to Updates from CNR server"
            #@Severity = 1 
            @Severity = 2 
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "10": ### ciscoNetRegFailoverConfigMismatch
        
            ##########
            # This notification signifies that a server has detected via the
            # failover protocol that its configuration does not match that of
            # its failover peer, and that reliable DHCP operation in the event
            # of a server failure may not be possible. The identity of the peer
            # server is given by the cnrNotifServer object.
            #
            # $1 = cnrNotifServer - The IP Address of a server with which CNR
            #        is attempting to communicate.
            ##########
        
            @AlertGroup = "NetReg Failover Config Mismatch"
            @AlertKey = $1
            @Summary = "Server Configuration Does Not Match Failover Peer " + $1
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.15.2": ### Cisco OAM - Notifications from CISCO-OAM-MIB

    @Agent = "Cisco-OAM"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### oamLoopbackPingCompletionTrap

            ##########
            # A oamLoopbackPingCompleted trap is sent at the completion of a
            # sequence of OAM loopback cells if such a trap was requested when
            # the sequence was initiated.
            #
            # $1 = oamLoopbackPingCompleted - Set to true when all the OAM
            #        loopback cells in this sequence have been either responded
            #        to or timed out.
            ##########

            @AlertGroup = "OAM Loopback Ping Completion"
            @AlertKey = ""
            @Summary = "Loopback Ping Completed for Sequence of OAM Loopback Cells"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.16.2": ### Cisco Ping - Notifications from CISCO-PING-MIB

    @Agent = "Cisco-Ping"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoPingCompletion
        
            ##########
            # A ciscoPingCompleted trap is sent at the completion of a sequence
            # of pings if such a trap was requested when the sequence was
            # initiated.
            #
            # In addition to the objects listed below (which are always
            # present), the message will contain the following objects if any
            # responses were received: ciscoPingMinRtt ciscoPingAvgRtt
            # ciscoPingMaxRtt
            #
            # It will also contain the following object if the ping is to a
            # VPN address: ciscoPingVrfName
            #
            # $1 = ciscoPingCompleted - Set to true when all the packets in
            #        this sequence have been either responded to or timed out.
            # $2 = ciscoPingSentPackets - The number of ping packets that have
            #        been sent to the target in this sequence.
            # $3 = ciscoPingReceivedPackets - The number of ping packets that
            #        have been received from the target in this sequence.
            ##########
        
            @AlertGroup = "Ping Completion"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "Ping Sequence Completed: SentPackets = " + $2 + ", ReceivedPackets = " + $3
            #@Severity = 1
            @Severity = 2
            @Type = 600
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.22.3": ### Cisco Repeater - Notifications from CISCO-REPEATER-MIB

    @Agent = "Cisco-Repeater"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoRptrIllegalSrcAddrTrap

            ##########
            # When the illegal MAC source address violation is detected, the
            # port is partitioned for one minute. In addition, this trap
            # notification is generated. Note: rptrPortGroupIndex, and
            # rptrPortIndex are the instances of
            # ciscoRptrPortLastIllegalSrcAddr.
            #
            # $1 = ciscoRptrPortLastIllegalSrcAddr - This object is the last
            #        illegal source address which caused this port to be
            #        partitioned. If the port is never partitioned due to
            #        Source Address Control, the agent shall return a string of
            #        length zero.
            ##########

            @AlertGroup = "Repeater Illegal SrcAddr"
            @AlertKey = $1
            @Summary = "Illegal MAC Source Address Violation  ( SrcAddr = " + $1 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5.11.2": ### Cisco Rhino (LS1010) ATM Switch Chassis - from CISCO-RHINO-MIB

    @Agent = "Cisco-Rhino ATM Switch Chassis"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoLS1010ChassisFailureNotification
        
            ##########
            # Agent detects a change in the status of ps0, ps1, fan, 12V line,
            # and/or chassis temperature. This notification will be generated
            # when the status changes from no-fault to fault, and also when the
            # status changes from fault to no-fault.
            #
            # $1 = ciscoLS1010ChassisPs0Status - Status of power supply number
            #      1.
            # $2 = ciscoLS1010ChassisPs1Status - Status of power supply number
            #      2.
            # $3 = ciscoLS1010ChassisFanStatus - Status of the chassis fan.
            # $4 = ciscoLS1010Chassis12VoltStatus - The chassis 12V status.
            # $5 = ciscoLS1010ChassisTempStatus - The chassis temperature
            #        status. The values of minorWarning(3), majorWarning(4) and
            #        criticalWarning(5) will be primarily used by C6400 to
            #        indicate the core temperature. C6400 will never report
            #        overTemperature(2) status. In C6400 there are two
            #        temperature sensors: core and inlet. C6400 use this object
            #        to represent the core temperature and the other object
            #        ciscoLS1010ChassisInletTempStatus to represent the inlet
            #        temperature.
            ##########
            
            @AlertGroup = "LS1010 Chassis Status"
            @AlertKey = ""
            @Summary = "LS1010 Chassis Failure: Ps0Status = " + lookup($1, OperStatus) + ", Ps1Status = " + lookup($2, OperStatus) + ", FanStatus = " + lookup($3, OperStatus) + ", 12VoltStatus = " + lookup($4, ciscoLS1010Chassis12VoltStatus) + ", TempStatus = " + lookup($5, ciscoLS1010ChassisTempStatus)
            
            if (int($1) > 2)
            {
                switch ($1)
                {
                    case "1": ### unknown
                        #@Severity = 1
                        @Severity = 2
                        @Type = 0
                    case "2": ### ok
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "3": ### fault
                        @Severity = 4
                        @Type = 1
                    case "4": ### fanAlarm
                        @Severity = 4
                        @Type = 1
                    case "5": ### partialFault
                        @Severity = 3
                        @Type = 1
                    case "6": ### empty
                        @Severity = 2
                        @Type = 1
                    default:
                }
            }
            else if (int($2) > 2)
            {
                switch ($1)
                {
                    case "1": ### unknown
                        #@Severity = 1
                        @Severity = 2
                        @Type = 0
                    case "2": ### ok
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "3": ### fault
                        @Severity = 4
                        @Type = 1
                    case "4": ### fanAlarm
                        @Severity = 4
                        @Type = 1
                    case "5": ### partialFault
                        @Severity = 3
                        @Type = 1
                    case "6": ### empty
                        @Severity = 2
                        @Type = 1
                    default:
                }
            }
            else if (int($3) > 2)
            {
                switch ($1)
                {
                    case "1": ### unknown
                        #@Severity = 1
                        @Severity = 2
                        @Type = 0
                    case "2": ### ok
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "3": ### fault
                        @Severity = 4
                        @Type = 1
                    case "4": ### fanAlarm
                        @Severity = 4
                        @Type = 1
                    case "5": ### partialFault
                        @Severity = 3
                        @Type = 1
                    case "6": ### empty
                        @Severity = 2
                        @Type = 1
                    default:
                }
            }
            else if (int($4) > 1)
            {
                switch ($1)
                {
                    case "1": ### ok
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "2": ### outOfTolerance
                        @Severity = 4
                        @Type = 1
                    case "3": ### unknown
                        @Severity = 2
                        @Type = 1
                    default:
                }
            }
            else if (int($5) > 1)
            {
                switch ($5)
                {
                    case "1": ### ok
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "2": ### overTemperature
                        @Severity = 4
                        @Type = 1
                    case "3": ### minorWarning
                        @Severity = 3
                        @Type = 1
                    case "4": ### majorWarning
                        @Severity = 4
                        @Type = 1
                    case "5": ### criticalWarning
                        @Severity = 5
                        @Type = 1
                    default:
                }
            }
            else
            {
                #@Severity = 1
                @Severity = 2
                @Type = 2
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + $2 + " " + $3 + " " + $4 + " " + $5 + " " + @Agent + " " + @Manager

        case "2": ### ciscoLS1010ChassisChangeNotification
        
            ##########
            # Agent detects any hot-swap component change or changes in the
            # chassis.
            #
            # $1 = ciscoLS1010ChassisPs0Status - Status of power supply number
            #      1.
            # $2 = ciscoLS1010ChassisPs1Status - Status of power supply number
            #      2.
            # $3 = ciscoLS1010ChassisFanStatus - Status of the chassis fan.
            # $4 = ciscoLS1010Chassis12VoltStatus - The chassis 12V status.
            # $5 = ciscoLS1010ChassisTempStatus - The chassis temperature
            #        status. The values of minorWarning(3), majorWarning(4) and
            #        criticalWarning(5) will be primarily used by C6400 to
            #        indicate the core temperature. C6400 will never report
            #        overTemperature(2) status. In C6400 there are two
            #        temperature sensors: core and inlet. C6400 use this object
            #        to represent the core temperature and the other object
            #        ciscoLS1010ChassisInletTempStatus to represent the inlet
            #        temperature.
            ##########
        
            @AlertGroup = "LS1010 Chassis Change"
            @AlertKey = ""
            @Summary = "Hot-Swap Component Change or Chassis Changes"
            @Severity = 3
            @Type = 600
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.29"|".1.3.6.1.4.1.9.9.29.2": ### Cisco remote source-route bridging (RSRB) - Notifications from CISCO-RSRB-MIB

    @Agent = "Cisco-RSRB"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### rsrbPeerStateChangeNotification

            ##########
            # This trap indicates that the state of an RSRB remote peer has
            # transitioned to active (psConnected) or inactive (psDead or
            # psClosed).
            #
            # $1 = rsrbRemotePeerState - Current state of the RSRB session with
            #        the remote peer.
            ##########

            @AlertGroup = "RSRB Peer Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### rsrbVirtRingIndex.rsrbRemotePeerIndex
            switch ($1) ### rsrbRemotePeerState (see lookup table)
            {
                case "1": ### dead
                    @Summary = "RSRB Remote Peer Dead  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "2": ### closed
                    @Summary = "RSRB Remote Peer Connection Closed  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### opening
                    @Summary = "RSRB Remote Peer Connection Opening  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### openWaitXport
                    @Summary = "RSRB Remote Peer Connection Open, WaitXPort  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### waitRemoteRsp
                    @Summary = "RSRB Remote Peer Connection Waiting for Remote RSP   ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "6": ### remoteResponded
                    @Summary = "RSRB Remote Peer Responded  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### remoteOpened
                    @Summary = "RSRB Remote Peer Opened  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### draining
                    @Summary = "RSRB Remote Peer Connection Draining  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "9": ### connected
                    @Summary = "RSRB Remote Peer Connected  ( VirtRingIndex.RemotePeerIndex = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }    
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.42.2": ### Cisco Response Time Monitor - Notifications from CISCO-RTTMON-MIB and CISCO-RTTMON-MIB-120_5_T

    @Agent = "Cisco-RTTMON"
    @Class = "40057"
    
    ##########
    # NOTE: All Cisco Response Time Monitor Traps contain the following
    # variable bindings.
    #
    # $1 = rttMonCtrlAdminTag - A string which is used by a managing
    #        application to identify the RTT target. This string is inserted
    #        into trap notifications, but has no other significance to the
    #        agent.
    # $2 = rttMonHistoryCollectionAddress - When the RttMonRttType is 'echo' or
    #        'pathEcho' this is a string which specifies the address of the
    #        target for the this RTT operation. For all other values of
    #        RttMonRttType this string will be null. This address will be the
    #        address of the hop along the path to the
    #        rttMonEchoAdminTargetAddress address, including
    #        rttMonEchoAdminTargetAddress address, or just the
    #        rttMonEchoAdminTargetAddress address, when the path information
    #        is not collected. This behavior is defined by the
    #        rttMonCtrlAdminRttType object. The interpretation of this string
    #        depends on the type of RTT operation selected, as specified by the
    #        rttMonEchoAdminProtocol object. See rttMonEchoAdminTargetAddress
    #        for a complete description.
    ##########        

    switch ($specific-trap)
    {
        case "1": ### rttMonConnectionChangeNotification

            ##########
            # This notification is only valid when the RttMonRttType is 'echo'
            # or 'pathEcho'. A rttMonConnectionChangeNotification indicates
            # that a connection to a target (not to a hop along the path to a
            # target) has either failed on establishment or been lost and when
            # reestablished. Precisely, this has resulted in
            # rttMonCtrlOperConnectionLostOccurred changing value. If History
            # is not being collected, the instance values for the
            # rttMonHistoryCollectionAddress object will not be valid. When
            # RttMonRttType is not 'echo' or 'pathEcho' the
            # rttMonHistoryCollectionAddress object will be null.
            #
            # $3 = rttMonCtrlOperConnectionLostOccurred - This object will only
            #        change its value when the RttMonRttType is 'echo' or
            #        'pathEcho'. This object is set to true when the RTT
            #        connection fails to be established or is lost, and set to
            #        false when a connection is reestablished. When the
            #        RttMonRttType is 'pathEcho', connection loss applies only
            #        to the rttMonEchoAdminTargetAddress and not to
            #        intermediate hops to the Target. When this value changes
            #        and rttMonReactAdminConnectionEnable is true, a reaction
            #        will occur. If a trap is sent it is a
            #        rttMonConnectionChangeNotification.
            ##########

            @AlertGroup = "Connection Status"
            @AlertKey = $1
            switch($3)
            {
                case "1": ### true
                    @Summary = "RTT Connection ( echo or pathEcho ) to " + $1 + " Failed"
                    @Severity = 3
                    @Type = 1
                case "2": ### false
                    @Summary = "RTT Connection ( echo or pathEcho ) to " + $1 + " Established"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "2": ### rttMonTimeoutNotification

            ##########
            # A rttMonTimeoutNotification indicates the occurrence of a timeout
            # for a RTT operation, and it indicates the clearing of such a
            # condition by a subsequent RTT operation. Precisely, this has
            # resulted in rttMonCtrlOperTimeoutOccurred changing value. When
            # the RttMonRttType is 'pathEcho', this notification will only be
            # sent when the timeout occurs during an operation to the target
            # and not to a hop along the path to the target. This also applies
            # to the clearing of the timeout. If History is not being
            # collected, the instance values for the
            # rttMonHistoryCollectionAddress object will not be valid. When
            # RttMonRttType is not 'echo' or 'pathEcho' the
            # rttMonHistoryCollectionAddress object will be null.
            #
            # $3 = rttMonCtrlOperTimeoutOccurred - This object will change its
            #        value for all RttMonRttTypes. This object is set to true
            #        when an operation times out, and set to false when an
            #        operation completes under rttMonCtrlAdminTimeout. When
            #        this value changes, a reaction may occur, as defined by
            #        rttMonReactAdminTimeoutEnable. When the RttMonRttType is
            #        'pathEcho', this timeout applies only to the
            #        rttMonEchoAdminTargetAddress and not to intermediate hops
            #        to the Target. If a trap is sent it is a
            #        rttMonTimeoutNotification.
            ##########

            @AlertGroup = "Operation Status"
            @AlertKey = $1
            switch($3)
            {
                case "1": ### true
                    @Summary = "RTT Operation to " + $1 + " Timed Out"
                    @Severity = 3
                    @Type = 1
                case "2": ### false
                    @Summary = "RTT Operation to " + $1 + " Successful"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "3": ### rttMonThresholdNotification

            ##########
            # A rttMonThresholdNotification indicates the occurrence of a
            # threshold violation for a RTT operation, and it indicates the
            # previous violation has subsided for a subsequent RTT operation.
            # Precisely, this has resulted in
            # rttMonCtrlOperOverThresholdOccurred changing value. When the
            # RttMonRttType is 'pathEcho', this notification will only be sent
            # when the threshold violation occurs during an operation to the
            # target and not to a hop along the path to the target. This also
            # applies to the subsiding of a threshold condition. If History is
            # not being collected, the instance values for the
            # rttMonHistoryCollectionAddress object will not be valid. When
            # RttMonRttType is not 'echo' or 'pathEcho' the
            # rttMonHistoryCollectionAddress object will be null.
            #
            # $3 = rttMonCtrlOperOverThresholdOccurred - This object will
            #        change its value for all RttMonRttTypes. This object is
            #        changed by operation completion times over threshold, as
            #        defined by rttMonReactAdminThresholdType. When this value
            #        changes, a reaction may occur, as defined by
            #        rttMonReactAdminThresholdType. If a trap is sent it is a
            #        rttMonThresholdNotification.
            ##########

            @AlertGroup = "Operation Threshold"
            @AlertKey = $1
            switch($3)
            {
                case "1": ### true
                    @Summary = "RTT Operation to " + $1 + ", Threshold Crossed"
                    @Severity = 3
                    @Type = 1
                case "2": ### false
                    @Summary = "RTT Operation to " + $1 + ", Threshold Normal"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "4": ### rttMonVerifyErrorNotification

            ##########
            # A rttMonVerifyErrorNotification indicates the occurrence of a
            # data corruption in an RTT operation.
            #
            # $3 = rttMonCtrlOperVerifyErrorOccurred - This object is true if
            #        rttMonCtrlAdminVerifyData is set to true and data
            #        corruption occurs.
            ##########

            @AlertGroup = "Verification"
            @AlertKey = $1
            switch($3)
            {
                case "1": ### true
                    @Summary = "Data Corrupt in RTT Operation to " + $1
                    @Severity = 3
                    @Type = 1
                case "2": ### false
                    @Summary = "RTT Operation to " + $1 + " Successful"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

               case "5": ### - rttMonNotification
                        # SNMPv2
                        # A rttMonNotification indicates the occurrence of a^M
                        # threshold violation, and it indicates the previous^M
                        # violation has subsided for a subsequent operation. ^M
                        #
                        # When the RttMonRttType is 'pathEcho', this^M
                        # notification will only be sent when the threshold^M
                        # violation occurs during an operation to the target and^M
                        # not to a hop along the path to the target. This also^M
                        # applies to the subsiding of a threshold condition.^M
                        #
                        # If History is not being collected, the instance values^M
                        # for the rttMonHistoryCollectionAddress object will not^M
                        # be valid. When RttMonRttType is not 'echo' or 'pathEcho'^M
                        # the rttMonHistoryCollectionAddress object will be null.^M
                        #
                        # rttMonReactVar defines the type of reaction that is^M
                        # configured for the probe ( e.g jitterAvg, rtt etc ).^M
                        # In the rttMonReactTable there are trap definitions^M
                        # for the probes and each probe may have more than^M
                        # one trap definitions for various types ( e.g rtt,^M
                        # jitterAvg, packetLoossSD etc ). So the object rttMonReactVar^M
                        # indicates the type ( e.g. rtt, packetLossSD, timeout etc )^M
                        # for which threshold violation traps has been generated.^M
                        #
                        # The object rttMonEchoAdminLSPSelector will be valid only^M
                        # for the probes based on 'mplsLspPingAppl' RttMonProtocol. For^M
                        # all other probes it will be null.
                        $rttMonCtrlAdminTag = $1
                        $rttMonHistoryCollectionAddress = $2
                        $rttMonReactVar = $3
                        $rttMonReactOccurred = $4
                        $rttMonReactValue = $5
                        $rttMonReactThresholdRising = $6
                        $rttMonReactThresholdFalling = $7
                        $rttMonEchoAdminLSPSelector = $8
                        @AlertGroup = ""
                        @Agent = "CISCO-RTTMON-MIB"
                        @Summary = "rttMonNotification"
                        #@Severity = 1
                        @Severity = 2
                        @Type = 0
###	 Toby modified for testing
## which ones clear which others?
## what should be in identifier?
## changed back for live ...
                        @Identifier = @Node + @Summary
                        #@Identifier = @Node + @Summary +$1 + $2 +$3 +$4 + $5 + $6 + $7 + $8
                        ##details($rttMonCtrlAdminTag,$rttMonHistoryCollectionAddress,$rttMonReactVar,$rttMonReactOccurred,$rttMonReactValue,$rttMonReactThresholdRising,$rttMonReactThresholdFalling,$rttMonEchoAdminLSPSelector)

                case "6": ### - rttMonLpdDiscoveryNotification
                        # SNMPv2
                        # A rttMonLpdDiscoveryNotification indicates that the LSP Path^M
                        # Discovery to the target PE has failed, and it also indicates^M
                        # the clearing of such condition. Precisely this has resulted in^M
                        # rttMonLpdGrpStatsLPDFailOccurred changing value.^M
                        #
                        # When the rttMonLpdGrpStatsLPDFailOccurred is 'false', the^M
                        # instance value for rttMonLpdGrpStatsLPDFailCause is not valid.
                        $rttMplsVpnMonCtrlTag = $1
                        $rttMonLpdGrpStatsTargetPE = $2
                        $rttMonLpdGrpStatsLPDFailCause = $3
                        $rttMonLpdGrpStatsLPDFailOccurred = $4
                        @AlertGroup = ""
                        @Agent = "CISCO-RTTMON-MIB"
                        @Summary = "rttMonLpdDiscoveryNotification"
                        #@Severity = 1
                        @Severity = 2
                        @Type = 0
                        @Identifier = @Node + @Summary
                        #details($rttMplsVpnMonCtrlTag,$rttMonLpdGrpStatsTargetPE,$rttMonLpdGrpStatsLPDFailCause,$rttMonLpdGrpStatsLPDFailOccurred)

                case "7": ### - rttMonLpdGrpStatusNotification
                        # SNMPv2
                        # A rttMonLpdGrpStatusNotification indicates that the LPD^M
                        # Group status rttMonLpdGrpStatsGroupStatus has changed indicating^M
                        # some connectivity change to the target PE.^M
                        # This has resulted in rttMonLpdGrpStatsGroupStatus changing^M
                        # value.
                        $rttMplsVpnMonCtrlTag = $1
                        $rttMonLpdGrpStatsTargetPE = $2
                        $rttMonLpdGrpStatsGroupStatus = $3
                        @AlertGroup = ""
                        @Agent = "CISCO-RTTMON-MIB"
                        @Summary = "rttMonLpdGrpStatusNotification"
                        #@Severity = 1
                        @Severity = 2
                        @Type = 0
                        @Identifier = @Node + @Summary
                        #details($rttMplsVpnMonCtrlTag,$rttMonLpdGrpStatsTargetPE,$rttMonLpdGrpStatsGroupStatus)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.28.2": ### Cisco SDLLC - Notifications from CISCO-SDLLC-MIB

    @Agent = "Cisco-SDLLC"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### convSdllcPeerStateChangeNotification

            ##########
            # This Notification indicates that the state of an SDLLC connection
            # has transitioned to connected or disconnected.
            #
            # $1 = convSdllcAddrState - Current state of the SDLLC connection.
            ##########

            @AlertGroup = "SDLLC Peer Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### ifIndex.convSdllcAddrSdlcAddr
            switch ($1) ### convSdllcAddrState
            {
                case "1": ### disconnected - session disconnected 
                    @Summary = "SDLLC Connection Disconnected  ( ifIndex.SdlcAddr = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "2": ### sdlcDisconnecting - disconnect pending SDLC side
                    @Summary = "SDLLC Connection Disconnecting  ( ifIndex.SdlcAddr = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### sdlcPriConnecting - connect pending SDLC primary side
                    @Summary = "SDLLC Connection Pending, SDLC Primary Side  ( ifIndex.SdlcAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### netDisconnecting - disconnect pending network side
                    @Summary = "SDLLC Connection Disconnect Pending, Network Side  ( ifIndex.SdlcAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### netConnecting - connect pending network side
                    @Summary = "SDLLC Connection Pending, Network Side  ( ifIndex.SdlcAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "6": ### sdlcSecConnecting - connect pending SDLC secondary side
                    @Summary = "SDLLC Connection Pending, SDLC Secondary Side  ( ifIndex.SdlcAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### connected - session connected
                    @Summary = "SDLLC Connection Connected  ( ifIndex.SdlcAddr = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.46.2": ### Cisco SIBU Managers - Notifications from CISCO-SIBU-MANAGERS-MIB

    @Agent = "Cisco-SIBU Managers"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoSibuManagersConsoleLogonIntruder

            ##########
            # A user is repeatedly trying to logon using an invalid password.
            # The number of attempts exceeds the preset limit given in
            # consolePasswordMaxAttempts. Depending on how the object
            # cmConsoleSilentTime is configured, the switch may shutdown the
            # command line interface console following the generation of this
            # trap.
            ##########

            @AlertGroup = "Console Logon Intruder"
            @AlertKey = ""
            @Summary = "User is Repeatedly Trying to Logon with Invalid Password"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.44.2"|".1.3.6.1.4.1.9.10.44.2.0": ### Cisco SIBU Stackable Dual-Speed Hub - Notifications from CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB

    @Agent = "Cisco-SIBU Stackable Dual-Speed Hub"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoSibuStackableDualSpeedHubRptrPortLinkChange

            ##########
            # This trap is generated whenever the value of
            # cssRepeaterPortLinkStatus changes for a repeater port.
            #
            # $1 = cssRepeaterPortLinkStatus - The current port link status.
            ##########

            @AlertGroup = "Repeater Port Link Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### rptrPortGroupIndex.rptrPortIndex
            switch ($1) ### cssRepeaterPortLinkStatus
            {
                case "1": ### link
                    @Summary = "Repeater Port Link OK  ( PortGroup.Port = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### noLink
                    @Summary = "No Link on Repeater Port  ( PortGroup.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        case "2": ### ciscoSibuStackableDualSpeedHubSwitchPortLinkChange

            ##########
            # This trap is generated whenever the value of
            # cssSwitchPortLinkStatus changes for a switch port on an extension
            # module.
            #
            # $1 = cssSwitchPortLinkStatus - Indicates the link STATUS of
            #        switch port.
            ##########

            @AlertGroup = "Switch Port Link Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+)$") ### rptrGroupIndex.cssSwitchPortModuleID.cssSwitchPortPortID
            switch ($1) ### cssSwitchPortLinkStatus
            {
                case "1": ### link
                    @Summary = "Switch Port Link OK  ( Group.PortModuleID.Port = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### noLink
                    @Summary = "No Link on Switch Port  ( Group.PortModuleID.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            } 
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.8.2": ### Cisco SNA Logical Link Control - Notifications from CISCO-SNA-LLC-MIB

    @Agent = "Cisco-SNA LLC"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### llcCcStatusChange
        
            ##########
            # This trap indicates that the state of an LLC connection component
            # has transitioned to normal(3) or aDM(1)
            #
            # $1 = llcCcOperState - This object describes the operational state
            #        of the LLC connection.
            # $2 = llcCcOperLastFailTime - This object describes the value of
            #        sysUpTime when this LLC connection component last failed.
            #        If the connection component has not failed, then this
            #        value shall be zero.
            # $3 = llcCcOperLastFailCause - This enumerated object reflects the
            #        cause of the last failure of this LLC connection
            #        component. If the connection component has not failed,
            #        then this object will have a value of undefined(1).
            # $4 = llcCcOperLastFailFRMRInfo - This object reflects the
            #        information field of the FRMR frame if the last failure
            #        for this LLC connection component was as a result of an
            #        invalid frame. Otherwise, this field has no meaning.
            ##########
        
            @AlertGroup = "llcCc Status Change"
            @AlertKey = extract($OID1, "8\.1\.3\.2\.1\.1\.(.*)$") ### ifIndex.llcPortVirtualIndex.llcSapNumber.llcCcRMac.llcCcRSap
            switch ($1)
            {
                case "1": ### aDM
                    @Summary = "LLC Connection Component aDM  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "2": ### setup
                    @Summary = "LLC Connection Component Setup  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### normal
                    @Summary = "LLC Connection Component Normal  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "4": ### busy
                    @Summary = "LLC Connection Component Busy  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "5": ### reject
                    @Summary = "LLC Connection Component Rejected  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### await
                    @Summary = "LLC Connection Component Waiting  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### awaitBusy
                    @Summary = "LLC Connection Component Waiting, Busy  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### awaitReject
                    @Summary = "LLC Connection Component Waiting, Rejected  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "9": ### dConn
                    @Summary = "LLC Connection Component Disconnected  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "10": ### reset
                    @Summary = "LLC Connection Component Reset  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "11": ### error
                    @Summary = "LLC Connection Component Error  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "12": ### conn
                    @Summary = "LLC Connection Component Connected  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "13": ### resetCheck
                    @Summary = "LLC Connection Component Reset, Check  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "14": ### resetWait
                    @Summary = "LLC Connection Component Reset, Waiting  ( ifIndex.PortVirtual.SapNumber.CcRMac.CcRSap = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5": ### Cisco Catalyst OS - Notifications from CISCO-STACK-MIB

    @Agent = "Cisco-Catalyst OS"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### lerAlarmOn
        
            ##########
            # A lerAlarmOn trap signifies that the agent entity has detected
            # that the fddimibPORTLerFlag object in the FDDI-SMT73-MIB
            # (RFC1512) has transitioned to the true(1) state for one of its
            # ports. The generation of this trap can be controlled by the
            # fddimibPORTLerAlarm object in the FDDI-SMT73-MIB for each port.
            #
            # $1 = fddimibPORTSMTIndex - The value of the SMT index associated
            #        with this PORT.
            # $2 = fddimibPORTIndex - A unique value for each PORT within a
            #        given SMT, which is the same as the corresponding resource
            #        index in SMT. The value for each PORT must remain constant
            #        at least from one re-initialization of the entity's
            #        network management system to the next re-initialization.
            ##########
            
            @AlertGroup = "Link Error Rate"
            @AlertKey = $1 + "." + $2
            @Summary = "Link Error Rate Alarm  ( PORTSMTIndex = " + $1 + ", PORTIndex = " + $2 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "2": ### lerAlarmOff
        
            ##########
            # A lerAlarmOff trap signifies that the agent entity has detected
            # that the fddimibPORTLerFlag object in the FDDI-SMT73-MIB
            # (RFC1512) has transitioned to the false(2) state for one of its
            # ports. The generation of this trap can be controlled by the
            # fddimibPORTLerAlarm object in the FDDI-SMT73-MIB for each port.
            #
            # $1 = fddimibPORTSMTIndex - The value of the SMT index associated
            #        with this PORT.
            # $2 = fddimibPORTIndex - A unique value for each PORT within a
            #        given SMT, which is the same as the corresponding resource
            #        index in SMT. The value for each PORT must remain constant
            #        at least from one re-initialization of the entity's
            #        network management system to the next re-initialization.
            ##########
            
            @AlertGroup = "Link Error Rate"
            @AlertKey = $1 + "." + $2
            @Summary = "Link Error Rate Alarm Cleared  ( PORTSMTIndex = " + $1 + ", PORTIndex = " + $2 + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "3": ### moduleUp
        
            ##########
            # A moduleUp trap signifies that the agent entity has detected that
            # the moduleStatus object in this MIB has transitioned to the ok(2)
            # state for one of its modules. The generation of this trap can be
            # controlled by the sysEnableModuleTraps object in this MIB.
            #
            # $1 = moduleIndex - A unique value for each module within the
            #        chassis.
            ##########
            
            @AlertGroup = "Module Up/Down"
            @AlertKey = $1
            @Summary = "Module Up  ( moduleIndex = " + $1 + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "4": ### moduleDown
        
            ##########
            # A moduleDown trap signifies that the agent entity has detected
            # that the moduleStatus object in this MIB has transitioned out of
            # the ok(2) state for one of its modules. The generation of this
            # trap can be controlled by the sysEnableModuleTraps object in this
            # MIB.
            #
            # $1 = moduleIndex - A unique value for each module within the
            #        chassis.
            ##########
            
            @AlertGroup = "Module Up/Down"
            @AlertKey = $1
            @Summary = "Module Down  ( moduleIndex = " + $1 + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 
            
        case "5": ### chassisAlarmOn
        
            ##########
            # A chassisAlarmOn trap signifies that the agent entity has
            # detected the chassisTempAlarm, chassisMinorAlarm, or
            # chassisMajorAlarm object in this MIB has transitioned to the
            # on(2) state. The generation of this trap can be controlled by the
            # sysEnableChassisTraps object in this MIB.
            #
            # $1 = chassisTempAlarm - The chassis minor alarm status.
            # $2 = chassisMinorAlarm - The chassis major alarm status.
            # $3 = chassisMajorAlarm - The chassis temperature alarm status.
            ##########

            @AlertGroup = "Chassis Alarm"
            @AlertKey = ""
            if (int($1) > 1)
            {
                switch ($1)
                {
                    case "1": ### off
                        @Summary = "Temperature Alarm Cleared"
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    case "2": ### on
                        @Summary = "Temperature Too high"
                        @Severity = 4
                        @Type = 1
                    case "3": ### critical
                        @Summary = "Temperature Critical, System Shutdown Imminent"
                        @Severity = 5
                        @Type = 1
                    default:
                }
            }
            else if (int($2) > 1)
            {
                @Summary = "Minor Chassis Alarm"
                @Severity = 3
                @Type = 1
            }
            else if (int($3) > 1)
            {
                @Summary = "Major Chassis Alarm"
                @Severity = 4
                @Type = 1
            }
            else
            {
                @Summary = "Unknown Chassis Alarm Status"
                @Severity = 2
                @Type = 1
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "6": ### chassisAlarmOff
        
            ##########
            # A chassisAlarmOff trap signifies that the agent entity has
            # detected the chassisTempAlarm, chassisMinorAlarm, or
            # chassisMajorAlarm object in this MIB has transitioned to the
            # off(1) state. The generation of this trap can be controlled by
            # the sysEnableChassisTraps object in this MIB.
            #
            # $1 = chassisTempAlarm - The chassis minor alarm status.
            # $2 = chassisMinorAlarm - The chassis major alarm status.
            # $3 = chassisMajorAlarm - The chassis temperature alarm status.
            ##########

            @AlertGroup = "Chassis Alarm"
            @AlertKey = ""
            if (match($1, "1"))
            {
                if (match($2, "1"))
                {
                    if (match($3, "1"))
                    {
                        @Summary = "All Chassis Alarms Cleared"
                        #@Severity = 1
                        @Severity = 2
                        @Type = 2
                    }
                }
            }
            else
            {
                discard
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "7": ### ipPermitDeniedTrap
        
            ##########
            # ipPermitDeniedTrap indicates that IP permit denied access
            # happens. The generation of this trap can be controlled by the
            # sysEnableIpPermitTraps object in this MIB.
            #
            # $1 = ipPermitDeniedAddress - The IP address of a IP permit denied
            #        access.
            # $2 = ipPermitDeniedAccess - The denied access type. (see Lookup
            #        Table)
            ##########

            $ipPermitDeniedAddress = $1
            $ipPermitDeniedAccess = lookup($2, ipPermitDeniedAccess)
            
            @AlertGroup = "IP Permit Access"
            @AlertKey = "ipPermitDeniedListEntry." + $1
            @Summary = "IP Host Denied " + $ipPermitDeniedAccess + " Access  ( " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2
            
            $ipPermitDeniedAccess = $ipPermitDeniedAccess + " ( " + $2 + " )"
            #details($ipPermitDeniedAddress,$ipPermitDeniedAccess)

        case "9": ### sysConfigChangeTrap
        
            ##########
            # A sysConfigChange trap signifies that the system configuration in
            # NVRAM is changed. The generation of this trap can be controlled
            # by the sysEnableConfigTraps object in this MIB.
            #
            # $1 = sysConfigChangeTime - The time (in hundredths of a second)
            #        since the configuration of the system was last changed.
            # $2 = sysConfigChangeInfo - Indicates which NVRAM block is changed
            #        by whom.
            ##########
            
            $sysConfigChangeTime = $1
            $sysConfigChangeInfo = $2
            #details($sysConfigChangeTime,$sysConfigChangeInfo)
            
            @AlertGroup = "NVRAM Config Change"
            @AlertKey = $2
            @Summary = "NVRAM Config Change, " + $2
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "10": ### tokenRingSoftErrExceededTrap
        
            ##########
            # This trap is generated when a station local to a token ring port
            # exceeds its Soft Error Threshold within the configured interval.
            #
            # $1 = ringStationMacAddress - The physical address of this station.
            # $2 = ifIndex
            # $3 = ifName
            ##########
        
            @AlertGroup = "Token Ring Soft Error"
            @AlertKey = $2 + "." + $1
            @Summary = "Station " + $1 + ", Local to Token Ring Port " + $3 + ", Exceeded Soft Error Threshold"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.82.2": ### Cisco 802.1D Spanning Tree Protocol (STP) Extensions - Cisco from CISCO-STP-EXTENSIONS-MIB

    @Agent = "Cisco-STP Extensions"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### stpxInconsistencyUpdate

            ##########
            # A stpxPortInconsistencyUpdate notification is sent by a bridge
            # when an instance of stpxInconsistentState is created or
            # destroyed. That is, when an inconsistency is discovered in the
            # VLAN's Spanning Tree for a particular port, or when such an
            # inconsistency disappears. Note that the trap is not sent if the
            # port transitions between different types of inconsistency. The
            # stpxInconsistentState value indicates the type of inconsistency
            # which now exists/no longer exists for the relevant VLAN on the
            # relevant port.
            #
            # $1 = stpxInconsistentState - The types of inconsistency which
            #        have been discovered on this port for this VLAN's Spanning
            #        Tree. When this object exists, the value of the
            #        corresponding instance of the Bridge MIB's
            #        dot1dStpPortState object will be 'broken(6)'.
            #        REFERENCE "dot1dStpPortState is defined in RFC-1493.
            ##########

            @AlertGroup = "STP Inconsistency"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### stpxVlanIndex.stpxPortIndex
            switch($1)
            {
                case "0":
                    @Summary = "VLAN Spanning Tree Consistent  ( VlanID.Port = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "1": ### typeInconsistent - a port-type inconsistency
                    @Summary = "VLAN Spanning Tree Port-Type Inconsistency  ( VlanID.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "2": ### pvidInconsistent - a PVID inconsistency
                    @Summary = "VLAN Spanning Tree PVID Inconsistency  ( VlanID.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
                    @Summary = "VLAN Spanning Tree Inconsistency  ( VlanID.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "2": ### stpxRootInconsistencyUpdate

            ##########
            # A stpxRootInconsistencyUpdate notification is sent by a bridge
            # when an instance of stpxRootInconsistencyState is created or
            # destroyed. That is, when an root-inconsistency is discovered in
            # the VLAN's or instance's Spanning Tree for a particular port, or
            # when such an root-inconsistency disappears. For creation, the
            # value of stpxRootInconsistencyState in the notification is
            # true(1); for deletion, the value is false(2). The object value of
            # stpxSpanningTreeType indicates which Spanning Tree protocol is
            # running when an instance of stpxRootInconsistencyState is created
            # or destroyed. 
            #
            # $1 = stpxRootInconsistencyState - Indicates whether the port on a
            #        particular VLAN or a particular MISTP instance is
            #        currently in root-inconsistent state or not.
            # $2 = stpxSpanningTreeType - The actual mode of spanning tree
            #        protocol runs on the device. It can be either PVST+ (Per
            #        VLAN Spanning Tree+ Protocol), MISTP (Multi Instance
            #        Spanning Tree Protocol) or MISTP with the tunneling scheme
            #        enabled for PVST+. When the value of this MIB object gets
            #        changed, all ports will start with blocking state under
            #        the new spanning tree mode and the network connectivity
            #        would be affected and the connectivity to this device
            #        would also be lost temporarily.
            ##########

            @AlertGroup = "STP Root Consistency"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### stpxRootInconsistencyIndex.stpxRootInconsistencyPortIndex
            switch($1)
            {
                case "1": ### True
                    @Summary = "VLAN, " + lookup($2, stpxSpanningTreeType) + ", Spanning Tree Root Inconsistency"
                    switch($2)
                    {
                        case "1":
                            @Summary = @Summary + "  ( VlanID.Port = " + @AlertKey + " )"
                        default:
                            @Summary = @Summary + "  ( VlanInstanceID.Port = " + @AlertKey + " )"
                    }
                    @Severity = 4
                    @Type = 1
                case "2": ### False
                    @Summary = "VLAN, " + lookup($2, stpxSpanningTreeType) + ", Spanning Tree Root Consistent"
                    switch($2)
                    {
                        case "1":
                            @Summary = @Summary + "  ( VlanID.Port = " + @AlertKey + " )"
                        default:
                            @Summary = @Summary + "  ( VlanInstanceID.Port = " + @AlertKey + " )"
                    }
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + $2 + " " + @Agent + " " + @Manager

        case "3": ### stpxLoopInconsistencyUpdate

            ##########
            # A stpxLoopInconsistencyUpdate notification is sent by a bridge
            # when an instance of stpxLoopInconsistencyState is created or
            # destroyed. That is, when an loop-inconsistency is discovered in
            # the VLAN's or instance's Spanning Tree for a particular port, or
            # when such an loop-inconsistency disappears. For creation, the
            # value of stpxLoopInconsistencyState in the notification is
            # true(1); for deletion, the value is false(2). The object value of
            # stpxSpanningTreeType indicates which Spanning Tree protocol is
            # running when an instance of stpxLoopInconsistencyState is created
            # or destroyed.
            #
            # $1 = stpxLoopInconsistencyState - Indicates whether the port on a
            #        particular VLAN or a particular MISTP instance is
            #        currently in loop-inconsistent state or not.
            # $2 = stpxSpanningTreeType - The actual mode of spanning tree
            #        protocol runs on the device. It can be either PVST+ (Per
            #        VLAN Spanning Tree+ Protocol), MISTP (Multi Instance
            #        Spanning Tree Protocol) or MISTP with the tunneling scheme
            #        enabled for PVST+. When the value of this MIB object gets
            #        changed, all ports will start with blocking state under
            #        the new spanning tree mode and the network connectivity
            #        would be affected and the connectivity to this device
            #        would also be lost temporarily.
            ##########

            @AlertGroup = "STP Loop Consistency"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### stpxLoopInconsistencyIndex.stpxLoopInconsistencyPortIndex
            switch($1)
            {
                case "1": ### True
                    @Summary = "VLAN, " + lookup($2, stpxSpanningTreeType) + ", Spanning Tree Loop Inconsistency"
                    switch($2)
                    {
                        case "1":
                            @Summary = @Summary + "  ( VlanID.Port = " + @AlertKey + " )"
                        default:
                            @Summary = @Summary + "  ( VlanInstanceID.Port = " + @AlertKey + " )"
                    }
                    @Severity = 4
                    @Type = 1
                case "2": ### False
                    @Summary = "VLAN, " + lookup($2, stpxSpanningTreeType) + ", Spanning Tree Loop Consistent"
                    switch($2)
                    {
                        case "1":
                            @Summary = @Summary + "  ( VlanID.Port = " + @AlertKey + " )"
                        default:
                            @Summary = @Summary + "  ( VlanInstanceID.Port = " + @AlertKey + " )"
                    }
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + $2 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.30.2": ### Cisco Serial Tunneling (STUN) - Notifications from CISCO-STUN-MIB

    @Agent = "Cisco-STUN"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### stunPeerStateChangeNotification

            ##########
            # This notification indicates that the state of a STUN route has
            # transitioned to active (connected or direct) or inactive (dead
            # or closed).
            #
            # $1 = stunRoutePeerState - The state of the peer connection
            #        through the STUN tunnel.
            ##########

            @AlertGroup = "STUN Peer State Change"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### stunGroupIndex.stunRouteStationAddress
            switch ($1) ### stunRoutePeerState
            {
                case "1": ### dead
                    @Summary = "STUN Route Dead  ( Group.RouteStationAddr = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "2": ### closed 
                    @Summary = "STUN Route Closed  ( Group.RouteStationAddr = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### opening 
                    @Summary = "STUN Route Opening  ( Group.RouteStationAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### openWait
                    @Summary = "STUN Route Open, Waiting  ( Group.RouteStationAddr = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### connected
                    @Summary = "STUN Route Connected  ( Group.RouteStationAddr = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "6": ### direct
                    @Summary = "STUN Route Direct  ( Group.RouteStationAddr = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager 

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.41.2": ### Cisco Syslog Message - Notifications from CISCO-SYSLOG-MIB

    @Agent = "Cisco-Syslog"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### clogMessageGenerated
        
            ##########
            # When a syslog message is generated by the device a
            # clogMessageGenerated notification is sent. The sending of these
            # notifications can be enabled/disabled via the
            # clogNotificationsEnabled object.
            #
            # $1 = clogHistFacility - Name of the facility that generated this
            #                         message. For example: 'SYS'.
            # $2 = clogHistSeverity - The severity of the message.
            # $3 = clogHistMsgName - A textual identification for the message
            #        type. A facility name in conjunction with a message name
            #        uniquely identifies a message type.
            # $4 = clogHistMsgText - The text of the message. If the text of
            #        the message exceeds 255 bytes, the message will be
            #        truncated to 254 bytes and a '*' character will be
            #        appended - indicating that the message has been truncated.
            # $5 = clogHistTimestamp - The value of sysUpTime when this message
            #        was generated.
            ##########
        
            $clogHistFacility = $1
            $clogHistSeverity = lookup($2, SyslogSeverity) + " ( " + $2 + " )"
            $clogHistMsgName = $3
            $clogHistMsgText = $4
            $clogHistTimestamp = $5
            #details($clogHistFacility,$clogHistSeverity,$clogHistMsgName,$clogHistMsgText,$clogHistTimestamp)

            @AlertGroup = $1 + "-" + $3
            @Summary = $4
            switch ($2)
            {
                case "1": ### emergency
                    @Severity = 4
                    @Type = 1
                case "2": ### alert
                    @Severity = 4
                    @Type = 1
                case "3": ### critical
                    @Severity = 4
                    @Type = 1
                case "4": ### error
                    @Severity = 3
                    @Type = 1
                case "5": ### warning
                    @Severity = 2
                    @Type = 1
                case "6": ### notice
                    @Severity = 2
                    @Type = 2
                case "7": ### info
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "8": ### debug
                    #@Severity = 1
                    @Severity = 2
                    @Type = 0
                default:
            }
            switch($1)
            {
                case "AAA": ### TACACS+ Authentication, Authorization, and Accounting security
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ADJ": ### Adjacency subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "AIP": ### ATM Interface Processor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ALIGN": ### Memory optimization in Reduced Instruction-Set Computer (RISC) processor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ALPS": ### Airline Protocol Support
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "AMDP2": ### AMDP2 Ethernet and Fast Ethernet
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "APPN": ### Advanced Peer-to-Peer Networking
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ARAP": ### Apple Remote Access Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ASPP": ### Asynchronous Security Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "AT": ### AppleTalk
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ATM": ### Asynchronous Transfer Mode
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ATMCES": ### ATM access concentrator PCI port adapter driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ATMCORE": ### ATM core
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ATMPA": ### ATM port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ATMSIG": ### ATM signaling subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ATMSSCOP": ### Service Specific Connection Oriented Protocol (SSCOP)
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "AUTORP": ### PIMv2 AUTORP
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "BAP": ### PPP Bandwidth Allocation Protocol (BAP)
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "BGP": ### Border Gateway Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "BRI": ### Integrated Services Digital Network (ISDN) Basic Rate Interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "BRIMUX": ### AS5200 BRIMUX board
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "BSC": ### Binary Synchronous Communications mode
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "BSTUN": ### Block serial tunneling
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "C1600": ### Cisco 1600 platform
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "C2KATM": ### Catalyst 2820 ATM module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "C3600": ### Cisco 3600 platform
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "C542": ### Voice driver for modular access routers
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "C5RSP": ### Cisco Catalyst 5000 platform
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "C7200": ### Cisco 7200 platform
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CALL_MGMT": ### Call management subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CBUS": ### ciscoBus controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CCH323":
                    switch($3)
                    {
                        case "GTWY_UNREGSTR":
                            @AlertGroup = "CCH323-Register"
                            @AlertKey = extract($4, "Gateway (.*) unreg")
                        case "REGSTR":
                            @AlertGroup = "CCH323-Register"
                            @AlertKey = extract($4, "Gateway (.*) reg")
                            #@Severity = 1
                            @Severity = 2
                            @Type = 2
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "CDM": ### Cable Data Modem subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CDP":
                    switch($3)
                    {
                        case "DUPLEX_MISMATCH":
                            @AlertKey = extract($4, "on ([A-Z|a-z|0-9|/]+) \(") ### Local Interface
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "CI": ### Cisco 7500 platform chassis interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CIPDUMP": ### CIP core dump
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CIRRUS": ### CD2430 asynchronous controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CIRRUS_PM": ### Slow speed asynchronous/synchronous port module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CLEAR": ### Clear facility
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CLNS": ### OSI Connectionless Network Service
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CLS": ### Cisco Link Services
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CLSDR": ### Cisco Link Services Driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CM622": ### ATM line card driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CMCC": ### Cisco Mainframe Channel Connection interfaces
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "COMP": ### Point-to-point compression
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CONTROLLER": ### Controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CPAD": ### Compression service adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CPM": ### Combo Port Module device driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CRYPTO": ### Encryption
                    switch($3)
                    {
                        case "IKMP_NO_SA"|"IKMP_PKT_OVERFLOW":
                            @AlertKey = extract($4, "from ([0-9|\.]+) ") ### Offender
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "CSC2": ### CSC2/CSC3 CPU cards
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CSM": ### Call switching module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "CT3": ### Channelized T3 port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DBCONN": ### Database Connection
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DBUS": ### Data bus
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DCU": ### ATM access concentrator PCI port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DEC21140": ### DEC21140 Fast Ethernet controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DHCPD":
                    switch($3)
                    {
                        case "PING_CONFLICT":
                            @AlertKey = extract($4, "pinged (.*)\.$") ### Offender
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "DIALER": ### Dial-on-demand routing
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DIALSHELF": ### Dial shelf messages
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DLC": ### Data-link control
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DLSw": ### Data-link switching
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DMA": ### Direct memory access
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DNET": ### DECnet
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DRIP": ### Duplicate RIng Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DRP": ### Director Response Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DRVGRP": ### Interface driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DSCCLOCK": ### Dial shelf controller clock
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DSC_ENV": ### Cisco AS5800 environment monitor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DSCEXTCLOCK": ### Dial shelf controller clock
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DSI": ### Cisco AS5800 dial shelf interconnect board
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DSPU": ### Downstream physical unit
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DSX0": ### CT1 RBS timeslot status
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DSX1": ### Channelized E1 (Europe) and T1(US) telephony standard
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "DUAL": ### Enhanced Interior Gateway Routing Protocol
                    switch($3)
                    {
                        case "SIA":
                            @AlertKey = extract($4, "Route ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+) ")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "DVMRP": ### Distance Vector Multicast Routing Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "EGP": ### Exterior Gateway Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ENT_API": ### Entity MIB API
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ENV": ### Environmental monitor card
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ENVM":
                    switch($3)
                    {
                        case "ENVWARN":
                            @AlertKey = extract($4, "(.*) measured")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "ENV_MON": ### Cisco 12000 environmental monitor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "EPAD": ### Encryption port adapter driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ESWITCH": ### Ethernet switch port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ETHERNET": ### Ethernet for the C1000 series
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "EXPRESSION": ### Expression MIB
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FB": ### Cisco AS5800 feature board
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FBINFO": ### Cisco 5800 feature board crash information subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FDDI": ### Fiber Distributed Data Interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FIB":
                    switch($3)
                    {
                        case "RPPREFIXINCONST2":
                            @AlertKey = extract($4, "for (.*) \(")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "FILESYS": ### File system
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FLASH": ### Flash nonvolatile memory
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FPGA": ### LS1010 chip-specific
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FR": ### Frame Relay
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FR_ELMI": ### Frame Relay enhanced Local Management Interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FR_LMI": ### Frame Relay Local Management Interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FTC_TRUNK": ### Cisco 3801 platform
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FTPSERVER": ### FTP server processes
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "FW": ### Inspection subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "GRIP": ### Xerox Network Systems (XNS) Routing Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "GRP": ### Gigabit route processor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "GRPPOS": ### POS route processor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "GSR_ENV": ### Gigabit Switch Router environment monitor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "GSRIPC": ### Gigabit Switch Router IPC service routines
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "GT64010": ### GT64010 DMA controller driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "HAWKEYE": ### Token Ring PCI port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "HD": ### HD64570 serial controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "HMM_ASYNC": ### Hex modem network module asynchronous driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "HOOD": ### LAN controller 100VG-AnyLAN interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "HP100VG": ### 100VG-AnyLAN PA driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "HUB": ### Cisco Ethernet hub
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IBM2692": ### IBM Token Ring chip set
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IDTATM25": ### IDT ATM25 network module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IFS": ### IOS File System
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IGRP": ### Interior Gateway Routing Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ILACC": ### ILACC driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "INTERFACE_API": ### Binary API for the interface descriptor block
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IP": ### Internet Protocol
                    switch($3)
                    {
                        case "IP":
                            @AlertKey = extract($4, "from ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$")
                            @Summary = extract($4, "PERMITFAIL:(.*)")
                        case "PERMITFAIL":
                            @AlertKey = extract($4, "from ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "IPACCESS": ### IP security
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPC": ### Interprocess communication
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPCGRP": ### RP interprocess communication
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPCLC": ### Gigabit Switch Router line card interprocess communication
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPC_RSP_CBUS": ### Interprocess communication
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPFAST": ### IP fast switching
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPFLOW": ### IP flow
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPMCAST": ### Gigabit Switch Router line card IP multicast
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPRT": ### Internet Protocol routing
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IPX": ### Internetwork Packet Exchange Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IP-SNMP": ### Simple Network Management Protocol specific to IP
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "ISDN": ### Integrated Services Digital Network
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "IVR":
                    switch($3)
                    {
                        case "NOSCRIPT":
                            @AlertKey = extract($4, "script\.  (.*)\.  errno")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "LANCE": ### Local Area Network Controller Ethernet
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LANE": ### LAN Emulation
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LANMGR": ### IBM LAN Network Manager
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LAPB": ### X.25 Link Access Procedure, Balanced
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LAT": ### DEC Local Area Transport
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LCCEF": ### ATM Cisco Express Forwarding (CEF) adjacency
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LES_FDDI": ### LAN Emulation Server/Fiber Distributed Data Interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LEX": ### LAN extension
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LINEPROTO": ### Line Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LINK": ### Data link
                    switch($3)
                    {
                        case "UPDOWN":
                            @AlertKey = extract($4, "Interface (.*), changed") ### Interface
                            $Status = extract($4, "to (.*)$")
                            switch($Status)
                            {
                                case "up":
                                    #@Severity = 1
                                    @Severity = 2
                                    @Type = 2
                                case "down":
                                    @Severity = 3
                                    @Type = 1
                                default:
                                    @Severity = 2
                                    @Type = 1
                            }
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "LLC2": ### Logical Link Control type 2
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LLIST": ### Linked list facility
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LNMC": ### LAN network manager
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "LPD": ### Line printer daemon
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "M32X": ### M32X Basic Rate Interface trunk card
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MAILBOX": ### ChipCom mailbox support
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MBRI": ### Multi-BRI port module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MBUS": ### Maintenance bus
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MBUS_SYS": ### MBUS system
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MCI": ### Multiport Communications Interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MICA": ### Modem ISDN Channel Aggregation modem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MIF68840": ### PCI MC68840 FDDI port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MIMIC": ### MCOM integrated modem network modules
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MK5": ### MK5025 serial controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MMODEM": ### Integrated modem network module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MODEM": ### Router shelf modem management
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MODEM_HIST": ### Router shelf modem history/tracing
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MODEM_NV": ### Modem NVRAM
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MPA68360": ### VIP Multi-channel Port Adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MROUTE": ### Multicast route
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "MUESLIX": ### Mx serial application-specific integrated circuit (ASIC)
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "NETWORK_CLOCK": ### Network clock synchronization
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "NHRP": ### Next Hop Resolution Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "NIC100": ### NIC100 driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "NIM": ### Network interface module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "OIR": ### Online insertion and removal
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "OOBP": ### Out of band port
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "OSPF": ### Open Shortest Path First
                    switch($3)
                    {
                        case "CONFLICTING_LSAID":
                            @AlertKey = extract($4, "LSA ID ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "PA": ### Port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "PAD": ### X.25 packet assembler/disassembler
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "PAGP": ### Port Aggregation Protocol
                    switch(extract($4, " %PAGP-[0-9]+-([A-Z]+):Port "))
                    {
                        case "PORTFROMSTP":
                            @AlertGroup = "PAGP-Port To/From STP"
                            @AlertKey = "Port: " + extract($4, "Port ([0-9]+/[0-9]+) left bridge port [0-9]+/[0-9]+") + ", Bridge Port: " + extract($4, "Port [0-9]+/[0-9]+ left bridge port ([0-9]+/[0-9]+)")
                            @Summary = ltrim(rtrim(extract($4, "%PAGP-[0-9]+-[A-Z]+:(.*)")))
                            @Severity = 2
                            @Type = 1
                        case "PORTTOSTP":
                            @AlertGroup = "PAGP-Port To/From STP"
                            @AlertKey = "Port: " + extract($4, "Port ([0-9]+/[0-9]+) joined bridge port [0-9]+/[0-9]+") + ", Bridge Port: " + extract($4, "Port [0-9]+/[0-9]+ joined bridge port ([0-9]+/[0-9]+)")
                            @Summary = ltrim(rtrim(extract($4, "%PAGP-[0-9]+-[A-Z]+:(.*)")))
                            #@Severity = 1
                            @Severity = 2
                            @Type = 2
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "PERUSER": ### PPP per-user configuration
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "PIM": ### Protocol-independent multicast
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "PNNI": ### Private Network-Network Interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "POSDW": ### Packet over SONET double wide PCI port adapter driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "PPP": ### Point-to-Point Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "PQUICC": ### MPC860 quad integrated communications controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "QA": ### Queue and accumulator
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "QEM": ### QEM driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "QLLC": ### Qualified Logical Link Control
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "QUICC": ### MC68360 quad integrated communications controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "QUICC_ASYNC": ### Asynchronous MC68360 quad integrated communications controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "QUICC_Ethernet": ### Ethernet MC68360 quad integrated communications controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "QUICC_SERIAL": ### Serial MC68360 quad integrated communications controller
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "RADIUS": ### Remote Access Dial-In User Service (RADIUS) facility
                    switch($3)
                    {
                        case "ALLDEADSERVER":
                            @AlertKey = extract($4, " (Id [0-9]+)\.")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "RADIX": ### Radix facility
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "RCMD": ### Remote commands
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "RIP": ### IP Routing Information Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "RPS": ### Redundant power supply
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "RSP": ### Route Switch Processor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "RSRB": ### Remote source-route bridging
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "RTT": ### Round trip time monitor
### Modified by Toby
### we need to set exceeded/below threshold mapping for generic clear.
                    #@AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")

		if (regmatch($4,"IP SLA.*:.*"))
		{
		log(WARN,"ipsla alarm")
# set alertkey to specific IP SLA
			@AlertKey = extract($4,"([^:]+):")
			if (regmatch($4,".*exceeded.*"))
			{
				@Type = 1
			} else if (regmatch($4,".*below.*"))
			{
				@Type = 2
			}
		}
		else
		{

                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
		}

                case "S4T68360": ### Four port synchronous serial adapter based on the 68360 processor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SCHED": ### Scheduler
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SDLC": ### Synchronous Data Link Control
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SDLLC": ### SDLC/Logical Link Control type 2 (LLC2) translation
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SEC": ### IP security
                    switch($3)
                    {
                        case "IPACCESSLOGS":
                            @AlertKey = extract($4, "list ([A-Z|a-z|0-9|-|_]+) ") + " - " + extract($4, " ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+) ")
                        case "IPACCESSLOGDP"|"IPACCESSLOGP":
                            @AlertKey = extract($4, "list ([A-Z|a-z|0-9|-|_]+) ") + " - " + extract($4, "ed [a-z]+ (.*) [0-9]+ packet")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "SERVICE_MODULE": ### Service Module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SGBP": ### Stack Group Bidding Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SHELF": ### Router shelf
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SLIP": ### Serial Line Internet Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SLOTDUMP": ### Slot dump
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SMF": ### Software MAC Filter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SMRP": ### Simple Multicast Routing Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SNAPSHOT": ### Snapshot dial-on-demand routing
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SNMP": ### Simple Network Management Protocol
                    switch($3)
                    {
                        case "AUTHFAIL":
                            @AlertKey = extract($4, "host (.*)$") ### Offender
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "SNMP_MGR": ### SNMP Proxy
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SONET": ### Synchronous Optical Network
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SONETMIB": ### Synchronous Optical Network Management Information Base
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SPARC": ### 3800 SPARC coprocessor subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SSE": ### Silicon switching engine
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "STANDBY": ### Hot Standby Router Protocol (HSRP)
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "STUN": ### Serial tunneling
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SUBSYS": ### Software subsystems
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SW56": ### Switch 56K
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SWITCH": ### Switch interface
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SYS": ### Operating system
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
##### Toby discarding specific noise alarms .... unqueue and run timer...
                        if(match($3,"MGDTIMER")){discard}
                        if(match($3,"NOTQ")){discard}


                case "SYSCTLR": ### System controller subsystem
                    switch($3)
                    {
                        case "SNMP_NOT_RESPONDING":
                            @AlertKey = extract($4, "(.*) not ")
                        default:
                            @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                    }
                case "SYSLOG_SERVER": ### Syslog-server file system routines
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "SYSMGT": ### System management
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TAC": ### Terminal Access Controller Protocol Access Control System
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TAGCON": ### Tag distribution and control
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TBRIDGE": ### Transparent bridging
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TCATM": ### ATM TAG control
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TCP": ### Transmission Control Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TDM": ### Time-division multiplexing
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TDP": ### Tag Distribution Protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TE_LDPB": ### Traffic engineering loop prevention
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TFIB": ### Tag Forwarding Information Base
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TI1570": ### PCI/TI1570-based ATM port adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TIB": ### Tag Information Base
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TMQ": ### Inbound terminal port queuing
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TN": ### Telnet
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TN3270": ### TN3270 protocol
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TR": ### Token Ring
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TRAFFENG": ### Traffic engineering
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TRUNK": ### E1/T1 trunk card
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TSP_TUNNEL": ### Tag switch path (TSP) tunnel
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TUN": ### Tunnel
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "TTYDRIVER": ### Router shelf asynchronous driver
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "UBR7200": ### Cable modem termination system
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "UCODE": ### Microcode
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "UNIX": ### UNIX
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "UTIL": ### Utility
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "VINES": ### Banyan VINES
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "VIP": ### Versatile Interface Processor
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "VOICE_FSM": ### MC3810 voice FSM subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "VOICE_RC": ### MC3810 voice resource subsystem
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "VPDN": ### Virtual Private Dialup Networking
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "VPM": ### Voice port module
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "VPN": ### Virtual Private Dialup Network
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "X25": ### X.25
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                case "XCPA": ### Mainframe Channel Port Adapter
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
                default:
                    @AlertKey = "clogHistoryEntry." + extract($OID1, "\.([0-9]+)$")
            }
            
### modified by Toby 
### remove type from identifier to use deduplication instead of generic clear.

           # @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager 
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager 

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.68.2": ### Cisco VLAN Membership - Notifications from CISCO-VLAN-MEMBERSHIP-MIB

    @Agent = "Cisco-VLAN Membership"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### vmVmpsChange

            ##########
            # A VMPS change notification is generated whenever vmVmpsChanges is
            # incremented. The IP address of the new VMPS is sent.
            #
            # $1 = vmVmpsIpAddress - The Ip Address of the VMPS.
            ##########

            @AlertGroup = "VMPS Change"
            @AlertKey = $1 ### vmVmpsIpAddress - The Ip Address of the VMPS.
            @Summary = "VLAN Membership Policy Server (VMPS) Change: New VmpsIpAddress = " + $1
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 
        
        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.46.2": ### Cisco VTP - Notifcations from CISCO-VTP-MIB

    @Agent = "Cisco-VTP"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### vtpConfigRevNumberError
        
            ##########
            # A configuration revision number error notification signifies that
            # a device has incremented its vtpConfigRevNumberErrors counter.
            #
            # Generation of this notification is suppressed if the
            # vtpNotificationsEnabled has the value 'false'.
            #
            # The device must throttle the generation of consecutive
            # vtpConfigRevNumberError notifications so that there is at least a
            # five-second gap between notification of this type. When
            # notifications are throttled, they are dropped, not queued for
            # sending at a future time. (Note that 'generating' a notification
            # means sending to all configured recipients.)
            #
            # $1 = managementDomainConfigRevNumber - The current Configuration
            #        Revision Number as known by the local device for this
            #        management domain.  This value is updated (if necessary)
            #        whenever a VTP advertisement is received or generated.
            #        When in the 'no management-domain' state, this value is 0.
            ##########

            @AlertGroup = "Config Revision Number"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### managementDomainIndex
            @Summary = "Configuration Revision Number Error: RevNumber = " + $1 + "  ( MgmtDomain = " + @AlertKey + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "2": ### vtpConfigDigestError
        
            ##########
            # A configuration digest error notification signifies that a device has
            # incremented its vtpConfigDigestErrors counter.
            #
            # Generation of this notification is suppressed if the
            # vtpNotificationsEnabled has the value 'false'.
            #
            # The device must throttle the generation of consecutive
            # vtpConfigDigestError notifications so that there is at least a
            # five-second gap between notification of this type. When notifications
            # are throttled, they are dropped, not queued for sending at a future
            # time. (Note that 'generating' a notification means sending to all
            # configured recipients.)
            #
            # $1 = managementDomainConfigRevNumber - (see above)
            ##########
            
            @AlertGroup = "Configuration Digest"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### managementDomainIndex
            @Summary = "Configuration Digest Error: RevNumber = " + $1 + "  ( MgmtDomain = " + @AlertKey + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "3": ### vtpServerDisabled
        
            ##########
            # A VTP Server disabled notification is generated when the local
            # system is no longer able to function as a VTP Server because the
            # number of defined VLANs is greater than vtpMaxVlanStorage.
            #
            # Generation of this notification is suppressed if the
            # vtpNotificationsEnabled has the value 'false'.
            #
            # $1 = managementDomainConfigRevNumber - (see above)
            # $2 = vtpMaxVlanStorage - An estimate of the maximum number of
            #        VLANs about which the local system can recover complete
            #        VTP information after a reboot. If the number of defined
            #        VLANs is greater than this value, then the system can not
            #        act as a VTP Server. For a device which has no means to
            #        calculate the estimated number, this value is -1.
            ##########

            @AlertGroup = "VTP Server Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### managementDomainIndex
            @Summary = "VTP Server Disabled, Defined VLANs exceeds vtpMaxVlanStorage ( " + $2 + " )  ( MgmtDomain = " + @AlertKey + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "4": ### vtpMtuTooBig
        
            ##########
            # A VTP MTU tooBig notification is generated when a VLAN's MTU size
            # is larger than can be supported either:
            #
            # - by one or more of its trunk ports:
            #   the included vtpVlanState has the value 'mtuTooBigForTrunk' and
            #   the included vlanTrunkPortManagementDomain is for the first (or
            #   only) trunk port, or
            #
            # - by the device itself:
            #   vtpVlanState has the value 'mtuTooBigForDevice' and any instance
            #   of vlanTrunkPortManagementDomain is included.
            #
            # Devices which have no trunk ports do not send vtpMtuTooBig
            # notifications.
            #
            # Generation of this notification is suppressed if the
            # vtpNotificationsEnabled has the value 'false'.
            #
            # $1 = vlanTrunkPortManagementDomain - The value of
            #        managementDomainIndex for the management domain on this
            #        trunk port. Devices which support only one management
            #        domain will support this object read-only.
            # $2 = vtpVlanState - The state of this VLAN. (see Lookup Table)
            ##########

            @AlertGroup = "VTP MTU"
            @AlertKey = extract($OID2, "\.([0-9]+\.[0-9]+)$")### managementDomainIndex.vtpVlanIndex
            switch($2)
            {
                case "1": ### operational
                    @Summary = "VLAN Operational, MTU Size OK  ( MgmtDomain.Vlan = " + @AlertKey + " )" 
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### suspended
                    @Summary = "VLAN Suspended, MTU Size Too Large  ( MgmtDomain.Vlan = " + @AlertKey + " )" 
                    @Severity = 4
                    @Type = 1
                case "3": ### mtuTooBigForDevice
                    @Summary = "VLAN's MTU Size Too Large for Device  ( MgmtDomain.Vlan = " + @AlertKey + " )" 
                    @Severity = 3
                    @Type = 1
                case "4": ### mtuTooBigForTrunk
                    @Summary = "VLAN's MTU Size Too Large for Trunk  ( MgmtDomain.Vlan = " + @AlertKey + " )" 
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager 

        case "5": ### vtpVlanRingNumberConfigConflict
        
            ##########
            # A VTP ring number configuration conflict notification is
            # generated if, and only at the time when, a device learns of a
            # conflict between:
            #
            # a) the ring number (vtpVlanPortLocalSegment) being used on a
            #    token ring segment attached to the port identified by ifIndex,
            #    and
            #
            # b) the VTP-obtained ring number (vtpVlanRingNumber) for the VLAN
            #    identified by vtpVlanIndex.
            #
            # When such a conflict occurs, the bridge port is put into an
            # administrative down position until the conflict is resolved
            # through local/network management intervention.
            #
            # This notification is only applicable to VLANs of type
            # 'tokenRing'.
            #
            # $1 = vtpVlanIndex - The VLAN-id of this VLAN on ISL trunks.
            # $2 = vtpVlanRingNumber - The ring number of this VLAN. This
            #        object is only instantiated when the value of the
            #        corresponding instance of vtpVlanType has a value of
            #        'fddi' or 'tokenRing' and Source Routing (SRB) is
            #        configured for use on this VLAN.
            # $3 = ifIndex
            # $4 = vtpVlanPortLocalSegment - The ring (segment) number in use
            #        on a 802.5 ring. For bridges supporting RFC 1525, this
            #        value is the same as given by dot1dSrPortLocalSegment for
            #        the bridge port attached to that ring. When tokenRing
            #        VLANs are in use, each 'trNet' VLAN can/does have a
            #        different instance of dot1dSrPortLocalSegment for each
            #        physical port. Note that access to the particuler instance
            #        of dot1dSrPortLocalSegment requires knowledge of how the
            #        agent supports the multiple 'contexts' required to
            #        implement RFC 1525 for multiple VLANs; also note that the
            #        assignment of ifIndex values may be different in different
            #        'contexts'.
            ##########

            @AlertGroup = "VLAN Ring Number Config"
            @AlertKey = $1 + $3
            @Summary = "VLAN ( " + $1 + " ) Ring Number ( " + $2 + " ) Conflicts with Token Ring Segment on Port " + $3
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager 

        case "6": ### vtpVersionOneDeviceDetected
        
            ##########
            # A VTP version one device detected notification is generated by a
            # device when:
            #
            # a) a management domain has been put into version 2 mode (as
            #    accessed by managementDomainVersionInUse).
            # b) 15 minutes has passed since a).
            # c) a version 1 PDU is detected on a trunk on the device that is
            #    in that management domain which has a lower revision number
            #    than the current configuration.
            #
            # $1 = vlanTrunkPortManagementDomain - The value of
            #        managementDomainIndex for the management domain on this
            #        trunk port. Devices which support only one management
            #        domain will support this object read-only.
            ##########

            @AlertGroup = "Version One Device Detected"
            @AlertKey = $1
            @Summary = "VTP ver.1 Device Detected in Management Domain " + $1
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "7": ### vlanTrunkPortDynamicStatusChange
        
            ##########
            # A vlanTrunkPortDynamicStatusChange notification is generated by a
            # device when the value of vlanTrunkPortDynamicStatus object has
            # been changed.
            #
            # $1 = vlanTrunkPortDynamicStatus - Indicates whether the specified
            #        interface is either acting as a trunk or not. This is a
            #        result of the vlanTrunkPortDynamicState and the
            #        ifOperStatus of the trunk port itself.
            ##########
        
            $vlanTrunkPortDynamicStatus = lookup($1, vlanTrunkPortDynamicStatus)
            $vlanTrunkPortIfIndex = extract($OID1, "\.([0-9]+)$")
            #details($vlanTrunkPortDynamicStatus,$vlanTrunkPortIfIndex)
            
            @AlertGroup = "Trunk Port Dynamic Status"
            @AlertKey = "vlanTrunkPortEntry." + $vlanTrunkPortIfIndex
            switch($1)
            {
                case "1": ### trunking
                    @Summary = "Trunk Port Trunking  ( " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### notTrunking
                    @Summary = "Trunk Port Not Trunking  ( " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5.14.1.1": ### CISCO ES Stack - Traps from CISCO-ES-STACK-MIB

    @Agent = "Cisco-ES Stack"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### ciscoEsStackCfgChange
        
            ##########
            # This trap is generated when there is a change in the stack
            # configuration i.e. when either a new switch is added to the stack
            # or a switch leaves a stack. ciscoEsNumSwitches indicates the
            # current number of switches which are part of the stack. The
            # management station has to  update its stack information according
            # to the stack table.
            #
            # $1 = sysName 
            # $2 = sysLocation 
            # $3 = ciscoEsNumSwitches - Total number of switches in the stack.
            ##########

            @AlertGroup = "Config Change"
            @AlertKey = ""
            @Summary = "Number of Switches in Stack Changed: NumSwitches = " + $3
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        case "2": ### ciscoEsStackProStackMatrixChange
        
            ##########
            # This trap is generated when the stack switches over from primary
            # to secondary Matrix or from secondary back to primary Matrix.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoEsProStackMatrixStatus - (see Lookup Table)
            ##########

            @AlertGroup = "Stack Matrix Status"
            @AlertKey = ""
            switch ($3)
            {
                case "1": ### primary
                    @Summary = "Active Matrix Module Switched to Primary"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### secondary
                    @Summary = "Active Matrix Module Switched to Secondary"
                    @Severity = 2
                    @Type = 1
                case "3": ### none
                    @Summary = "Active Matrix Module Status Unknown"
                    @Severity = 3
                    @Type = 1
                case "4": ### failed
                    @Summary = "Active Matrix Module Failed"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager 

        case "3": ### ciscoEsStackTempChange
        
            ##########
            # This trap is generated when the temperature in a switch exceeds
            # normal or returns to normal.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoEsStackSwitchTemperature - Temperature status of each
            #        switch.
            ##########
        
            @AlertGroup = "Stack Temperature Status"
            @AlertKey = extract($OID3, "14\.2\.1\.1\.8\.(.*)$") ### ciscoEsStackSwitchNumber.ciscoEsStackSwitchAddr
            switch ($3)
            {
                case "1": ### normal
                    @Summary = "Switch Temperature Normal  ( SwitchNumber.SwitchAddr = " + @AlertKey + " )"
                    @Severity = 2
                    #@Severity = 1
                    @Type = 2
                case "2": ### toohigh
                    @Summary = "Switch Temperature Too High  ( SwitchNumber.SwitchAddr = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "3": ### unknown
                    @Summary = "Switch Temperature Unknown  ( SwitchNumber.SwitchAddr = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager 

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.91.2": ### Cisco Entity Sensors - Notifications from CISCO-ENTITY-SENSOR-MIB

    @Agent = "Cisco-Entity Sensors"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### entSensorThresholdNotification

            ##########
            # The sensor value crossed the threshold listed in
            # entSensorThresholdTable. This notification is generated once each
            # time the sensor value crosses the threshold. The agent
            # implementation guarantees prompt, timely evaluation of threshold
            # and generation of this notification. 
            #
            # $1 = entSensorThresholdValue - This variable indicates the value
            #        of the threshold. To correctly display or interpret this
            #        variable's value, you must also know entSensorType,
            #        entSensorScale, and entSensorPrecision. However, you can
            #        directly compare entSensorValue with the threshold values
            #        given in entSensorThresholdTable without any semantic
            #        knowledge. 
            # $2 = entSensorValue - This variable reports the most recent
            #        measurement seen by the sensor. To correctly display or
            #        interpret this variable's value, you must also know
            #        entSensorType, entSensorScale, and entSensorPrecision.
            #        However, you can compare entSensorValue with the threshold
            #        values given in entSensorThresholdTable without any
            #        semantic knowledge. 
            ##########
                    
            $entSensorThresholdValue = $1
            $entSensorValue = $2
            #details($entSensorThresholdValue,$entSensorValue)

            @AlertGroup = "Sensor Threshold"
            @AlertKey = "entSensorThresholdEntry." + extract($OID1, "\.([0-9]+\.[0-9]+)$") ### entPhysicalIndex.entSensorThresholdIndex
            @Summary = "Sensor Value, " + $2 + ", Crossed Threshold, " + $1
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap 

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.56.2": ### Cisco AAA Server - Notifications from CISCO-AAA-SERVER-MIB

    @Agent = "Cisco-AAA Server"
    @Class = "40057"
    
    switch ($specific-trap)
    {
        case "1": ### casServerStateChange
        
            ##########
            # An AAA server state change notification is generated whenever
            # casState changes value.
            #
            # $1 = casState - Current state of this server.
            #
            #        up(1)   - Server responding to requests
            #        dead(2) - Server failed to respond
            #
            #        A server is marked dead if it does not respond after
            #        maximum retransmissions. A server is marked up again
            #        either after a waiting period or if some response is
            #        received from it. The initial value of casState is 'up(1)'
            #        at system re-initialization. This will only transistion to
            #        'dead(2)' if an attempt to communicate fails.
            # $2 = casPreviousStateDuration - This object provides the elapsed
            #        time the server was been in its previous state prior to
            #        the most recent transistion of casState.  This value is
            #        zero if the server has not changed state.
            # $3 = casTotalDeadTime - The total elapsed time this server's
            #        casState has had the value 'dead(2)' since system
            #        re-initialization.
            ##########

            @AlertGroup = "AAA Server Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### casProtocol.casIndex
            switch(extract(@AlertKey, "([0-9]+)\.[0-9]+$"))
            {
                case "1": ### TACACS+
                    @AlertKey = "TACACS+." + extract(@AlertKey, "\.([0-9]+)$")
                case "2": ### RADIUS
                    @AlertKey = "RADIUS." + extract(@AlertKey, "\.([0-9]+)$")
                default:
            }
            switch($1)
            {
                case "1": ### Up
                    @Summary = "AAA Server Up  ( casProtocol.casIndex = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Dead
                    @Summary = "AAA Server Down  ( casProtocol.casIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:
        
            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.71.2": ### Cisco Automatic Protection Switching (APS) - Notifications from CISCO-APS-MIB

    @Agent = "Cisco-APS"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cApsEventSwitchover

            ##########
            # A cApsEventSwitchover notification is sent when the value of an
            # instance of cApsChanStatusSwitchovers increments. 
            #
            # $1 = cApsChanStatusSwitchovers - The number of times this channel
            #        has switched to the protection line. When queried with
            #        index value cApsChanConfigNumber set to 0, which is the
            #        protection line, this object will return 0. 
            # $2 = cApsChanStatusCurrent - Indicates the current state of the
            #        port. (Bitmap)
            #        (0)lockedOut - This bit, when applied to a working
            #             channel, indicates that the channel is prevented from
            #             switching to the protection line. When applied to the
            #             null channel, this bit indicates that no working
            #             channel may switch to the protection line.
            #        (1)sd - A signal degrade condition is in effect.
            #        (2)sf - A signal failure condition is in effect.
            #        (3)switched - The switched bit is applied to a working
            #             channel if that channel is currently switched to the
            #             protection line. 
            ##########

            @AlertGroup = "Channel Switchover"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+\.[0-9]+)$") ### APS Group.Channel Number
            @Summary = "APS Group.Channel ( " + @AlertKey + " ) Switchover"
            switch($2)
            {
                case "1":
                    @Summary = @Summary + ", Channel Locked Out"
                    @Severity = 4
                    @Type = 1
                case "2":
                    @Summary = @Summary + ", Signal Degraded"
                    @Severity = 3
                    @Type = 1
                case "4":
                    @Summary = @Summary + ", Signal Failed"
                    @Severity = 4
                    @Type = 1
                case "8":
                    @Summary = @Summary + ", Manually Switched"
                    @Severity = 2
                    @Type = 1
                default:
                    @Severity = 2
                    @Type = 1
            } 
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "2": ### cApsEventModeMismatch

            ##########
            # A cApsEventModeMismatch notification is sent when the value of an
            # instance of cApsStatusModeMismatches increments. 
            #
            # $1 = cApsStatusModeMismatches - A count of Mode Mismatch
            #        conditions. 
            # $2 = cApsStatusCurrent - The current status of the APS group.
            #        (0)modeMismatch - Modes other than 1+1 unidirectional
            #             monitor protection line K2 bit 5, which indicates the
            #             architecture and K2 bits 6-8, which indicate if the
            #             mode is unidirectional or bidirectional. A conflict
            #             between the current local mode and the received K2
            #             mode information constitutes a mode mismatch.
            #        (1)channelMismatch - This bit indicates a mismatch between
            #             the transmitted K1 channel and the received K2
            #             channel has been detected.
            #        (2)psbf - This bit indicates a Protection Switch Byte
            #             Failure (PSBF) is in effect. This condition occurs
            #             when either an inconsistent APS byte or an invalid
            #             code is detected. An inconsistent APS byte occurs
            #             when no three consecutive K1 bytes of the last 12
            #             successive frames are identical, starting with the
            #             last frame containing a previously consistent byte.
            #             An invalid code occurs when the incoming K1 byte
            #             contains an unused code or a code irrelevant for the
            #             specific switching operation (e.g., Reverse Request
            #             while no switching request is outstanding) in three
            #             consecutive frames. An invalid code also occurs when
            #             the incoming K1 byte contains an invalid channel
            #             number in three consecutive frames.
            #        (3)feplf - Modes other than 1+1 unidirectional monitor the
            #             K1 byte for Far-End Protection-Line failures. A
            #             Far-End Protection-Line defect is declared based on
            #             receiving SF on the protection line.
            #        (4)extraTraffic - This bit indicates whether extra traffic
            #             is currently being accepted on the protection line. 
            ##########

            @AlertGroup = "APS Group Mode"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)$") ### APS Group
            @Summary = "APS Group ( " + @AlertKey + " ) Mode Mismatch"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "3": ### cApsEventChannelMismatch

            ##########
            # A cApsEventChannelMismatch notification is sent when the value of
            # an instance of cApsStatusChannelMismatches increments. 
            #
            # $1 = cApsStatusChannelMismatches - A count of Channel Mismatch
            #        conditions. 
            # $2 = cApsStatusCurrent - The current status of the APS group.
            #        (0)modeMismatch - Modes other than 1+1 unidirectional
            #             monitor protection line K2 bit 5, which indicates the
            #             architecture and K2 bits 6-8, which indicate if the
            #             mode is unidirectional or bidirectional. A conflict
            #             between the current local mode and the received K2
            #             mode information constitutes a mode mismatch.
            #        (1)channelMismatch - This bit indicates a mismatch between
            #             the transmitted K1 channel and the received K2
            #             channel has been detected.
            #        (2)psbf - This bit indicates a Protection Switch Byte
            #             Failure (PSBF) is in effect. This condition occurs
            #             when either an inconsistent APS byte or an invalid
            #             code is detected. An inconsistent APS byte occurs
            #             when no three consecutive K1 bytes of the last 12
            #             successive frames are identical, starting with the
            #             last frame containing a previously consistent byte.
            #             An invalid code occurs when the incoming K1 byte
            #             contains an unused code or a code irrelevant for the
            #             specific switching operation (e.g., Reverse Request
            #             while no switching request is outstanding) in three
            #             consecutive frames. An invalid code also occurs when
            #             the incoming K1 byte contains an invalid channel
            #             number in three consecutive frames.
            #        (3)feplf - Modes other than 1+1 unidirectional monitor the
            #             K1 byte for Far-End Protection-Line failures. A
            #             Far-End Protection-Line defect is declared based on
            #             receiving SF on the protection line.
            #        (4)extraTraffic - This bit indicates whether extra traffic
            #             is currently being accepted on the protection line. 
            ##########

            @AlertGroup = "APS Group Channel"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)$") ### APS Group
            @Summary = "APS Group ( " + @AlertKey + " ) Channel Mismatches"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "4": ### cApsEventPSBF

            ##########
            # An cApsEventPSBF notification is sent when the value of an
            # instance of cApsStatusPSBFs increments. 
            #
            # $1 = cApsStatusPSBFs - A count of Protection Switch Byte Failure
            #        conditions. This condition occurs when either an
            #        inconsistent APS byte or an invalid code is detected. An
            #        inconsistent APS byte occurs when no three consecutive K1
            #        bytes of the last 12 successive frames are identical,
            #        starting with the last frame containing a previously
            #        consistent byte. An invalid code occurs when the incoming
            #        K1 byte contains an unused code or a code irrelevant for
            #        the specific switching operation (e.g., Reverse Request
            #        while no switching request is outstanding) in three
            #        consecutive frames. An invalid code also occurs when the
            #        incoming K1 byte contains an invalid channel number in
            #        three consecutive frames. 
            # $2 = cApsStatusCurrent - The current status of the APS group.
            #        (0)modeMismatch - Modes other than 1+1 unidirectional
            #             monitor protection line K2 bit 5, which indicates the
            #             architecture and K2 bits 6-8, which indicate if the
            #             mode is unidirectional or bidirectional. A conflict
            #             between the current local mode and the received K2
            #             mode information constitutes a mode mismatch.
            #        (1)channelMismatch - This bit indicates a mismatch between
            #             the transmitted K1 channel and the received K2
            #             channel has been detected.
            #        (2)psbf - This bit indicates a Protection Switch Byte
            #             Failure (PSBF) is in effect. This condition occurs
            #             when either an inconsistent APS byte or an invalid
            #             code is detected. An inconsistent APS byte occurs
            #             when no three consecutive K1 bytes of the last 12
            #             successive frames are identical, starting with the
            #             last frame containing a previously consistent byte.
            #             An invalid code occurs when the incoming K1 byte
            #             contains an unused code or a code irrelevant for the
            #             specific switching operation (e.g., Reverse Request
            #             while no switching request is outstanding) in three
            #             consecutive frames. An invalid code also occurs when
            #             the incoming K1 byte contains an invalid channel
            #             number in three consecutive frames.
            #        (3)feplf - Modes other than 1+1 unidirectional monitor the
            #             K1 byte for Far-End Protection-Line failures. A
            #             Far-End Protection-Line defect is declared based on
            #             receiving SF on the protection line.
            #        (4)extraTraffic - This bit indicates whether extra traffic
            #             is currently being accepted on the protection line. 
            ##########

            @AlertGroup = "APS Group PSBF"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)$") ### APS Group
            @Summary = "APS Group ( " + @AlertKey + " ) Protection Switch Byte Failure"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "5": ### cApsEventFEPLF

            ##########
            # An cApsEventFEPLFs notification is sent when the value of an
            # instance of cApsStatusFEPLFs increments. 
            #
            # $1 = cApsStatusFEPLFs - A count of Far-End Protection-Line
            #        Failure conditions. This condition is declared based on
            #        receiving SF on the protection line in the K1 byte. 
            # $2 = cApsStatusCurrent - The current status of the APS group.
            #        (0)modeMismatch - Modes other than 1+1 unidirectional
            #             monitor protection line K2 bit 5, which indicates the
            #             architecture and K2 bits 6-8, which indicate if the
            #             mode is unidirectional or bidirectional. A conflict
            #             between the current local mode and the received K2
            #             mode information constitutes a mode mismatch.
            #        (1)channelMismatch - This bit indicates a mismatch between
            #             the transmitted K1 channel and the received K2
            #             channel has been detected.
            #        (2)psbf - This bit indicates a Protection Switch Byte
            #             Failure (PSBF) is in effect. This condition occurs
            #             when either an inconsistent APS byte or an invalid
            #             code is detected. An inconsistent APS byte occurs
            #             when no three consecutive K1 bytes of the last 12
            #             successive frames are identical, starting with the
            #             last frame containing a previously consistent byte.
            #             An invalid code occurs when the incoming K1 byte
            #             contains an unused code or a code irrelevant for the
            #             specific switching operation (e.g., Reverse Request
            #             while no switching request is outstanding) in three
            #             consecutive frames. An invalid code also occurs when
            #             the incoming K1 byte contains an invalid channel
            #             number in three consecutive frames.
            #        (3)feplf - Modes other than 1+1 unidirectional monitor the
            #             K1 byte for Far-End Protection-Line failures. A
            #             Far-End Protection-Line defect is declared based on
            #             receiving SF on the protection line.
            #        (4)extraTraffic - This bit indicates whether extra traffic
            #             is currently being accepted on the protection line. 
            ##########

            @AlertGroup = "APS Group FEPLF"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)$") ### APS Group
            @Summary = "APS Group ( " + @AlertKey + " ) Far-End Protection-Line Failure"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.163.2": ### Cisco Call Progress and Status Tracking - Notifications from CISCO-CALL-TRACKER-MIB

    @Agent = "Cisco-Call Tracker"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cctCallSetupNotification

            ##########
            # A Call Tracker Setup notification is generated whenever a new
            # active call entry is created in the cctActiveTable. 
            #
            # $1 = cctActiveSetupTime - Value of sysUpTime when the call is
            #        first made known to the system. 
            # $2 = cctActiveCalledPartyId - The called telephone number for
            #        this call. For calls answered by the system, this
            #        corresponds to the Dialed Number Identification (DNIS).
            #        For calls originated by the system, this is the
            #        destination number. If not available this is a zero-length
            #        string. 
            # $3 = cctActiveCallingPartyId - The calling telephone number for
            #        this call. For calls answered by the system, this
            #        corresponds to the calling identification (CLID). For
            #        calls originated by the system, this is the number
            #        associated with the device. For the interworking call,
            #        this object contains the translated calling party number
            #        if there is a translation rule is associated with dial
            #        plan for making this outgoing call. If not available this
            #        is a zero-length string. 
            # $4 = cctActiveCallCategory - The call category or type.
            ##########

            @AlertGroup = "Call Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### cctActiveCallId
            @Summary = "Call Setup: Call Catagory = " + lookup($4, CctCallCategory) + ", Calling Party = " + $3 + ", Called Party = " + $2
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cctCallTerminateNotification

            ##########
            # A Call Tracker Terminate notification is generated whenever a new
            # history call entry is created in the cctHistoryTable. 
            #
            # $1 = cctHistoryCallId - The call identifier for the call. This is
            #        the same value assigned to the call in cctActiveCallId
            #        when it was in the cctActiveTable. It is possible for two
            #        cctHistoryEntry entries to have the same cctHistoryCallId
            #        if one very long running call terminates after the
            #        cctActiveCallId has wrapped around and is reassigned to a
            #        new short lived call. 
            ##########

            @AlertGroup = "Call Status"
            @AlertKey = $1
            @Summary = "Call Terminated"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.156.2": ### Cisco CallManager - Notifications from CISCO-CCM-MIB

    @Agent = "Cisco-CallManager"
    @Class = "40057"

    ##########
    # NOTE: All Cisco CallManager Traps contain the following variable binding:
    #
    # $1 = ccmAlarmSeverity - The Alarm Severity code.
    #        (1)emergency: System unusable
    #        (2)alert: Immediate response needed
    #        (3)critical: Critical condition
    #        (4)error: Error condition
    #        (5)warning: Warning condition
    #        (6)notice: Normal but significant condition
    #        (7)informational: Informational situation. 
    ##########
    
    switch($1)
    {
        case "1": ### emergency
            @Severity = 5
            @Type = 1
        case "2": ### alert
            @Severity = 5
            @Type = 1
        case "3": ### critical
            @Severity = 4
            @Type = 1
        case "4": ### error
            @Severity = 3
            @Type = 1
        case "5": ### warning
            @Severity = 2
            @Type = 1
        case "6": ### notice
            #@Severity = 1
            @Severity = 2
            @Type = 2
        case "7": ### informational
            #@Severity = 1
            @Severity = 2
            @Type = 1
        default:
            @Severity = 2
            @Type = 1
    }
    
    switch ($specific-trap)
    {
        case "1": ### ccmCallManagerFailed

            ##########
            # This Notification signifies that the CallManager process detects
            # a failure in one of its critical subsystems. It can also be
            # detected from a heartbeat/event monitoring process.
            #
            # $2 = ccmFailCauseCode - The Cause code of the failure. This cause
            #        is derived from a monitoring thread in the CallManager or
            #        from a heartbeat monitoring process. (see lookup table for
            #        more #details)
            ##########

            @AlertGroup = "CallManager Status"
            @AlertKey = ""
            @Summary = "Subsystem Failure: " + lookup($2, ccmFailCauseCode)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ccmPhoneFailed

            ##########
            # This Notification indicates that within the time interval
            # specified in ccmPhoneFailedAlarmInterval, at least one phone has
            # attempted to register or communicate with the CallManager and
            # failed.
            #
            # $2 = ccmPhoneFailures - The count of the phone initialization or
            #        communication failures that are stored in the
            #        ccmPhoneFailedTable object.
            ##########

            @AlertGroup = "Phone Status"
            @AlertKey = ""
            @Summary = "At Least One Phone Failed to Register or Communicate with CallManager"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### ccmPhoneStatusUpdate

            ##########
            # This Notification indicates that within the time interval
            # specified in ccmPhoneStatusUpdateAlarmInterv, at least one phone
            # has successfully registered with the CallManager or has lost
            # contact with the CallManager.
            #
            # $2 = ccmPhoneUpdates - The count of the phone status changes that
            #        are stored in the ccmPhoneStatusUpdateTable object.
            ##########

            @AlertGroup = "Phone Status"
            @AlertKey = ""
            @Summary = "At Least One Phone Successfully Registered with CallManager"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### ccmGatewayFailed

            ##########
            # This Notification indicates that at least one gateway has
            # attempted to register or communicate with the CallManager and
            # failed.
            #
            # $2 = ccmGatewayName - This is the Gateway name assigned to the
            #        Gateway in the CallManager. This name is assigned when a
            #        new device of type Gateway is added to the CallManager.
            # $3 = ccmGatewayInetAddressType - Represents the type of address
            #        stored in ccmGatewayInetAddress.
            # $4 = ccmGatewayInetAddress - The last known IP Address of the
            #        gateway. A value of all zeros indicates that the IP
            #        Address is not available.
            # $5 = ccmGatewayFailCauseCode - States the reason for a gateway
            #        device communication error.
            ##########

            @AlertGroup = "Gateway Status"
            @AlertKey = extract($OID2, "\.([0-9]+)$") ### ccmGatewayIndex
            @Summary = "Gateway " + $2 + " Failed to Communicate with CallManager, " + lookup($5, CcmDevFailCauseCode)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + @Agent + " " + @Manager

        case "5": ### ccmMediaResourceListExhausted

            ##########
            # This Notification indicates that the CallManager has run out a
            # certain specified type of resource.
            #
            # $2 = ccmMediaResourceType - Resource Types in a CallManager
            #        System. unknown: Unknown resource type mediaTerminationPoint: Media Termination Point transcoder: Transcoder conferenceBridge: Conference Bridge musicOnHold: Music On Hold.
            # $3 = ccmMediaResourceListName - The name of a Media Resource
            #        List. This name is assigned when a new Media Resource List
            #        is added to the CallManager.
            ##########

            @AlertGroup = "Media Resource"
            @AlertKey = $3
            @Summary = "CallManager Resource List ( " + $3 + " ) Exhausted " + lookup($2, ccmMediaResourceType)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "6": ### ccmRouteListExhausted

            ##########
            # This Notification indicates that the CallManager could not find
            # an available route in the indicated route list.
            #
            # $2 = ccmRouteListName - The name of a Route List. This name is
            #        assigned when a new Route List is added to the
            #        CallManager.
            ##########

            @AlertGroup = "Route List"
            @AlertKey = $2
            @Summary = "CallManager Could Not Find Available Route in Route List " + $2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "7": ### ccmGatewayLayer2Change

            ##########
            # This Notification is sent when the D-Channel/Layer 2 of an
            # interface in a skinny gateway that has registered with the
            # CallManager changes state.
            #
            # $2 = ccmGatewayName - This is the Gateway name assigned to the
            #        Gateway in the CallManager. This name is assigned when a
            #        new device of type Gateway is added to the CallManager.
            # $3 = ccmGatewayInetAddressType - Represents the type of address
            #        stored in ccmGatewayInetAddress.
            # $4 = ccmGatewayInetAddress - The last known IP Address of the
            #        gateway. A value of all zeros indicates that the IP
            #        Address is not available.
            # $5 = ccmGatewayPhysIfIndex - This object is the identifier of an
            #        interface in a gateway that has registered with the local
            #        CallManager. On a DS1/E1 interface, this should be the
            #        same as the ifIndex value in the gateway.
            # $6 = ccmGatewayPhysIfL2Status - The layer 2 status of a physical
            #        interface in a gateway that has registered with the local
            #        CallManager.
            #        (1)unknown: Unknown status
            #        (2)up: Interface is up
            #        (3)down: Interface is down
            ##########

            @AlertGroup = "Gateway L2 Status"
            @AlertKey = extract($OID2, "\.([0-9]+)$") + "." + $5 ### ccmGatewayIndex.ccmGatewayPhysIfIndex
            switch($6)
            {
                case "1": ### Unknown Status
                    @Summary = "D-Channel/Layer 2 of ccmGatewayPhysIfIndex " + $5 + " in Gateway " + $2 + " is Unknown"
                case "2": ### Interface is Up
                    @Summary = "D-Channel/Layer 2 of ccmGatewayPhysIfIndex " + $5 + " in Gateway " + $2 + " is Up"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### Interface is Down
                    @Summary = "D-Channel/Layer 2 of ccmGatewayPhysIfIndex " + $5 + " in Gateway " + $2 + " is Down"
                default:
                    @Summary = "D-Channel/Layer 2 of ccmGatewayPhysIfIndex " + $5 + " in Gateway " + $2 + " is Unknown"
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $6 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.178.2": ### Cisco Content Engine - Notifications from CISCO-CONTENT-ENGINE-MIB

    @Agent = "Cisco-Content Engine"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoContentEngineReadDiskError

            ##########
            # First read error occurred on the disk that is being accessed.
            # Additional information about the error is logged to syslog.
            ##########

            @AlertGroup = "Disk Status"
            @AlertKey = ""
            @Summary = "Read Error on Accessed Disk"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ciscoContentEngineWriteDiskError

            ##########
            # First write error occurred on the disk that is being accessed.
            # Additional information about the error is logged to syslog.
            ##########

            @AlertGroup = "Disk Status"
            @AlertKey = ""
            @Summary = "Write Error on Accessed Disk"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### ciscoContentEngineWriteTransFailed

            ##########
            # Failed writing to working transaction log located in
            # /local1/working.log. Possible causes are system errors or the log
            # having been removed.
            ##########

            @AlertGroup = "Log Status"
            @AlertKey = ""
            @Summary = "Failed Writing to Working Transaction Log, /local1/working.log"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### ciscoContentEngineDataDiskFailed

            ##########
            # A Content Engine data drive failed. Additional information about
            # the error is logged to syslog.
            ##########

            @AlertGroup = "Disk Status"
            @AlertKey = ""
            @Summary = "Content Engine Data Drive Failed"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### ciscoContentEngineOverloadBypass

            ##########
            # A high watermark of percentage of capacity for transparent
            # requests redirected to the Content Engine via WCCP (Web Cache
            # Control Protocol) has been reached. Subsequent WCCP requests are
            # rejected and forwarded to the Origin Server until the utilization
            # falls below a low watermark.
            ##########

            @AlertGroup = "Content Engine Load"
            @AlertKey = ""
            @Summary = "Content Engine Overload Bypass, WCCP Requests are Rejected"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.99999.2": ### Cisco Content Network - Notifications from CISCO-CONTENT-NETWORK-MIB

    @Agent = "Cisco-Content Network"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ccnNotifServerStart

            ##########
            # The servers on this device are being started.
            ##########

            @AlertGroup = "Server Status"
            @AlertKey = ""
            @Summary = "Servers on Device are being Started"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ccnNotifServerStop

            ##########
            # The servers on this device are being stopped.
            ##########

            @AlertGroup = "Server Status"
            @AlertKey = ""
            @Summary = "Servers on Device are being Stopped"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.59.2": ### Cisco Data Over Cable Service Remote Query - Notifications from CISCO-DOCS-REMOTE-QUERY-MIB

    @Agent = "Cisco-DOCS Remote Query"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cdrqCmtsCmRQDoneNotification

            ##########
            # This notification is sent when CMTS CM Poller finished polling
            # for the current cycle. The cdrqCmtsCmPollerStartTime is the time
            # when the polling cycle started. The cdrqCmtsCmPollerStopTime is
            # the time when the polling cycle finished.
            #
            # $1 = cdrqCmtsCmPollerStartTime - The value of sysUpTime when the
            #        last polling cycle started. cdrqCmtsCmPollerStartTime is
            #        set to 0 when the CMTS is first restarted and doesn't get
            #        reset after the poller is disabled.
            # $2 = cdrqCmtsCmPollerStopTime - The value of sysUpTime when the
            #        last polling cycle finished. cdrqCmtsCmPollerStopTime is
            #        set to 0 when the CMTS is first restarted and doesn't get
            #        reset after the poller is disabled.
            ##########

            @AlertGroup = "Remote Query Status"
            @AlertKey = ""
            @Summary = "CMTS CM Poller Finished Polling for Current Cycle"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.138.2": ### Cisco Physical Entity Alarm Monitoring - Notifications from CISCO-ENTITY-ALARM-MIB

    @Agent = "Cisco-Entity Alarm"
    @Class = "40057"
    
    ##########
    # NOTE: All Cisco Physical Entity Alarm Monitoring traps contain the
    # following variable bindings:
    #
    # $1 = ceAlarmHistEntPhysicalIndex - This object specifies the physical
    #        entity that generated the alarm.
    # $2 = ceAlarmHistAlarmType - This object specifies the type of alarm
    #        generated.
    # $3 = ceAlarmHistSeverity - This object specifies the severity of the
    #        alarm generated.
    # $4 = ceAlarmHistTimeStamp - This object specifies the value of the
    #        sysUpTime object at the time the alarm was generated.
    ##########
    
    switch($3)
    {
        case "1": ### critical
            @Severity = 5
        case "2": ### major
            @Severity = 4
        case "3": ### minor
            @Severity = 3
        case "4": ### info
            @Severity = 2
        default:
            @Severity = 2
    }
    
    switch ($specific-trap)
    {
        case "1": ### ceAlarmAsserted

            ##########
            # The agent generates this trap when a physical entity asserts an
            # alarm.
            ##########

            @AlertGroup = "Entity Alarm"
            @AlertKey = $1
            @Summary = "Physical Entity Alarm  ( ceAlarmHistEntPhysicalIndex = " + $1 + ", ceAlarmHistAlarmType = " + $2 + " )"
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ceAlarmCleared

            ##########
            # The agent generates this trap when a physical entity clears a
            # previously asserted alarm.
            ##########

            @AlertGroup = "Entity Alarm"
            @AlertKey = $1
            @Summary = "Physical Entity Alarm Cleared  ( ceAlarmHistEntPhysicalIndex = " + $1 + ", ceAlarmHistAlarmType = " + $2 + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.117.2": ### Cisco Field Replaceable Units (FRUs) - Notifications from CISCO-ENTITY-FRU-CONTROL-MIB

    @Agent = "Cisco-FRUs"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cefcModuleStatusChange

            ##########
            # This notification is generated when the value of
            # cefcModuleOperStatus changes. It can be utilized by an NMS to
            # update the status of the module it is managing. 
            #
            # $1 = cefcModuleOperStatus - This object shows the module's
            #        operational state.
            # $2 = cefcModuleStatusLastChangeTime - The value of sysUpTime at
            #        the time the cefcModuleOperStatus is changed. 
            ##########

            $cefcModuleOperStatus = lookup($1, ModuleOperType) + " ( " + $1 + " )"
            $cefcModuleStatusLastChangeTime = $2
            #details($cefcModuleOperStatus,$cefcModuleStatusLastChangeTime)

            @AlertGroup = "Module Status"
            @AlertKey = "cefcModuleEntry." + extract($OID1, "\.([0-9]+)$")
            switch($1)
            {
                case "1": ### unknown - Module is not in one of other states.
                    @Summary = "Module Status Unknown"
                    @Severity = 2
                    @Type = 1
                case "2": ### ok - Module is operational.
                    @Summary = "Module Operational"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### disabled - Module is administratively disabled.
                    @Summary = "Module Administratively Disabled"
                    @Severity = 2
                    @Type = 1
                case "4": ### okButDiagFailed - Module is operational but there is some diagnostic information available.
                    @Summary = "Module Operational, but Failed Diagnostics"
                    @Severity = 2
                    @Type = 1
                case "5": ### boot - Module is currently in the process of bringing up image.  After boot, it starts its operational software and transitions to the appropriate state.
                    @Summary = "Module Booting, Bringing Up Image"
                    @Severity = 2
                    @Type = 1
                case "6": ### selfTest - Module is performing selfTest.
                    @Summary = "Module Performing Self-Test"
                    @Severity = 2
                    @Type = 1
                case "7": ### failed - Module has failed due to some condition not stated above.
                    @Summary = "Module Failed"
                    @Severity = 4
                    @Type = 1
                case "8": ### missing - Module has been provisioned, but it is missing.
                    @Summary = "Module Provisioned, but Missing"
                    @Severity = 3
                    @Type = 1
                case "9": ### mismatchWithParent - Module is not compatible with parent entity. Module has not been provisioned and wrong type of module is plugged in. This state can be cleared by plugging in the appropriate module.
                    @Summary = "Module Not Compatible with Parent"
                    @Severity = 3
                    @Type = 1
                case "10": ### mismatchConfig - Module is not compatible with the current configuration. Module was correctly provisioned earlier, however the module was replaced by an incompatible module. This state can be resolved by clearing the configuration, or replacing with the appropriate module.
                    @Summary = "Module Not Compatible with Current Configuration"
                    @Severity = 3
                    @Type = 1
                case "11": ### diagFailed - Module diagnostic test failed due to some hardware failure.
                    @Summary = "Module Diagnostic Test Failed, Hardware Failure"
                    @Severity = 3
                    @Type = 1
                case "12": ### dormant - Module is waiting for an external or internal event to become operational.
                    @Summary = "Module Dormant, Waiting for External or Internal Event"
                    @Severity = 2
                    @Type = 1
                case "13": ### outOfServiceAdmin - module is administratively set to be powered on but out of service.
                    @Summary = "Module Out of Service, Administratively"
                    @Severity = 2
                    @Type = 1
                case "14": ### outOfServiceEnvTemp - Module is powered on but out of service, due to environmental temperature problem. An out-o-service module consumes less power thus will cool down the board.
                    @Summary = "Module Out Of Service, Environmental Temperature Problem"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cefcPowerStatusChange

            ##########
            # The cefcFRUPowerStatusChange notification indicates that the
            # power status of a FRU has changed. The varbind for this
            # notification indicates the entPhysicalIndex of the FRU, and the
            # new operational-status of the FRU.
            #
            # $1 = cefcFRUPowerOperStatus - Operational FRU power state.
            # $2 = cefcFRUPowerAdminStatus - Administratively desired FRU power
            #        state.
            ##########

            $cefcFRUPowerOperStatus = lookup($1, PowerOperType) + " ( " + $1 + " )"
            $cefcFRUPowerAdminStatus = lookup($2, PowerAdminType) + " ( " + $2 + " )"
            #details($cefcFRUPowerOperStatus,$cefcFRUPowerAdminStatus)

            @AlertGroup = "FRU Power Status"
            @AlertKey = "cefcFRUPowerStatusEntry." + extract($OID1, "\.([0-9]+)$")
            switch($1)
            {
                case "1": ### offEnvOther - FRU is powered off because of a problem not listed below.
                    @Summary = "FRU Powered Off"
                    @Severity = 4
                    @Type = 1
                case "2": ### on - FRU is powered on.
                    @Summary = "FRU Powered On"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### offAdmin - Administratively off.
                    @Summary = "FRU Administratively Powered Off"
                    @Severity = 2
                    @Type = 1
                case "4": ### offDenied - FRU is powered off because available system power is insufficient.
                    @Summary = "FRU Powered Off, Insufficient System Power"
                    @Severity = 4
                    @Type = 1
                case "5": ### offEnvPower - FRU is powered off because of power problem in the FRU.  for example, the FRU's power translation (DC-DC converter) or distribution failed.
                    @Summary = "FRU Powered Off, Internal Power Problem"
                    @Severity = 4
                    @Type = 1
                case "6": ### offEnvTemp - FRU is powered off because of temperature problem.
                    @Summary = "FRU Powered Off, Temperature Problem"
                    @Severity = 4
                    @Type = 1
                case "7": ### offEnvFan - FRU is powered off because of fan problems.
                    @Summary = "FRU Powered Off, Fan Problem"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### cefcFRUInserted

            ##########
            # The cecfFRUInserted notification indicates that a FRU was
            # inserted. The varbind for this notification indicates the
            # entPhysicalIndex of the inserted FRU, and the entPhysicalIndex of
            # the FRU's container.
            #
            # $1 = entPhysicalContainedIn - The value of entPhysicalIndex for
            #        the physical entity which 'contains' this physical entity.
            #        A value of zero indicates this physical entity is not
            #        contained in any other physical entity.  Note that the set
            #        of 'containment' relationships define a strict hierarchy;
            #        that is, recursion is not allowed. In the event a physical
            #        entity is contained by more than one physical entity
            #        (e.g., double-wide modules), this object should identify
            #        the containing entity with the lowest value of
            #        entPhysicalIndex.
            ##########

            $entPhysicalContainedIn = $1
            #details($entPhysicalContainedIn)

            @AlertGroup = "FRU Insert/Remove"
            @AlertKey = "entPhysicalEntry." + extract($OID1, "\.([0-9]+)$")
            @Summary = "FRU Inserted into entPhysicalEntry." + $1 + "  ( " + @AlertKey + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

        case "4": ### cefcFRURemoved

            ##########
            # The cefcFRURemoved notification indicates that a FRU was removed.
            # The varbind for this notification indicates the entPhysicalIndex
            # of the removed FRU, and the entPhysicalIndex of the FRU's
            # container.
            #
            # $1 = entPhysicalContainedIn - The value of entPhysicalIndex for
            #        the physical entity which 'contains' this physical entity.
            #        A value of zero indicates this physical entity is not
            #        contained in any other physical entity.  Note that the set
            #        of 'containment' relationships define a strict hierarchy;
            #        that is, recursion is not allowed. In the event a physical
            #        entity is contained by more than one physical entity
            #        (e.g., double-wide modules), this object should identify
            #        the containing entity with the lowest value of
            #        entPhysicalIndex.
            ##########

            $entPhysicalContainedIn = $1
            #details($entPhysicalContainedIn)

            @AlertGroup = "FRU Insert/Remove"
            @AlertKey = "entPhysicalEntry." + extract($OID1, "\.([0-9]+)$")
            @Summary = "FRU Removed from entPhysicalEntry." + $1 + "  ( " + @AlertKey + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

        case "5": ### cefcUnrecognizedFRU

            ##########
            # The cefcUnrecognizedFRU notification indicates that a FRU was
            # inserted whose product ID is not supported. The varbind for this
            # notification indicates the entPhysicalIndex of the inserted FRU,
            # the entPhysicalClass this FRU belongs to, the
            # entPhysicalVendorType of this FRU, the entPhysicalName of the
            # FRU, the entPhysicalModelName of the inserted FRU, and the
            # cefcPhysicalStatus telling the reason code for sending this
            # notification. 
            #
            # $1 = entPhysicalClass - An indication of the general hardware
            #        type of the physical entity. An agent should set this
            #        object to the standard enumeration value which most
            #        accurately indicates the general class of the physical
            #        entity, or the primary class if there is more than one. If
            #        no appropriate standard registration identifier exists for
            #        this physical entity, then the value 'other(1)' is
            #        returned. If the value is unknown by this agent, then the
            #        value 'unknown(2)' is returned.
            # $2 = entPhysicalVendorType - An indication of the vendor-specific
            #        hardware type of the physical entity. Note that this is
            #        different from the definition of MIB-II's sysObjectID. An
            #        agent should set this object to a enterprise-specific
            #        registration identifier value indicating the specific
            #        equipment type in detail. The associated instance of
            #        entPhysicalClass is used to indicate the general type of
            #        hardware device. If no vendor-specific registration
            #        identifier exists for this physical entity, or the value
            #        is unknown by this agent, then the value { 0 0 } is
            #        returned.
            # $3 = entPhysicalName - The textual name of the physical entity.
            #        The value of this object should be the name of the
            #        component as assigned by the local device and should be
            #        suitable for use in commands entered at the device's
            #        `console'. This might be a text name, such as `console' or
            #        a simple component number (e.g., port or module number),
            #        such as `1', depending on the physical component naming
            #        syntax of the device. If there is no local name, or this
            #        object is otherwise not applicable, then this object
            #        contains a zero-length string. Note that the value of
            #        entPhysicalName for two physical entities will be the same
            #        in the event that the console interface does not
            #        distinguish between them, e.g., slot-1 and the card in
            #        slot-1.
            # $4 = entPhysicalModelName - The vendor-specific model name
            #        identifier string associated with this physical component.
            #        The preferred value is the customer-visible part number,
            #        which may be printed on the component itself. If the model
            #        name string associated with the physical component is
            #        unknown to the agent, then this object will contain a
            #        zero-length string.
            # $5 = cefcPhysicalStatus - The status of this physical entity.
            #        other(1) - the status is not any of the listed below.
            #        supported(2) - this entity is supported.
            #        unsupported(3) - this entity is unsupported.
            #        incompatible(4) - this entity is incompatible.
            #
            #        It would be unsupported(3), if the ID read from Serial
            #        EPROM is not supported. It would be incompatible(4), if in
            #        the present configuration this FRU is not supported. 
            ##########

            $entPhysicalClass = lookup($1, PhysicalClass)
            $entPhysicalVendorType = $2
            $entPhysicalName = $3
            $entPhysicalModelName = $4
            $cefcPhysicalStatus = lookup($5, cefcPhysicalStatus) + " ( " + $5 + " )"
            
            @AlertGroup = "FRU Insert/Remove"
            @AlertKey = "cefcPhysicalEntry." + extract($OID5, "\.([0-9]+)$")
            @Summary = $entPhysicalClass + " FRU Inserted, Product ID Not Supported  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            $entPhysicalClass = $entPhysicalClass + " ( " + $1 + " )"
            #details($entPhysicalClass,$entPhysicalVendorType,$entPhysicalName,$entPhysicalModelName,$cefcPhysicalStatus)

        case "6": ### cefcFanTrayStatusChange

            ##########
            # This notification is generated when the value of
            # cefcModuleOperStatus changes. 
            #
            # $1 = cefcFanTrayOperStatus - The operational Fan Tray state.
            #        unknown(1) - Fan Tray state unknown.
            #        up(2) - Fan Tray is powered on.
            #        down(3) - Fan Tray is powered down. 
            ##########

            $cefcFanTrayOperStatus = lookup($1, cefcFanTrayOperStatus) + " ( " + $1 + " )"
            #details($cefcFanTrayOperStatus)

            @AlertGroup = "Fan Tray Status"
            @AlertKey = "cefcFanTrayStatusEntry." + extract($OID1, "\.([0-9]+)$")
            switch($1)
            {
                case "1": ### unknown - Fan Tray state unknown.
                    @Summary = "Fan Tray Status Unknown"
                    @Severity = 2
                    @Type = 1
                case "2": ### up - Fan Tray is powered on.
                    @Summary = "Fan Tray Powered On"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### down - Fan Tray is powered down.
                    @Summary = "Fan Tray Powered Down"
                    @Severity = 4
                    @Type = 1
                default:
                    @Summary = "Fan Tray Status Unknown"
                    @Severity = 2
                    @Type = 1
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.147.2": ### Cisco Firewall - Notifications from CISCO-FIREWALL-MIB

    @Agent = "Cisco-Firewall"
    @Class = "40057"
    
    ##########
    # NOTE: All Cisco Firewall traps contain the following variable bindings.
    #
    # $1 = cfwBasicEventTime - The time that the event occurred.
    # $3 = cfwBasicEventDescription - A description of the event. The value of
    #        the object may be a zero-length string.
    # $4 = cfwBasicEventDetailsTableRow - A pointer to a row in the table
    #        containing #details about this event. Generally, the table will be
    #        the cfwNetEventsTable but a Cisco-defined table may also appear
    #        here. If there there is no more detailed information for this
    #        event the value of this object will have the value {0 0}.
    ##########

    switch ($specific-trap)
    {
        case "2": ### cfwSecurityNotification

            ##########
            # This notification is used for events involving security events.
            # The included objects provide more detailed information about the
            # event.
            #
            # $2 = cfwBasicSecurityEventType - The type of security-related
            #        event that this row contains. If the event is not
            #        security-related this object will not be instantiated.
            ##########

            @AlertGroup = "FW-Security"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "FIREWALL: " + lookup($2, SecurityEvent) + "  (see Details)"
            switch($2)
            {
                case "2"|"9":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
                    @Severity = 4
                    @Type = 1
            }
            $cfwBasicEventDescription = $3
            $cfwBasicEventDetailsTableRow = $4
            #details($cfwBasicEventDescription, $cfwBasicEventDetailsTableRow)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "3": ### cfwContentInspectNotification

            ##########
            # This notification is used to notify the NMS of content inspection
            # events. The included objects provide more detailed information
            # about the event.
            #
            # $2 = cfwBasicContentInspEventType - The type of content
            #        inspection-related event that this row contains. If the
            #        event is not content inspection-related this object will
            #        not be instantiated.
            ##########

            @AlertGroup = "FW-Content Inspection"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "FIREWALL: " + lookup($2, ContentInspectionEvent) + "  (see Details)"
            switch($2)
            {
                case "2":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
                    @Severity = 4
                    @Type = 1
            }
            $cfwBasicEventDescription = $3
            $cfwBasicEventDetailsTableRow = $4
            #details($cfwBasicEventDescription, $cfwBasicEventDetailsTableRow)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "4": ### cfwConnNotification

            ##########
            # This notification is used to notify the NMS of
            # connection-oriented events. The included objects provide more
            # detailed information about the event.
            #
            # $2 = cfwBasicConnectionEventType - The type of connection-related
            #        event that this row contains. If the event is not
            #        connection-related this object will not be instantiated.
            ##########

            @AlertGroup = "FW-Connection"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "FIREWALL: " + lookup($2, ConnectionEvent) + "  (see Details)"
            switch($2)
            {
                case "2":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
                    @Severity = 4
                    @Type = 1
            }
            $cfwBasicEventDescription = $3
            $cfwBasicEventDetailsTableRow = $4
            #details($cfwBasicEventDescription, $cfwBasicEventDetailsTableRow)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "5": ### cfwAccessNotification

            ##########
            # This notification is used to notify the NMS of access events. The
            # included objects provide more detailed information about the event.
            #
            # $2 = cfwBasicAccessEventType - The type of access-related event
            #        that this row contains. If the event is not access-related
            #        this object will not be instantiated.
            ##########

            @AlertGroup = "FW-Access"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "FIREWALL: " + lookup($2, AccessEvent) + "  (see Details)"
            switch($2)
            {
                case "2":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
                    @Severity = 4
                    @Type = 1
            }
            $cfwBasicEventDescription = $3
            $cfwBasicEventDetailsTableRow = $4
            #details($cfwBasicEventDescription, $cfwBasicEventDetailsTableRow)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "6": ### cfwAuthNotification

            ##########
            # This notification is used to notify the NMS of authentication
            # events. The included objects provide more detailed information
            # about the event.
            #
            # $2 = cfwBasicAuthenticationEventType - The type of
            #        authentication-related event that this row contains. If
            #        the event is not authentication-related this object will
            #        not be instantiated.
            ##########

            @AlertGroup = "FW-Authentication"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "FIREWALL: " + lookup($2, AuthenticationEvent) + "  (see Details)"
            switch($2)
            {
                case "2"|"5":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
                    @Severity = 4
                    @Type = 1
            }
            $cfwBasicEventDescription = $3
            $cfwBasicEventDetailsTableRow = $4
            #details($cfwBasicEventDescription, $cfwBasicEventDetailsTableRow)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "7": ### cfwGenericNotification

            ##########
            # This notification is used to notify the NMS of events that do not
            # fall into the other categories. The included objects provide more
            # detailed information about the event.
            #
            # $2 = cfwBasicGenericEventType - The type of generic event that
            #        this row contains. If the event does not fall into one of
            #        the other categories this object will be populated.
            #        Otherwise, this object will not be instantiated.
            ##########

            @AlertGroup = "FW-Generic"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "FIREWALL: " + lookup($2, GenericEvent) + "  (see Details)"
            switch($2)
            {
                case "2":
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
                    @Severity = 4
                    @Type = 1
            }
            $cfwBasicEventDescription = $3
            $cfwBasicEventDetailsTableRow = $4
            #details($cfwBasicEventDescription, $cfwBasicEventDetailsTableRow)
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.40.2": ### Cisco H.323 Gatekeeper - Notifications from CISCO-GATEKEEPER-MIB

    @Agent = "Cisco-H.323 Gatekeeper"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoGatekeeperEvent

            ##########
            # A ciscoGatekeeperEvent is sent whenever a new event is added to
            # the cgkHistoryEventTable.
            #
            # $1 = cgkHistoryEventType - The object indicates the event that
            #        occurred.
            # $2 = cgkHistoryEventEndpointType - The type of the endpoint that
            #        triggered the register or unregister event.
            # $3 = cgkHistoryEventEndpointAddrTag - The type of network address
            #        associated with the endpoint that triggered the register
            #        or unregister event. This field is not valid for other
            #        event types.
            # $4 = cgkHistoryEventEndpointAddress - The network address
            #        associated with the endpoint that triggered the register
            #        or unregister event. This field is not valid for other
            #        event types.
            # $5 = cgkHistoryEventEndpointH323id - The H323 ID of the endpoint
            #        associated with the register or unregister event. This
            #        field is not valid for other event types.
            ##########

            switch($1)
            {
                case "1": ### other - An event other than the ones listed below.
                    @AlertGroup = "GateKeeper Status"
                    @AlertKey = extract($OID1, "\.([0-9]+)$")
                    @Summary = "H.323 GATEKEEPER: Other Event (not specifically defined)"
                    @Severity = 2
                    @Type = 1
                case "2": ### register - A full RRQ was received by the gatekeeper to register a previously unregistered endpoint.
                    @AlertGroup = "Endpoint Registration"
                    if (match($5, ""))
                    {
                        @AlertKey = rtrim($4)
                    }
                    else
                    {
                        @AlertKey = $5
                    }
                    @Summary = "H.323 GATEKEEPER: " + lookup($2, cgkHistoryEventEndpointType) + " " + @AlertKey + " Registered"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### unregister - An endpoint was unregistered because it sent a URQ to the gatekeeper.
                    @AlertGroup = "Endpoint Registration"
                    if (match($5, ""))
                    {
                        @AlertKey = rtrim($4)
                    }
                    else
                    {
                        @AlertKey = $5
                    }
                    @Summary = "H.323 GATEKEEPER: " + lookup($2, cgkHistoryEventEndpointType) + " " + @AlertKey + " Unregistered"
                    @Severity = 3
                    @Type = 1
                case "4": ### unregisterForced - The gatekeeper sent a URQ to the endpoint.
                    @AlertGroup = "Endpoint Registration"
                    if (match($5, ""))
                    {
                        @AlertKey = rtrim($4)
                    }
                    else
                    {
                        @AlertKey = $5
                    }
                    @Summary = "H.323 GATEKEEPER: " + lookup($2, cgkHistoryEventEndpointType) + " " + @AlertKey + " Forced to Unregister"
                    @Severity = 3
                    @Type = 1
                case "5": ### overload - The gatekeeper has detected sustained overload. A sustained overload condition will cause the gatekeeper to reject calls.
                    @AlertGroup = "GateKeeper Status"
                    @AlertKey = ""
                    @Summary = "H.323 GATEKEEPER: Sustained Overload"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.48.2": ### Cisco GPRS Tunnelling Protocol (GTP) - Notifications from CISCO-GPRS-GTP-MIB

    @Agent = "Cisco-GTP"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cgprsGtpGSNPathFailedNotif

            ##########
            # The notification is sent when the GSN peer is failed to respond
            # to the GTP 'Echo Request' message for cgprsGtpN3Request times and
            # before the GSN entry is deleted from the GSN peer table.
            #
            # $1 = cgprsGtpLastGSNidNoRespToEcho - The name of the last peer
            #        GSN that does not reply to echo message. 
            ##########

            @AlertGroup = "GSN Path Status"
            @AlertKey = $1
            @Summary = $1 + " Failed to Respond to GTP 'Echo Request' Message"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cgprsGtpGSNPathRecoveredNotif

            ##########
            # The notification is sent when the GSN peer is recovered from
            # failure.
            #
            # $1 = cgprsGtpLastGSNidRecovered - The name of the last peer GSN
            #        that does not reply to echo message. 
            ##########

            @AlertGroup = "GSN Path Status"
            @AlertKey = $1
            @Summary = $1 + " Responded to GTP 'Echo Request' Message"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### cgprsGtpPDPCxtActivationRejNotif

            ##########
            # This trap indicates that a PDP Context activation was rejected
            # due to an overload, or some other abnormal condition. The trap
            # indicates the Id of the GSN that rejected the PDP Context
            # Activation, the IMSI Id of the MS, and the reson for rejection.
            #
            # $1 = cgprsGtpGSNidOfLastUnexpPDPCxt - The name of the peer GSN
            #        whose PDP context is unexpected. 
            # $2 = cgprsGtpTIDOfLastUnexpPDPCxt - The TID of the last
            #        unexpected PDP Context activation. 
            # $3 = cgprsGtpRejReasonOfLastUnexpPDPCxt - The reason for
            #        rejecting the PDP Context activation. 
            ##########

            @AlertGroup = "PDP Context Status"
            @AlertKey = $1 + "." + $2
            @Summary = "PDP Context Activation Rejected: " + $3
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### cgprsGtpPrimaryChargingGWUpNotif

            ##########
            # This notification is sent when primary charging gateway is up. 
            ##########

            @AlertGroup = "Primary Charging Gateway"
            @AlertKey = ""
            @Summary = "Primary Charging Gateway Up"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### cgprsGtpPrimaryChargingGWDownNotif

            ##########
            # This notification is sent when primary charging gateway is down.
            ##########

            @AlertGroup = "Primary Charging Gateway"
            @AlertKey = ""
            @Summary = "Primary Charging Gateway Down"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "6": ### cgprsGtpSecondaryChargingGWUpNotif

            ##########
            # This notification is sent when secondary charging gateway is up. 
            ##########

            @AlertGroup = "Secondary Charging Gateway"
            @AlertKey = ""
            @Summary = "Secondary Charging Gateway Up"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "7": ### cgprsGtpSecondaryChargingGWDownNotif

            ##########
            # This notification is sent when secondary charging gateway is down.  
            ##########

            @AlertGroup = "Secondary Charging Gateway"
            @AlertKey = ""
            @Summary = "Secondary Charging Gateway Down"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.218.2": ### Cisco Interface Threshold - Notifications from CISCO-IF-THRESHOLD-MIB

    @Agent = "Cisco-Interface Threshold"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cifthIfThresholdFired

            ##########
            # The agent generates this notification when a threshold defined in
            # a template is asserted on an interface. If a threshold is
            # asserted for a given interface and template,
            # cifthTemplateNotifyHoldDownTime is set to 'holdDownTimer' for
            # that template, and this notification has recently been sent for
            # the same threshold on the same interface, then this notification
            # may be suppressed.
            #
            # $1 = cifthIfLastThresholdFired - This object specifies the last
            #        threshold fired or cleared on the interface.
            # $2 = cifthIfThresholdFiredLstChange - This object specifies the
            #        value of sysUpTime at the last time a threshold was fired
            #        or cleared on the interface.
            # $3 = cifthIfThresholdFiredLstSeverity - This object specifies the
            #        severity of the threshold that was last fired or cleared
            #        on the interface.
            ##########

            @AlertGroup = "Threshold"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### ifIndex.cifthIfThresholdFiredTemplate
            @Summary = "Threshold Fired  ( ifIndex.cifthIfThresholdFiredTemplate = " + @AlertKey + " )"
            switch($3)
            {
                case "1": ### Fail
                    @Severity = 4
                    @Type = 1
                case "2": ### Degrade
                    @Severity = 3
                    @Type = 1
                case "3": ### Info
                    @Severity = 2
                    @Type = 1
                case "4": ### Other
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "2": ### cifthIfThresholdCleared

            ##########
            # The agent generates this notification when a threshold, that has
            # previously fired, is cleared on an interface. If a threshold is
            # cleared for a given interface and template,
            # cifthTemplateNotifyHoldDownTime is set to 'holdDownTimer' for
            # that template, and this notification has recently been sent for
            # the same threshold on the same interface, then this notification
            # may be suppressed.
            #
            # $1 = cifthIfLastThresholdFired - This object specifies the last
            #        threshold fired or cleared on the interface.
            # $2 = cifthIfThresholdFiredLstChange - This object specifies the
            #        value of sysUpTime at the last time a threshold was fired
            #        or cleared on the interface.
            # $3 = cifthIfThresholdFiredLstSeverity - This object specifies the
            #        severity of the threshold that was last fired or cleared
            #        on the interface.
            ##########

            @AlertGroup = "Threshold Crossing"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### ifIndex.cifthIfThresholdFiredTemplate
            @Summary = "Threshold Fired  ( ifIndex.cifthIfThresholdFiredTemplate = " + @AlertKey + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### cifthTemplateIfStatusChange

            ##########
            # The agent generates this notification when a template comes up or
            # goes down on an interface to which it is assigned, i.e., when the
            # value of cifthTemplateIfAssignOperStatus changes. If a template
            # becomes operationally down on an interface upon activation of a
            # new entry in the cifthTemplateIfAssignTable, the agent generates
            # this notification. The agent need not generate this notification
            # when a new entry in the cifthTemplateIfAssignTable is activated,
            # if the template becomes operational on the interface. The agent
            # need not generate this notification when an entry in the
            # cifthTemplateIfAssignTable is destroyed.
            #
            # $1 = cifthTemplateIfAssignOperStatus - This object indicates
            #        whether the threshold template identified by
            #        cifthTemplateIndex is operational on the interface
            #        identified by cifthTemplateIfAssignInterface.
            #
            #        When the value of this object is 'up', this indicates that
            #        the thresholds in this template (identified by
            #        cifthTemplateIndex) are activated on this interface, with
            #        the following exception: If a threshold is defined on an
            #        object that does not have an instance for this interface,
            #        then the threshold is not activated on this interface. If
            #        any of the thresholds are being exceeded, then a
            #        corresponding entry exists in the
            #        cifthIfThresholdFiredTable.
            #
            #        When the value of this object is 'down', this indicates
            #        that all thresholds in the template are de-activated on
            #        this interface and there is no corresponding entry in the
            #        cifthIfThresholdFiredTable, regardless of whether any of
            #        the thresholds in the template are being exceeded on this
            #        interface. One reason for a template not to be operational
            #        on an interface to which it is assigned is when the
            #        interface has two (or more) templates assigned to it that
            #        contain thresholds on the same object with the same
            #        severity and direction, i.e., thresholds with the same
            #        values of cifthThresholdObject, cifthThresholdSeverity,
            #        and cifthThresholdDirection. This may occur when a
            #        template is assigned to the interface, or when a threshold
            #        is added to a template that is already active on the
            #        interface. When this occurs, the implementation may
            #        operate on both (or all) threshold values, or it may take
            #        down one (or more) of the templates on this interface,
            #        which is indicated by changing the value of this object
            #        from 'up' to 'down'.
            ##########

            @AlertGroup = "Template Status"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### cifthTemplateIndex.cifthTemplateIfAssignInterface(ifIndex)
            switch($1)
            {
                case "1": ### Up
                    @Summary = "Template Thresholds Up on Interface  ( cifthTemplateIndex.cifthTemplateIfAssignInterface(ifIndex) = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Down
                    @Summary = "Template Thresholds Down on Interface  ( cifthTemplateIndex.cifthTemplateIfAssignInterface(ifIndex) = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.2.3.1": ### Cisco IP Multicast Routing Table - Notifications from CISCO-IPMROUTE-MIB

    @Agent = "Cisco-IP Multicast Routing"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoIpMRouteMissingHeartBeats

            ##########
            # A ciscoIpMRouteMissingHeartBeat is sent if a multicast router
            # with this feature enabled failed to receive configured number of
            # heartbeat packets from heartbeat sources within a configured time
            # interval.
            #
            # $1 = ciscoIpMRouteHeartBeatSourceAddr - Source address of the
            #        last multicast heartbeat packet received.
            # $2 = ciscoIpMRouteHeartBeatInterval - Number of seconds in which
            #        a Cisco multicast router expects a valid heartBeat packet
            #        from a source. This value must be a multiple of 10.
            # $3 = ciscoIpMRouteHeartBeatWindowSize - Number of
            #        ciscoIpMRouteHeartBeatInterval intervals a Cisco multicast
            #        router waits before checking if expected number of
            #        heartbeat packets are received or not.
            # $4 = ciscoIpMRouteHeartBeatCount - Number of time intervals where
            #        multicast packets were received in the last
            #        ciscoIpMRouteHeartBeatWindowSize intervals.
            ##########

            @AlertGroup = "IPM Heartbeat"
            @AlertKey = $1
            @Summary = "Failed to Receive IP Multicast Router Heartbeat from " + $1
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.172.2": ### Cisco IPSec Flow Monitoring - Notifications from CISCO-IPSEC-FLOW-MONITOR-MIB

    @Agent = "Cisco-IPSec Flow Monitoring"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cikeTunnelStart

            ##########
            # This notification is generated when an IPsec Phase-1 IKE Tunnel
            # becomes active.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            # $3 = cikeTunLifeTime - The negotiated LifeTime of the IPsec
            #        Phase-1 IKE Tunnel in seconds.
            ##########

            @AlertGroup = "Phase-1 IKE Tunnel"
            @AlertKey = $1 + " to " + $2
            @Summary = "IPsec Phase-1 IKE Tunnel Active  ( " + @AlertKey + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cikeTunnelStop

            ##########
            # This notification is generated when an IPsec Phase-1 IKE Tunnel
            # becomes inactive.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            # $3 = cikeTunActiveTime - The length of time the IPsec Phase-1 IKE
            #        tunnel has been active in hundredths of seconds.
            ##########

            @AlertGroup = "Phase-1 IKE Tunnel"
            @AlertKey = $1 + " to " + $2
            @Summary = "IPsec Phase-1 IKE Tunnel Stopped  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### cikeSysFailure

            ##########
            # This notification is generated when the processing for an IPsec
            # Phase-1 IKE Tunnel experiences an internal or system capacity
            # error.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            ##########

            @AlertGroup = "Phase-1 IKE Tunnel"
            @AlertKey = $1 + " to " + $2
            @Summary = "IPsec Phase-1 IKE Tunnel Internal or System Capacity Error  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### cikeCertCrlFailure

            ##########
            # This notification is generated when the processing for an IPsec
            # Phase-1 IKE Tunnel experiences a Certificate or a Certificate
            # Revoke List (CRL) related error.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            ##########

            @AlertGroup = "Phase-1 IKE Tunnel"
            @AlertKey = $1 + " to " + $2
            @Summary = "IPsec Phase-1 IKE Tunnel Certificate or CRL Error  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### cikeProtocolFailure

            ##########
            # This notification is generated when the processing for an IPsec
            # Phase-1 IKE Tunnel experiences a protocol related error.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            ##########

            @AlertGroup = "Phase-1 IKE Tunnel"
            @AlertKey = $1 + " to " + $2
            @Summary = "IPsec Phase-1 IKE Tunnel Protocol Error  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "6": ### cikeNoSa

            ##########
            # This notification is generated when the processing for an IPsec
            # Phase-1 IKE Tunnel experiences a non-existent security
            # association error.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            ##########

            @AlertGroup = "Phase-1 IKE Tunnel"
            @AlertKey = $1 + " to " + $2
            @Summary = "IPsec Phase-1 IKE Tunnel Non-Existent Security Association  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "7": ### cipSecTunnelStart

            ##########
            # This notification is generated when an IPsec Phase-2 Tunnel
            # becomes active.
            #
            # $1 = cipSecTunLifeTime - The negotiated LifeTime of the IPsec
            #        Phase-2 Tunnel in seconds.
            # $2 = cipSecTunLifeSize - The negotiated LifeSize of the IPsec
            #        Phase-2 Tunnel in kilobytes.
            ##########

            @AlertGroup = "Phase-2 Tunnel"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "IPsec Phase-2 Tunnel Active  ( cipSecTunIndex = " + @AlertKey + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "8": ### cipSecTunnelStop

            ##########
            # This notification is generated when an IPsec Phase-2 Tunnel
            # becomes inactive.
            #
            # $1 = cipSecTunActiveTime - The length of time the IPsec Phase-2
            #        Tunnel has been active in hundredths of seconds.
            ##########

            @AlertGroup = "Phase-2 Tunnel"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "IPsec Phase-2 Tunnel Inactive  ( cipSecTunIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "9": ### cipSecSysFailure

            ##########
            # This notification is generated when the processing for an IPsec
            # Phase-2 Tunnel experiences an internal or system capacity error.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            # $3 = cipSecTunActiveTime - The length of time the IPsec Phase-2
            #        Tunnel has been active in hundredths of seconds.
            # $4 = cipSecSpiProtocol - The protocol of the SPI.
            ##########

            @AlertGroup = "Phase-2 Tunnel"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "IPsec Phase-2 Tunnel Internal or System Capacity Error  ( cipSecTunIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "10": ### cipSecSetUpFailure

            ##########
            # This notification is generated when the setup for an IPsec
            # Phase-2 Tunnel fails.
            #
            # $1 = cikePeerLocalAddr - The IP address of the local peer.
            # $2 = cikePeerRemoteAddr - The IP address of the remote peer.
            ##########

            @AlertGroup = "Phase-2 Tunnel"
            @AlertKey = $1 + " to " + $2
            @Summary = "IPsec Phase-2 Tunnel Setup Failed  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "11": ### cipSecEarlyTunTerm

            ##########
            # This notification is generated when an an IPsec Phase-2 Tunnel is
            # terminated earily or before expected.
            #
            # $1 = cipSecTunActiveTime - The length of time the IPsec Phase-2
            #        Tunnel has been active in hundredths of seconds.
            # $2 = cipSecSpiProtocol - The protocol of the SPI.
            ##########

            @AlertGroup = "Phase-2 Tunnel"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "IPsec Phase-2 Tunnel Terminated Early  ( cipSecTunIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "12": ### cipSecProtocolFailure

            ##########
            # This notification is generated when the processing for an IPsec
            # Phase-2 Tunnel experiences a protocol related error.
            #
            # $1 = cipSecTunActiveTime - The length of time the IPsec Phase-2
            #        Tunnel has been active in hundredths of seconds.
            # $2 = cipSecSpiProtocol - The protocol of the SPI.
            ##########

            @AlertGroup = "Phase-2 Tunnel"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "IPsec Phase-2 Tunnel Protocol Error  ( cipSecTunIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "13": ### cipSecNoSa

            ##########
            # This notification is generated when the processing for an IPsec
            # Phase-2 Tunnel experiences a non-existent security association
            # error.
            #
            # $1 = cipSecTunActiveTime - The length of time the IPsec Phase-2
            #        Tunnel has been active in hundredths of seconds.
            # $2 = cipSecSpiProtocol - The protocol of the SPI.
            ##########

            @AlertGroup = "Phase-2 Tunnel"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "IPsec Phase-2 Tunnel Non-Existent Security Association  ( cipSecTunIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.62.2": ### Cisco IOS-Specific IPSec Configuration Monitoring - Notifications from CISCO-IPSEC-MIB

    @Agent = "Cisco-IPSec"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cipsIsakmpPolicyAdded

            ##########
            # This trap is generated when a new ISAKMP policy element is
            # defined on the managed entity. The context of the event includes
            # the updated number of ISAKMP policy elements currently available.
            #
            # $1 = cipsNumIsakmpPolicies - The value of this object is the
            #        number of ISAKMP policies that have been configured on the
            #        managed entity.
            ##########

            @AlertGroup = "ISAKMP Policy"
            @AlertKey = ""
            @Summary = "New ISAKMP Policy Element Defined"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cipsIsakmpPolicyDeleted

            ##########
            # This trap is generated when an existing ISAKMP policy element is
            # deleted on the managed entity. The context of the event includes
            # the updated number of ISAKMP policy elements currently available.
            #
            # $1 = cipsNumIsakmpPolicies - The value of this object is the
            #        number of ISAKMP policies that have been configured on the
            #        managed entity.
            ##########

            @AlertGroup = "ISAKMP Policy"
            @AlertKey = ""
            @Summary = "ISAKMP Policy Element Deleted"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### cipsCryptomapAdded

            ##########
            # This trap is generated when a new cryptomap is added to the
            # specified cryptomap set.
            #
            # $1 = cipsStaticCryptomapType - The type of the cryptomap entry.
            #        This can be an ISAKMP cryptomap, CET or manual. Dynamic
            #        cryptomaps are not counted in this table.
            # $2 = cipsStaticCryptomapSetSize - The total number of cryptomap
            #        entries contained in this cryptomap set. 
            ##########

            @AlertGroup = "Cryptomap"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)\.[0-9]+$")
            @Summary = "New Cryptomap Added to Cryptoset " + @AlertKey
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### cipsCryptomapDeleted

            ##########
            # This trap is generated when a cryptomap is removed from the
            # specified cryptomap set.
            #
            # $1 = cipsStaticCryptomapSetSize - The total number of cryptomap
            #        entries contained in this cryptomap set. 
            ##########

            @AlertGroup = "Cryptomap"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)\.[0-9]+$")
            @Summary = "Cryptomap Deleted from Cryptoset " + @AlertKey
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### cipsCryptomapSetAttached

            ##########
            # A cryptomap set must be attached to an interface of the device in
            # order for it to be operational. This trap is generated when the
            # cryptomap set attached to an active interface of the managed
            # entity. The context of the notification includes: Size of the
            # attached cryptomap set, Number of ISAKMP cryptomaps in the set
            # and Number of Dynamic cryptomaps in the set.
            #
            # $1 = cipsStaticCryptomapSetSize - The total number of cryptomap
            #        entries contained in this cryptomap set. 
            # $2 = cipsStaticCryptomapSetNumIsakmp - The number of cryptomaps
            #        associated with this cryptomap set that use ISAKMP
            #        protocol to do key exchange.
            # $3 = cipsStaticCryptomapSetNumDynamic - The number of dynamic
            #        cryptomap templates linked to this cryptomap set.
            ##########

            @AlertGroup = "Cryptomap Attachment"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)\.[0-9]+$")
            @Summary = "Cryptomap Set ( " + @AlertKey + " ) Attached to an Interface"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "6": ### cipsCryptomapSetDetached

            ##########
            # This trap is generated when a cryptomap set is detached from an
            # interafce to which it was bound earlier. The context of the event
            # identifies the size of the cryptomap set.
            #
            # $1 = cipsStaticCryptomapSetSize - The total number of cryptomap
            #        entries contained in this cryptomap set. 
            ##########

            @AlertGroup = "Cryptomap Attachment"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_]+)\.[0-9]+$")
            @Summary = "Cryptomap Set ( " + @AlertKey + " ) Removed from an Interface"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "7": ### cipsTooManySAs

            ##########
            # This trap is generated when a new SA is attempted to be setup
            # while the number of currently active SAs equals the maximum
            # configurable. The variables are: cipsMaxSAs
            #
            # $1 = cipsMaxSAs - The maximum number of IPsec Security
            #        Associations that can be established on this managed
            #        entity. If no theoretical limit exists, this returns value
            #        0. Not affected by any CLI operation.
            ##########

            @AlertGroup = "Security Association Setup"
            @AlertKey = ""
            @Summary = "Security Association Setup Failed, Max SAs ( " + $1 + " ) Exceeded"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.233.0": ### Cisco IP Transfer Point (ITP) Signaling Connection Control Part for SS7 - Notifications from CISCO-ITP-SCCP-MIB

    @Agent = "Cisco-ITP SCCP"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cItpSccpGttMapStateChange

            ##########
            # The notification generated when a mated application subsystem
            # changes to a new state. The value of cItpSccpGttMapSsStatus
            # indicates the new state for the subsystem.
            #
            # $1 = cItpSpCLLICode - Common Language Location Codes
            #        (CLLI Codes).
            # $2 = cItpSpDisplayName - A short identifier for the Signalling
            #        Point.  This value can be set by system administrator or
            #        defaults to the local point code formatted as an ASCII
            #        string.
            # $3 = cItpSccpGttMapDisplayPC - The MAP point code in display
            #        format.
            # $4 = cItpSccpGttMapDisplaySS - The MAP subsystem number in
            #        display format.
            # $5 = cItpSccpGttMapSsStatus - The GTT MAP subsystem status.
            ##########

            @AlertGroup = "Mated Application Status"
            @AlertKey = extract($OID5, "\.([0-9]+\.[0-9]+)$") ### cItpSccpGttMapPc(Point Code,SS7 Network Node Address).cItpSccpGttMapSsn(SubSystem Number)
            switch($5)
            {
                case "1": ### Allowed - The mated application is allowed.
                    @Summary = "Mated Application Subsystem Allowed  ( SS7Addr.SubSystem = " + $3 + "." + $4 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Prohibited (Other) - The mated application is prohibited.
                    @Summary = "Mated Application Subsystem Prohibited  ( SS7Addr.SubSystem = " + $3 + "." + $4 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.232.0": ### Cisco IP Transfer Point (ITP) Signalling Point - Notifications from CISCO-ITP-SP-MIB

    @Agent = "Cisco-ITP SP"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cItpSpLinksetStateChange

            ##########
            # The notification generated when a linkset changes to a new state.
            # The value of cItpSpLinksetState indicates the new state.
            #
            # $1 = cItpSpCLLICode - Common Language Location Codes (CLLI
            #        Codes).
            # $2 = cItpSpLinksetState - The list of possible linkset states.
            #        'available' : Traffic may flow over this linkset
            #        'shutdown' : This linkset has been forced to an
            #           unavailable state by an administrative action.
            #        'unavailable': The linkset is currently unable to support
            #           traffic. Activation of this linkset will occur as
            #           required by protocol.
            # $3 = cItpSpLinksetDisplayName - A short identifier for each
            #        linkset. This value can be set by system administrator or
            #        defaults to the linkset name.
            # $4 = cItpSpLinksetSourceDisplayPC - The point code to which this
            #        linkset is connected.
            # $5 = cItpSpLinksetAdjacentDisplayPC - The point code to which
            #        this linkset is connected.
            ##########

            @AlertGroup = "SP Linkset Status"
            @AlertKey = extract($OID2, "\.([A-Z|a-z|0-9|-|_|/]+)$") ### cItpSpLinksetName
            switch($2)
            {
                case "1": ### available
                    @Summary = "Signalling Point Linkset Available  ( LinksetName = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### shutdown
                    @Summary = "Signalling Point Linkset Administratively Shutdown  ( LinksetName = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### unavailable
                    @Summary = "Signalling Point Linkset Unavailable  ( LinksetName = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "2": ### cItpSpLinkStateChange

            ##########
            # The notification generated when a link changes to a new state.
            # The value of cItpSpLinkState indicates the new state.
            #
            # $1 = cItpSpCLLICode - Common Language Location Codes
            #        (CLLI Codes).
            # $2 = cItpSpLinkState - The list of possible links states.
            #        'available' : Traffic may flow over this linkset
            #        'failed' : Traffic management has detected a failure that
            #           prevents activating this linkset.
            #        'shutdown' : This linkset has been forced to an
            #           unavailable state by an administrative action.
            #        'unavailable': The linkset is currently unable to support
            #           traffic. Activation of this linkset will occur as
            #           required by protocol.
            # $3 = cItpSpLinkDisplayName - A short identifier for each link
            #        linkset. This value can be set by system administrator or
            #        defaults to the linkset name and SLC formatted as an ASCII
            #        string.
            # $4 = cItpSpLinksetSourceDisplayPC - The point code to which this
            #        linkset is connected.
            # $5 = cItpSpLinksetAdjacentDisplayPC - The point code to which
            #        this linkset is connected.
            # $6 = cItpSpLinkStateReason - This object provides additional
            #        information on the state of a link as follows.
            #        (see lookup table)
            ##########

            @AlertGroup = "SP Link Status"
            @AlertKey = extract($OID2, "\.([A-Z|a-z|0-9|-|_|/]+\.[0-9]+)$") ### cItpSpLinksetName.cItpSpLinkSlc
            switch($2)
            {
                case "1": ### available
                    @Summary = "Signalling Point Link Available  ( LinksetName.LinkSlc = " + $3 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### Failed
                    @Summary = "Signalling Point Link Failed, " + lookup($6, cItpSpLinkStateReason) + "  ( LinksetName.LinkSlc = " + $3 + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### shutdown
                    @Summary = "Signalling Point Link Administratively Shutdown, " + lookup($6, cItpSpLinkStateReason) + "  ( LinksetName.LinkSlc = " + $3 + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### unavailable
                    @Summary = "Signalling Point Link Unavailable, " + lookup($6, cItpSpLinkStateReason) + "  ( LinksetName.LinkSlc = " + $3 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + $6 + " " + @Agent + " " + @Manager

        case "3": ### cItpSpCongestionChange

            ##########
            # The notification generated when a link changes to a new state.
            # The value of indicates the new state.
            #
            # $1 = cItpSpCLLICode - Common Language Location Codes
            #       (CLLI Codes).
            # $2 = cItpSpLinkCongestionState - The signalling link congestion
            #        status of this link. 0 is the least congestion level, 3 is
            #        the highest congestion level.
            #        REFERENCE "ITU Q.704 Signalling network functions and
            #          messages. ANSI T1.111 Telecommunications - Signaling
            #          system No. 7 (SS7)-Signalling network functions and
            #          messages 2.3.5.2.
            # $3 = cItpSpLinkDisplayName - A short identifier for each link
            #        linkset. This value can be set by system administrator or
            #        defaults to the linkset name and SLC formatted as an ASCII
            #        string.
            # $4 = cItpSpLinksetSourceDisplayPC - The point code to which this
            #        linkset is connected.
            # $5 = cItpSpLinksetAdjacentDisplayPC - The point code to which
            #        this linkset is connected.
            ##########

            @AlertGroup = "SP Link Congestion"
            switch($2)
            {
                case "0": ### low
                    @Summary = "Congestion Low on Signalling Point Link ( " + $3 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "1": ### moderate
                    @Summary = "Congestion Moderate on Signalling Point Link ( " + $3 + " )"
                    @Severity = 2
                    @Type = 1
                case "2": ### high
                    @Summary = "Congestion High on Signalling Point Link ( " + $3 + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### excessive
                    @Summary = "Congestion Excessive on Signalling Point Link ( " + $3 + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.99.2": ### Cisco LocalDirector - Notifications from CISCO-LOCAL-DIRECTOR-MIB

    @Agent = "Cisco-LocalDirector"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoLocalDirectorVirtualStateChange

            ##########
            # When a Virtual machine changes state, a notification is sent.
            #
            # $1 = cldVirtualState - The service state of the virtual machine.
            #        inService - normal.
            #        outOfService - manually taken offline.
            #        testing - machine has failed, but is being tested for
            #          availability.
            #        failed - machine has failed.
            #        maxCapacity - machine has reached connection limit.
            #        maintenance - manually taken offine, and when brought back
            #          online, sticky associations will not be cleared.
            #        stickyOnly - machine will only accept new connections for
            #          which a 'Sticky Association' already exists in cache.
            #        externalFailed - An external management application
            #          determined that the real or virtual server is no longer
            #          available to service connections. The management
            #          application has indicated such to this LD and this LD
            #          has failed the server.
            ##########

            @AlertGroup = "Virtual Machine Status"
            @AlertKey = extract ($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$") ### cldVirtualIpAddress.cldVirtualPort.cldVirtualBindID
            switch($1)
            {
                case "1": ### inService
                    @Summary = "Virtual Machine In Service  ( IP.Port.BindID = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### outOfService
                    @Summary = "Virtual Machine Out of Service, Manually  ( IP.Port.BindID = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### testing
                    @Summary = "Virtual Machine Failed, Being Tested  ( IP.Port.BindID = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "4": ### failed
                    @Summary = "Virtual Machine Failed  ( IP.Port.BindID = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "5": ### maxCapacity
                    @Summary = "Virtual Machine Reached Connection Limit  ( IP.Port.BindID = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### maintenance
                    @Summary = "Virtual Machine Manually Taken Offline  ( IP.Port.BindID = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### stickyOnly
                    @Summary = "Virtual Machine Only Accepting 'Sticky Association' Connections  ( IP.Port.BindID = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### externalFailed
                    @Summary = "Virtual Machine Failed  ( IP.Port.BindID = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "2": ### ciscoLocalDirectorRealStateChange

            ##########
            # When a Real machine changes state, a notification is sent.
            #
            # $1 = cldRealState - The service state of the real machine.
            #        inService - normal.
            #        outOfService - manually taken offline.
            #        testing - machine has failed, but is being tested for
            #          availability.
            #        failed - machine has failed.
            #        maxCapacity - machine has reached connection limit.
            #        maintenance - manually taken offine, and when brought back
            #          online, sticky associations will not be cleared.
            #        stickyOnly - machine will only accept new connections for
            #          which a 'Sticky Association' already exists in cache.
            #        externalFailed - An external management application
            #          determined that the real or virtual server is no longer
            #          available to service connections. The management
            #          application has indicated such to this LD and this LD
            #          has failed the server.
            ##########

            @AlertGroup = "Real Machine Status"
            @AlertKey = extract ($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$") ### cldRealIpAddress.cldRealPort
            switch($1)
            {
                case "1": ### inService
                    @Summary = "Real Machine In Service  ( IP.Port = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### outOfService
                    @Summary = "Real Machine Out of Service, Manually  ( IP.Port = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### testing
                    @Summary = "Real Machine Failed, Being Tested  ( IP.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "4": ### failed
                    @Summary = "Real Machine Failed  ( IP.Port = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "5": ### maxCapacity
                    @Summary = "Real Machine Reached Connection Limit  ( IP.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### maintenance
                    @Summary = "Real Machine Manually Taken Offline  ( IP.Port = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### stickyOnly
                    @Summary = "Real Machine Only Accepting 'Sticky Association' Connections  ( IP.Port = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### externalFailed
                    @Summary = "Real Machine Failed  ( IP.Port = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "3": ### ciscoLocalDirectorFailoverEnableChange

            ##########
            # Failover is turned on/off.
            #
            # $1 = cldFailoverEnabled - Is failover mechanism enabled.
            ##########

            @AlertGroup = "Failover"
            @AlertKey = ""
            switch($1)
            {
                case "1": ### failoverOn - normal
                    @Summary = "Local Director Failover Enabled"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### failoverOff - manually taken offline
                    @Summary = "Local Director Failover Disabled"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "4": ### ciscoLocalDirectorFailoverCableChange

            ##########
            # Failover's serial cable has a status change.
            #
            # $1 = cldFailoverCableStatus - Status of failover serial cable.
            ##########

            @AlertGroup = "Failover Cable"
            @AlertKey = ""
            switch($1)
            {
                case "1": ### normalConnected - cable connected on both sides and both units powered on.
                    @Summary = "Failover Serial Cable Connected, both Units Powered On"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### otherSidePoweredOff - cable connected on both sides, but other unit is powered off.
                    @Summary = "Failover Serial Cable Connected, Remote Unit Powered Off"
                    @Severity = 3
                    @Type = 1
                case "3": ### mySideNotConnected - my side of serial cable is not connected.
                    @Summary = "Failover Serial Cable Disconnected Locally"
                    @Severity = 3
                    @Type = 1
                case "4": ### otherSideNotConnected - my side of serial cable is connected, but other unit is not connected.
                    @Summary = "Failover Serial Cable Disconnected from Remote Unit"
                    @Severity = 3
                    @Type = 1
                case "5": ### badCable - problem is detected with serial cable.
                    @Summary = "Failover Serial Cable Bad"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "5": ### ciscoLocalDirectorFailoverUnitStatus

            ##########
            # Failover event occurs.
            #
            # $1 = cldFailoverUnitStatus - The unit's failover activity; active
            #        or standby.
            ##########

            @AlertGroup = "Failover Status"
            @AlertKey = ""
            switch($1)
            {
                case "": ### active - LocalDirector is currently active and handling load-balancing for site.
                    @Summary = "LocalDirector Active: Currently Active and Handling Load-Balancing"
                    @Severity = 2
                    @Type = 0
                case "": ### standby - LocalDirector is currently not active and is only monitoring 'active' unit."
                    @Summary = "LocalDirector in Standby: Not Active and only Monitoring 'Active' Unit"
                    @Severity = 2
                    @Type = 0
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "6": ### ciscoLocalDirectorEVirtualStateChange

            ##########
            # When a Virtual machine changes state, a notification is sent.
            #
            # $1 = cldeVirtualState - The service state of the virtual machine.
            ##########

            @AlertGroup = "Virtual Machine Status"
            @AlertKey = extract ($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$") ### cldeVirtualIpAddress.cldeVirtualPort.cldeVirtualBindID.cldeVirtualProtocol
            switch($1)
            {
                case "1": ### inService
                    @Summary = "Virtual Machine In Service  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### outOfService
                    @Summary = "Virtual Machine Out of Service, Manually  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### testing
                    @Summary = "Virtual Machine Failed, Being Tested  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "4": ### failed
                    @Summary = "Virtual Machine Failed  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "5": ### maxCapacity
                    @Summary = "Virtual Machine Reached Connection Limit  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### maintenance
                    @Summary = "Virtual Machine Manually Taken Offline  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### stickyOnly
                    @Summary = "Virtual Machine Only Accepting 'Sticky Association' Connections  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### externalFailed
                    @Summary = "Virtual Machine Failed  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "7": ### ciscoLocalDirectorERealStateChange

            ##########
            # When a Real machine changes state, a notification is sent.
            #
            # $1 = cldeRealState - The service state of the real machine
            #        (default is 0, which is all clients.
            ##########

            @AlertGroup = "Real Machine Status"
            @AlertKey = extract ($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$") ### cldeRealIpAddress.cldeRealPort.cldeRealBindID.cldeRealProtocol
            switch($1)
            {
                case "1": ### inService
                    @Summary = "Real Machine In Service  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### outOfService
                    @Summary = "Real Machine Out of Service, Manually  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### testing
                    @Summary = "Real Machine Failed, Being Tested  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "4": ### failed
                    @Summary = "Real Machine Failed  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "5": ### maxCapacity
                    @Summary = "Real Machine Reached Connection Limit  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### maintenance
                    @Summary = "Real Machine Manually Taken Offline  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### stickyOnly
                    @Summary = "Real Machine Only Accepting 'Sticky Association' Connections  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### externalFailed
                    @Summary = "Real Machine Failed  ( IP.Port.BindID.Protocol = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "8": ### ciscoLocalDirectorExVirtualStateChange

            ##########
            # When a Virtual machine changes state, a notification is sent.
            #
            # $1 = cldexVirtualState - The service state of the virtual
            #        machine.
            ##########

            @AlertGroup = "Virtual Machine Status"
            @AlertKey = extract ($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\.[A-Z|a-z|0-9|-|_|/]+)$") ### cldexVirtualIpAddress.cldexVirtualPort.cldexVirtualBindID.cldexVirtualProtocol.cldexVirtualRule
            switch($1)
            {
                case "1": ### inService
                    @Summary = "Virtual Machine In Service  ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### outOfService
                    @Summary = "Virtual Machine Out of Service, Manually ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### testing
                    @Summary = "Virtual Machine Failed, Being Tested ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "4": ### failed
                    @Summary = "Virtual Machine Failed ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "5": ### maxCapacity
                    @Summary = "Virtual Machine Reached Connection Limit  ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### maintenance
                    @Summary = "Virtual Machine Manually Taken Offline  ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "7": ### stickyOnly
                    @Summary = "Virtual Machine Only Accepting 'Sticky Association' Connections  ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "8": ### externalFailed
                    @Summary = "Virtual Machine Failed  ( IP.Port.BindID.Protocol.Rule = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.67.2": ### Cisco Optical Patch - Notifications from CISCO-OPTICAL-PATCH-MIB

    @Agent = "Cisco-Optical Patch"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cOPatchEvent

            ##########
            # This notification is generated when ever a patch is created,
            # modified or deleted.
            #
            # $1 = cOPatchLowIfIndex - The value of this object is equal to MIB
            #        II's ifIndex value of the interface for this patch. The
            #        term low implies that this interface has the numerically
            #        lower ifIndex value than the other interface identified in
            #        the same cOPatchEntry. The value of this object is
            #        specified during row creation, and can never be changed.
            # $2 = cOPatchHighIfIndex - The value of this object is equal to
            #        MIB II's ifIndex value of the interface for this patch.
            #        The term high implies that this interface has the
            #        numerically higher ifIndex value than the other interface
            #        identified in the same cOPatchEntry. The value of this
            #        object is specified during row creation, and can never be
            #        changed.
            # $3 = cOPatchType - The creation type of the patch. The use is as
            #        follows:
            #        provisioned(1) Provisioned by the user or by a management
            #          system using the Command Line Interface, SNMP, or other
            #          means of management access to the network element.
            #        automatic(2) Created automatically by the network element,
            #          without user or management intervention. In particular,
            #          this is used to represent fixed patches due to the
            #          presence of entities such as optical backplanes.
            # $4 = cOPatchStatus - This object indicates the error status of
            #        the patch. The use is as follows:
            #        noError(1) This value indicates a patch with no error.
            #        otherError(2) This value indicates an unknown patch error.
            #        interfaceError(3) This value indicates one or both
            #          interfaces are of the wrong type for a patch or the two
            #          interfaces are not supposed to be patched together.
            #        interfaceChannelError(4) This value indicates the
            #          frequency channel of the two interfaces in this patch
            #          entry do not match.
            # $5 = cOPatchEventType - The event type of the patch. The use is
            #        as follows:
            #        create(1) The value of this object when cOPatchEvent is
            #          generated upon creation of a patch.
            #        delete(2) The value of this object when cOPatchEvent is
            #          generated upon deletion of a patch.
            #        modify(3) The value of this object when cOPatchEvent is
            #          generated upon modification of a patch.
            ##########

            @AlertGroup = "Patch Status"
            @AlertKey = $1 + "." + $2 ### cOPatchLowIfIndex.cOPatchHighIfIndex
            switch($4)
            {
                case "1": ### noError - This value indicates a patch with no error.
                    @Summary = "Optical Patch Normal"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### otherError - This value indicates an unknown patch error.
                    @Summary = "Optical Patch Unknown Error"
                    @Severity = 3
                    @Type = 1
                case "3": ### interfaceError - This value indicates one or both interfaces are of the wrong type for a patch or the two interfaces are not supposed to be patched together.
                    @Summary = "Optical Patch Wrong Interface Type"
                    @Severity = 3
                    @Type = 1
                case "4": ### interfaceChannelError - This value indicates the frequency channel of the two interfaces in this patch entry do not match.
                    @Summary = "Optical Patch Frequency Channel Mismatch"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.202.2": ### Cisco Optical Supervisory Channel Protocol (OSCP) - Notifications from CISCO-OSCP-MIB 

    @Agent = "Cisco-OSCP"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### coscpNotifyTransDown

            ##########
            # A coscpNotifyTransDown notification is sent when the value of an
            # instance of coscpTransDown increments. This indicates that a link
            # exited the 'twoWay' state and cannot be used to carry control and
            # management traffic for an optical supervisory channel.
            #
            # $1 = coscpLinkTransDown - This object contains a count of the
            #        number of times this link transitioned from the 'twoWay'
            #        state to a hello state other than 'twoWay'.
            ##########

            @AlertGroup = "OSCP Link Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$")
            @Summary = "Optical Supervisory Channel Link Down  ( coscpLinkPortId = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.184.2": ### Cisco Protocol Independent Multicast (PIM) - Notifications from CISCO-PIM-MIB

    @Agent = "Cisco-PIM"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoPimInterfaceUp

            ##########
            # A ciscoPimInterfaceUp notification signifies the restoration
            # of a PIM interface. This notification should be generated
            # whenever pimInterfaceStatus transitions into the 'active' state.
            # pimInterfaceStatus identifies the interface which was involved in
            # the generation of this notification.
            #
            # $1 = pimInterfaceStatus - The status of this entry.  Creating the
            #        entry enables PIM on the interface; destroying the entry
            #        disables PIM on the interface.
            ##########

            @AlertGroup = "PIM Interface Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### pimInterfaceIfIndex
            @Summary = "PIM Interface Up  ( " + @AlertKey + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ciscoPimInterfaceDown

            ##########
            # A ciscoPimInterfaceDown notification signifies the loss of a PIM
            # interface. This notification should be generated whenever an
            # entry is about to be deleted from the PimInterfaceTable.
            # pimInterfaceStatus identifies the interface which was involved in
            # the generation of this notification.
            #
            # $1 = pimInterfaceStatus - The status of this entry.  Creating the
            #        entry enables PIM on the interface; destroying the entry
            #        disables PIM on the interface.
            ##########

            @AlertGroup = "PIM Interface Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### pimInterfaceIfIndex
            @Summary = "PIM Interface Down  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### ciscoPimRPMappingChange

            ##########
            # A ciscoPimRPMappingChange notification signifies a change in the
            # RP Mapping on the device in question. A change in RP Mapping
            # could be because of addition of new entries to the RP Mapping
            # cache, deletion of existing entries, or a modification to an
            # existing mapping. The type of change is indicated by
            # cpimRPMappingChangeType. pimRPSetHoldTime is used to identify the
            # row in the pimRPSetTable that is responsible for the generation
            # of this notification. In case of modification to existing
            # entries, a notification should be generated once before the
            # modification (with cpimRPMappingChangeType set to
            # modifiedOldMapping) and once after modification (with
            # cpimRPMappingChangeType set to modifiedNewMapping).
            #
            # NOTE: A high frequency of RP Mapping change could result in a
            # large number of ciscoPimRPMappingChange notifications being
            # generated. Hence, in environments where the possibility of a high
            # frequency of RP Mapping change exists, enable this notification
            # with utmost care.
            #
            # $1 = pimRPSetHoldTime - The holdtime (in seconds)of a
            #        Candidate-RP.  If the local router is not the BSR, this
            #        value is 0.
            # $2 = cpimRPMappingChangeType - Describes the operation that
            #        resulted in generation of cpimRPMappingChange
            #        notification. (see lookup table)
            ##########

            @AlertGroup = "RP Mapping"
            @AlertKey = extract($OID1, "61\.1\.1\.6\.1\.4\.(.*)$") ### pimRPSetComponent.pimRPSetGroupAddress.pimRPSetGroupMask.pimRPSetAddress
            @Summary = lookup($2, cpimRPMappingChangeType) + "  ( Component.GroupAddr.GroupMask.Addr = " + @AlertKey + " )"
            switch($2)
            {
                case "1": ### newMapping
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### deletedMapping
                    @Severity = 3
                    @Type = 1
                case "3": ### modifiedOldMapping
                    @Severity = 2
                    @Type = 1
                case "4": ### modifiedNewMapping
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "4": ### ciscoPimInvalidRegister

            ##########
            # A ciscoPimInvalidRegister notification signifies that an invalid
            # Register message was received by this device. This notification
            # is generated whenever the cpimInvalidRegisterMsgsRcvd counter is
            # incremented. cpimLastErrorOrigin, cpimLastErrorGroup, and
            # cpimLastErrorRP should signify the source address, group address
            # and the RP address in the invalid register packet.
            #
            # $1 = cpimLastErrorOriginType - Represents the type of address
            #        stored in cpimLastErrorOrigin. The value of this object is
            #        irrelevant if the value of cpimLastErrorType is none(1).
            # $2 = cpimLastErrorOrigin - This object represents the Network
            #        Layer Address of the source that originated the last
            #        invalid packet. The type of address stored depends on the
            #        value in cpimLastErrorOriginType. The value of this object
            #        represents the Network Layer Address of the Designated
            #        Router (DR) whenever the value of cpimLastErrorGroup is a
            #        zero-length address, for eg. when encapsulated IP header
            #        is malformed. The value of this object is irrelevant if
            #        the value of cpimLastErrorType is none(1).
            # $3 = cpimLastErrorGroupType - Represents the type of address
            #        stored in cpimLastErrorGroup. The value of this object is
            #        unknown(0) if there is a problem in the packet received
            #        from the DR. The value of this object is irrelevant if the
            #        value of cpimLastErrorType is none(1).
            # $4 = cpimLastErrorGroup - The IP multicast group address to which
            #        the last invalid packet was addressed. The type of address
            #        stored depends on the value in cpimLastErrorGroupType. The
            #        value of this object is a zero-length InetAddress if there
            #        is a problem in the packet received from the DR, for eg. a
            #        malformed encapsulated IP header. The value of this object
            #        is irrelevant if the value of cpimLastErrorType is
            #        none(1).
            # $5 = cpimLastErrorRPType - Represents the type of address stored
            #        in cpimLastErrorRP. The value of this object is irrelevant
            #        if the value of cpimLastErrorType is none(1).
            # $6 = cpimLastErrorRP - The address of the RP, as per the last
            #        invalid packet. The type of address stored depends on the
            #        value in cpimLastErrorRPType. The value of this object is
            #        irrelevant if the value of cpimLastErrorType is none(1).
            # $7 = cpimInvalidRegisterMsgsRcvd - A count of the number of
            #        invalid PIM Register messages received by this device. A
            #        PIM Register message is termed invalid if
            #        - the encapsulated IP header is malformed,
            #        - the destination of the PIM Register message is not the
            #            RP (Rendezvous Point) for the group in question,
            #        - the source/DR (Designated Router) address is not a valid
            #            unicast address.
            ##########

            @AlertGroup = "Register Message"
            @AlertKey = $2 + "." + $4 + "." + $6
            @Summary = "Invalid Register Message  ( Origin = " + $2 + ", Group = " + $4 + " RP = " + $6 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### ciscoPimInvalidJoinPrune

            ##########
            # A ciscoPimInvalidJoinPrune notification signifies the receipt of
            # an invalid join/prune message. This notification is generated
            # whenever the cpimInvalidJoinPruneMsgsRcvd counter is incremented.
            # cpimLastErrorOrigin, cpimLastErrorGroup, and cpimLastErrorRP
            # should signify the source address, group address and the RP
            # address in the invalid join/prune packet.
            #
            # $1 = cpimLastErrorOriginType - Represents the type of address
            #        stored in cpimLastErrorOrigin. The value of this object is
            #        irrelevant if the value of cpimLastErrorType is none(1).
            # $2 = cpimLastErrorOrigin - This object represents the Network
            #        Layer Address of the source that originated the last
            #        invalid packet. The type of address stored depends on the
            #        value in cpimLastErrorOriginType. The value of this object
            #        represents the Network Layer Address of the Designated
            #        Router (DR) whenever the value of cpimLastErrorGroup is a
            #        zero-length address, for eg. when encapsulated IP header
            #        is malformed. The value of this object is irrelevant if
            #        the value of cpimLastErrorType is none(1).
            # $3 = cpimLastErrorGroupType - Represents the type of address
            #        stored in cpimLastErrorGroup. The value of this object is
            #        unknown(0) if there is a problem in the packet received
            #        from the DR. The value of this object is irrelevant if the
            #        value of cpimLastErrorType is none(1).
            # $4 = cpimLastErrorGroup - The IP multicast group address to which
            #        the last invalid packet was addressed. The type of address
            #        stored depends on the value in cpimLastErrorGroupType. The
            #        value of this object is a zero-length InetAddress if there
            #        is a problem in the packet received from the DR, for eg. a
            #        malformed encapsulated IP header. The value of this object
            #        is irrelevant if the value of cpimLastErrorType is
            #        none(1).
            # $5 = cpimLastErrorRPType - Represents the type of address stored
            #        in cpimLastErrorRP. The value of this object is irrelevant
            #        if the value of cpimLastErrorType is none(1).
            # $6 = cpimLastErrorRP - The address of the RP, as per the last
            #        invalid packet. The type of address stored depends on the
            #        value in cpimLastErrorRPType. The value of this object is
            #        irrelevant if the value of cpimLastErrorType is none(1).
            # $7 = cpimInvalidJoinPruneMsgsRcvd - A count of the number of
            #        invalid PIM Join/Prune messages received by this device. A
            #        PIM Join/Prune message is termed invalid if o the RP
            #        specified in the packet is not the RP for the group in
            #        question.
            ##########

            @AlertGroup = "Join/Prune"
            @AlertKey = $2 + "." + $4 + "." + $6
            @Summary = "Invalid Join/Prune Message  ( Origin = " + $2 + ", Group = " + $4 + " RP = " + $6 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.194.2": ### Cisco PPPoE Sessions Management - Notifications from CISCO-PPPOE-MIB

    @Agent = "Cisco-PPPoE"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cPppoeSystemSessionThresholdTrap

            ##########
            # A notification indicating that number of active sessions on the
            # system exceeded system sessions threshold value. System sessions
            # threshold value is indicated by cPppoeSystemThresholdSessions. An
            # agent must not generate more than one cPppoeSessionThresholdTrap
            # `trap-event` in a N second period, where a `trap-event` is the
            # transmission of a single trap PDU to a list of trap destinations.
            # If additional `the number of PPPoE sessions exceeds threshold`
            # condition occur within the N second `throttling` period, then
            # these trap-events should be suppressed by the agent. An NMS
            # should periodically check the value of cPppoeCurrSessions to
            # detect any missed cPppoeVcSessionThresholdTrap trap-events, e.g.
            # due to throttling or transmission loss. Where N is the
            # `throttling` period of trap-event. Default value of the N is
            # equal to 30 seconds
            #
            # $1 = cPppoeSystemCurrSessions - The current number of active
            #        PPPoE sessions within this system.
            # $2 = cPppoeSystemMaxAllowedSessions - Maximum number of allowed
            #        PPPoE sessions within the system.
            # $3 = cPppoeSystemThresholdSessions - Threshold value of the
            #        established PPPoE sessions within the system. Default
            #        value is equal to cPppoeSystemMaxSessionsConfigurable.
            ##########

            @AlertGroup = "System Session Threshold"
            @AlertKey = ""
            @Summary = "Active System Sessions ( " + $1 + " ) exceeded System Sessions Threshold ( " + $3 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cPppoeVcSessionThresholdTrap

            ##########
            # A notification indicating that number of active sessions on the
            # VC exceeded vc sessions threshold value. VC sessions threshold
            # value is indicated by cPppoeVcThresholdSessions. An agent must
            # not generate more than one cPppoeVcSessionThresholdTrap
            # `trap-event` in a N second period, where a `trap-event` is the
            # transmission of a single trap PDU to a list of trap destinations.
            # If additional `the number of PPPoE sessions exceeds threshold`
            # condition occur within the N second `throttling` period, then
            # these trap-events should be suppressed by the agent. An NMS
            # should periodically check the value of cPppoeVcCurrSessions to
            # detect any missed cPppoeVcSessionThresholdTrap trap-events, e.g.
            # due to throttling or transmission loss. Where N is the
            # `throttling` period of trap-event. Default value of the N is
            # equal to 30 seconds.
            #
            # $1 = cPppoeVcCurrSessions - The current number of active PPPoE
            #        sessions on the VCL.
            # $2 = cPppoeVcMaxAllowedSessions - The maximum number of allowed
            #        PPPoE sessions on the VCL.
            # $3 = cPppoeVcThresholdSessions - The Threshold value of the
            #        established PPPoE sessions on the VCL. Default value is
            #        equal to cPppoeVcMaxAllowedSessions.
            ##########

            @AlertGroup = "VC Session Threshold"
            @AlertKey = ""
            @Summary = "Active VC Sessions ( " + $1 + " ) exceeded VC Sessions Threshold ( " + $3 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.176.2": ### Cisco Redundancy Framework (RF) Subsystem - Notifications from CISCO-RF-MIB

    @Agent = "Cisco-Redundancy Framework"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoRFSwactNotif

            ##########
            # A SWACT notification is sent by the newly active redundant unit
            # whenever a switch of activity occurs. In the case where a SWACT
            # event may be indistinguishable from a reset event, a network
            # management station should use this notification to differentiate
            # the activity. sysUpTime is the same sysUpTime defined in the
            # RFC-1213 MIB.
            #
            # $1 = cRFStatusUnitId - A unique identifier for this redundant
            #        unit. This identifier is implementation-specific but the
            #        method for selecting the id must remain consistent
            #        throughout the redundant system. Some example identifiers
            #        include: slot id, physical or logical entity id, or a
            #        unique id assigned internally by the RF subsystem.
            # $2 = sysUpTime
            # $3 = cRFStatusLastSwactReasonCode - The reason for the last
            #        switch of activity.
            ##########

            $cRFStatusUnitId = $1
            $sysUpTime = $2
            $cRFStatusLastSwactReasonCode = lookup($3, RFSwactReasonType)
            
            @AlertGroup = "SWACT Status"
            @AlertKey = $1
            @Summary = "SWACT: " + $1 + " Active: " + $cRFStatusLastSwactReasonCode
            switch($3)
            {
                case "1": ### unsupported - the 'reason code' is an unsupported feature
                    @Severity = 3
                    @Type = 1
                case "2": ### none - no SWACT has occurred
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### notKnown - reason is unknown
                    @Severity = 3
                    @Type = 1
                case "4": ### userInitiated - a safe, manual SWACT was initiated by user
                    @Severity = 2
                    @Type = 1
                case "5": ### userForced - a manual SWACT was forced by user; ignoring pre-conditions, warnings and safety checks
                    @Severity = 3
                    @Type = 1
                case "6": ### activeUnitFailed - active unit failure caused an auto SWACT
                    @Severity = 4
                    @Type = 1
                case "7": ### activeUnitRemoved - active unit removal caused an auto SWACT
                    @Severity = 4
                    @Type = 1
                default:
                    @Severity = 2
                    @Type = 1
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager
            
            $cRFStatusLastSwactReasonCode = $cRFStatusLastSwactReasonCode + " ( " + $3 + " )"
            #details($cRFStatusUnitId,$sysUpTime,$cRFStatusLastSwactReasonCode)

        case "2": ### ciscoRFProgressionNotif

            ##########
            # A progression notification is sent by the active redundant unit
            # whenever its RF state changes or the RF state of the peer unit
            # changes. To avoid a flurry of notifications for all state
            # transitions, notifications will only be sent for transitions to
            # the following RF states: standbyCold standbyHot active
            # activeExtraload.
            #
            # $1 = cRFStatusUnitId - A unique identifier for this redundant
            #        unit. This identifier is implementation-specific but the
            #        method for selecting the id must remain consistent
            #        throughout the redundant system. Some example identifiers
            #        include: slot id, physical or logical entity id, or a
            #        unique id assigned internally by the RF subsystem.
            # $2 = cRFStatusUnitState - The current state of RF on this unit.
            # $3 = cRFStatusPeerUnitId - A unique identifier for the redundant
            #        peer unit. This identifier is implementation-specific but
            #        the method for selecting the id must remain consistent
            #        throughout the redundant system. Some example identifiers
            #        include: slot id, physical or logical entity id, or a
            #        unique id assigned internally by the RF subsystem.
            # $4 = cRFStatusPeerUnitState - The current state of RF on the peer
            #        unit.
            ##########

            $cRFStatusUnitId = $1
            $cRFStatusUnitState = lookup($2, RFState)
            $cRFStatusPeerUnitId = $3
            $cRFStatusPeerUnitState = lookup($4, RFState)
            
            @AlertGroup = "Redundant Unit Status"
            @AlertKey = "Unit ID: " + $1 + ", Peer Unit ID: " + $3
            @Summary = "Redundant Unit State Change, Unit: " + $cRFStatusUnitState + ", Peer Unit: " + $cRFStatusPeerUnitState
            @Severity = 2
            @Type = 1200
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2 + " " + $4
            
            $cRFStatusUnitState = $cRFStatusUnitState + " ( " + $2 + " )"
            $cRFStatusPeerUnitState = $cRFStatusPeerUnitState + " ( " + $4 + " )"
            #details($cRFStatusUnitId,$cRFStatusUnitState,$cRFStatusPeerUnitId,$cRFStatusPeerUnitState)
            
            update(@Summary)
            update(@Type)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.161.2": ### Cisco Server Load Balancer - Notifications from CISCO-SLB-MIB

    @Agent = "Cisco-SLB"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoSlbVirtualStateChange

            ##########
            # The notification generated when a virtual server changes to a new
            # state. The value of slbVirtualServerState indicates the new
            # state.
            #
            # $1 = slbVirtualServerState - The state of virtual server.
            ##########

            @AlertGroup = "Virtual Server Status"
            @AlertKey = extract($OID1, "9\.161\.1\.4\.1\.1\.2\.(.*)$") ### slbEntity.slbVirtualServerName
            switch($1)
            {
                case "1": ### outOfService - Virtual server is not active and is not affecting client traffic in any way.
                    @Summary = "Virtual Server Out of Service  ( Entity.ServerName = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "2": ### inService - Virtual server is active and is load-balancing matching client traffic to available real servers.
                    @Summary = "Virtual Server In Service  ( Entity.ServerName = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### standby - Virtual server is a backup for a virtual server on another SLB device, and is currently inactive.
                    @Summary = "Virtual Server in Standby  ( Entity.ServerName = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "2": ### ciscoSlbRealStateChange

            ##########
            # The notification generated when a real server changes to a new
            # state. The value of slbRealServerState indicates the new state.
            #
            # $1 = slbRealState - The current state of real server.
            ##########

            @AlertGroup = "Real Server Status"
            @AlertKey = extract($OID1, "9\.161\.1\.3\.1\.1\.2\.(.*)$") ### slbEntity.slbRealServerFarmName.slbRealIpAddress.slbRealPort
            switch($1)
            {
                case "1": ### outOfService - Server is not in use by SLB as a destination for client connections. This state can be written and read.
                    @Summary = "Server Out of Service  ( Entity.ServFarmName.IpAddr.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "2": ### inService - Server is in use as a destination for SLB client connections. This state can be written and read.
                    @Summary = "Server In Service  ( Entity.ServFarmName.IpAddr.Port = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "3": ### failed - Server has failed and will not be retried for retry timer seconds. This state can only be read.
                    @Summary = "Server Failed  ( Entity.ServFarmName.IpAddr.Port = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "4": ### readyToTest - Server has failed and has an expired retry timer, test connections will begin flow to it soon. This state can only be read.
                    @Summary = "Server Ready to Test  ( Entity.ServFarmName.IpAddr.Port = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### testing - Server has failed and been given another test connection, success of this connection is not known yet. This state can only be read.
                    @Summary = "Server Testing  ( Entity.ServFarmName.IpAddr.Port = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "6": ### maxConnsThrottle - Server has reached its maximum number of connections and is no longer being given connections. This state can only be read.
                    @Summary = "Server Reached Maximum Connections  ( Entity.ServFarmName.IpAddr.Port = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.73.2": ### Cisco SS7 Signalling Point - Notifications from CISCO-SP-MIB 

    @Agent = "Cisco-SS7 SP"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoSpLinksetStateChange

            ##########
            # The notification generated when a linkset changes to a new state.
            # The value of cSpLinksetState indicates the new state.
            #
            # $1 = cSpLinksetState - The status of this linkset.
            ##########

            @AlertGroup = "SP Linkset Status"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_|/]+)$") ### cSpLinksetName
            switch($1)
            {
                case "1": ### active - Traffic may flow over this link/linkset
                    @Summary = "Signalling Point Linkset Active  ( Linkset = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### inactive - Traffic cannot flow over this link/linkset.
                    @Summary = "Signalling Point Linkset Inactive ( Linkset = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### inhibited - Traffic cannot flow over this link/linkset. This state was reached as a result of administrative action.
                    @Summary = "Signalling Point Linkset Administratively Inhibited  ( Linkset = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### uninhibited - The link/linkset is available at the MTP3 layer. 
                    @Summary = "Signalling Point Linkset Administratively Uninhibited  ( Linkset = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "5": ### shut - The link/linkset has been forced to an unavailable state by an administrative action.
                    @Summary = "Signalling Point Linkset Administratively Unavailable  ( Linkset = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### noshut - The link/linkset has been removed from an unavailable state by an administrative action.
                    @Summary = "Signalling Point Linkset Administratively Available  ( Linkset = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "2": ### ciscoSpLinkStateChange

            ##########
            # The notification generated when a linkset changes to a new state.
            # The value of cSpLinkState indicates the new state.
            #
            # $1 = cSpLinkState - The status of this link.
            ##########

            @AlertGroup = "SP Link Status"
            @AlertKey = extract($OID1, "\.([A-Z|a-z|0-9|-|_|/]+\.[0-9]+)$") ### cSpLinksetName.cSpLinkSlc
            switch($1)
            {
                case "1": ### active - Traffic may flow over this link/linkset
                    @Summary = "Signalling Point Link Active  ( Linkset.LinkSlc = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### inactive - Traffic cannot flow over this link/linkset.
                    @Summary = "Signalling Point Link Inactive ( Linkset.LinkSlc = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "3": ### inhibited - Traffic cannot flow over this link/linkset. This state was reached as a result of administrative action.
                    @Summary = "Signalling Point Link Administratively Inhibited  ( Linkset.LinkSlc = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### uninhibited - The link/linkset is available at the MTP3 layer. 
                    @Summary = "Signalling Point Link Administratively Uninhibited ( Linkset.LinkSlc = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "5": ### shut - The link/linkset has been forced to an unavailable state by an administrative action.
                    @Summary = "Signalling Point Link Administratively Unavailable ( Linkset.LinkSlc = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                case "6": ### noshut - The link/linkset has been removed from an unavailable state by an administrative action.
                    @Summary = "Signalling Point Link Administratively Available ( Linkset.LinkSlc = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.60.5": ### Cisco Spatial Reuse Protocol (SRP) - Notifications from CISCO-SRP-MIB

    @Agent = "Cisco-SRP"
    @Class = "40057"

    ##########
    # NOTE: All Cisco SRP traps contain the following variable bindings.
    #
    # $1 = ifIndex
    # $2 = srpIpsState - Each node in the Intelligent Protection Switching
    #        (IPS) is one of the following states.
    #        (1)Idle - In this mode the node is ready to perform protection and
    #             it sends to both neighboring nodes idle IPS messages, which
    #             include self in the source address field {0, SELF, 0, S}.
    #        (2)PassThrough - Node participate in a protection switch by
    #             passing the wrapped traffic and long path signalling through
    #             itself. This state is entered based on received IPS messages.
    #        (3)Wrapped - Node participate in a protection switch with a wrap
    #             present. This state is entered based on protection request
    #             issued locally or based on received IPS messages. When
    #             interface is down the value for IPS state is passThrough.
    # $3 = srpMACIpsAutoDetectMode - The current IPS mode as automatically
    #        detected by the the local node that can affect the
    #        srpMACIpsActiveMode state of the SRP node, according to the set
    #        of rules describing IPS protocol.  This variable value is one from
    #        the following subset (SignalFail, SignalDegrade, WaitToRestore).
    # $4 = srpMACIpsRemoteMode - The IPS mode indicated in IPS messages being
    #        received by the local node from other nodes on the ring, that can
    #        affect the srpMACIpsActiveMode state of the SRP node, according to
    #        the set of rules describing IPS protocol.
    # $5 = srpMACIpsRemoteType - Indicates if srpMACIpsRemoteMode object value
    #        belongs to the adjacent node in the case of the shortPath or
    #        belongs to the non-adjacent node in the case of the longPath.
    # $6 = srpMACIpsActiveMode - The currently active IPS mode for the local
    #        node, which can be changed based on combined effect of the
    #        following variables: srpMACIpsMgmtRequestedMode,
    #        srpMACIpsAutoDetectMode, srpMACIpsRemoteMode, and
    #        srpMACIpsRemoteType according to the set of rules describing IPS
    #        protocol.
    # $7 = srpMACIpsWrapCounter - The number of transition from unwrap to wrap
    #        state.
    # $8 = srpMACIpsLastWrapTimeStamp - The value of sysUpTime for the last
    #        wrap.
    # $9 = srpMACIpsLastUnWrapTimeStamp - The value of sysUpTime for the last
    #        unwrap.
    ##########
    
    switch ($specific-trap)
    {
        case "1": ### srpTrapRingWrapped
            ##########
            # An srpTrapRingWrapped notification is sent when the value of an
            # instance of srpMACIpsWrapCounter increments.
            ##########

            @AlertGroup = "IPS Wrapping"
            @AlertKey = $1
            @Summary = "SRP Interface Wrapped, " + lookup($6, IpsMode) + "  ( ifIndex = " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $6 + " " + @Agent + " " + @Manager

        case "2": ### srpTrapRingRestored

            ##########
            # An srpTrapRingRestored notification is sent when the value of an
            # instance of rpMACIpsLastUnWrapTimeStamp is changed.
            ###########

            @AlertGroup = "IPS Wrapping"
            @AlertKey = $1
            @Summary = "SRP Interface Restored, " + lookup($6, IpsMode) + "  ( ifIndex = " + $1 + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $6 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.131.2": ### Cisco System - Notifications from CISCO-SYSTEM-MIB

    @Agent = "Cisco-System"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoSystemClockChanged

            ##########
            # A clock changed notification is generated when the current local
            # date and time for the system has been manually changed. The value
            # of csyClockDateAndTime reflects new date and time.
            #
            # $1 = csyClockDateAndTime - The current local date and time for
            #        the system. Setting this object is equivalent to setting
            #        an automated clock and calendar. The value of the object
            #        will track the date and time from the value set. Note that
            #        due to hardware limitations some systems may not be able
            #        to preserve such meaning across reboots of the system, as
            #        indicated by csyClockLostOnReboot. A constant value of all
            #        zeros and length 8 indicates the system is not aware of
            #        the present date and time. This object may be read-only on
            #        some systems.
            ##########

            $csyClockDateAndTime = $1
            #details($csyClockDateAndTime)

            @AlertGroup = "System Clock"
            @AlertKey = ""
            @Summary = "Local Date and Time Manually Changed to " + $1
            @Severity = 2
            @Type = 600
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5.32.1.1": ### Catalyst 3900 and 3920 Token Ring Switches (ciscoTsConfig) - Traps from CISCO-TS-STACK-MIB

    @Agent = "Cisco-TS Configuration"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoTsStackCfgChange

            ##########
            # This trap is generated when there is a change in the stack
            # configuration i.e. when either a new switch is added to the stack
            # or a switch leaves a stack. ciscoTsNumSwitches indicates the
            # current number of switches which are part of the stack. The
            # management station should update its stack information according
            # to the stack table.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsNumSwitches - Total number of switches in the stack.
            ##########

            @AlertGroup = "Stack Configuration"
            @AlertKey = ""
            @Summary = "Switch Added or Removed from Stack"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ciscoTsStackProStackMatrixChange

            ##########
            # This trap is generated when the stack switches over from primary
            # to secondary Matrix or from secondary back to primary Matrix.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsProStackMatrixStatus - Status of the Active Matrix
            #        module in the stack. This object is set to none(3) if the
            #        switch is not connected to a Matrix.
            ##########

            @AlertGroup = "Stack Matrix"
            @AlertKey = ""
            switch($3)
            {
                case "1": ### primary
                    @Summary = "Stack Switched Over to Primary Matrix" 
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### secondary
                    @Summary = "Stack Switched Over to Secondary Matrix" 
                    @Severity = 3
                    @Type = 1
                case "3": ### none
                    @Summary = "Stack Not Connected to a Matrix" 
                    @Severity = 2
                    @Type = 1
                case "4": ### failed
                    @Summary = "Stack Matrix Failed" 
                    @Severity = 4
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5.32.2": ### Catalyst 3900 and 3920 Token Ring Switches (ciscoTsStack) - Traps from CISCO-TS-STACK-MIB

    @Agent = "Cisco-TS Stack"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "3": ### ciscoTsStackTempChange

            ##########
            # This trap is generated when the temperature in a switch exceeds
            # normal or returns to normal.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsStackSwitchTemperature - Temperature of each switch
            #        reported in degrees Celsius.
            ##########

            @AlertGroup = "Stack Temperature"
            @AlertKey = ""
            @Summary = "Stack Switch Temperature " + $3 + "C"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### ciscoTsStackPwrStatusChange

            ##########
            # This trap is generated when the status of the power supply
            # changes.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsStackSwitchPwrSupplyStatus - The status of the power
            #        supply of the switch. (see lookup table)
            ##########

            @AlertGroup = "Stack Power"
            @AlertKey = ""
            @Summary = "Stack Power State Change to " + lookup($1, ciscoTsStackSwitchPwrSupplyStatus)
            @Severity = 2
            @Type = 600
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5.32.4": ### Catalyst 3900 and 3920 Token Ring Switches (ciscoTsPort) - Traps from CISCO-TS-STACK-MIB

    @Agent = "Cisco-TS Port"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoTsPortStrNFwdEntry

            ##########
            # This trap is generated when a port automatically enters store and
            # forward mode when the error rate exceeds the threshold.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsPortCfgActualForwardingMode - Actual operational
            #        frame switching mode for the port.
            ##########

            @AlertGroup = "Port Store and Forward"
            @AlertKey = extract($OID3, "\.([0-9]+\.[0-9]+)$") ### ciscoTsStackSwitchNumber.ciscoTsPortCfgNumber
            @Summary = "Port Automatically Entered Store and Forward Mode  ( Switch.Port = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "2": ### ciscoTsPortCfgLossTrap

            ##########
            # This trap occurs when a port is disabled because it has exceeded
            # its Configuration Loss Threshold within the configured Sampling
            # Period.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsPortStatsCfgLoss - Number of events, as described in
            #        ciscoTsPortCfgLossRC, after the port has completed the
            #        join process and then lost communication.
            ##########

            @AlertGroup = "Port Configuration"
            @AlertKey = extract($OID3, "\.([0-9]+\.[0-9]+)$") ### ciscoTsStackSwitchNumber.ciscoTsPortCfgNumber
            @Summary = "Port Disabled, Configuration Loss Threshold Exceeded  ( Switch.Port = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        case "3": ### ciscoTsBeaconStart

            ##########
            # This trap is generated when a port or a station local to a port
            # begins to beacon. It is sent out only when a ring status change
            # indicates that a station is beaconing.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsPortCfgNumber - A unique value for each port entry.
            #        The value corresponds the port number.
            ##########

            @AlertGroup = "Station Beacon"
            @AlertKey = $3
            @Summary = "Station Beaconing on Port " + $3
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### ciscoTsBeaconEnd

            ##########
            # This trap is generated when the ring status change indicates that
            # a ring is no longer beaconing. This trap only occurs only once
            # when the status actually changes.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsPortCfgNumber - A unique value for each port entry.
            #        The value corresponds the port number.
            ##########

            @AlertGroup = "Station Beacon"
            @AlertKey = $3
            @Summary = "Station Beaconing Ended on Port " + $3
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### ciscoTsDuplicateMACAddr

            ##########
            # This trap is generated when a duplicate MAC address is detected
            # on a port in a TrCRF which already has learned that MAC address.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsPortCfgNumber - A unique value for each port entry.
            #        The value corresponds the port number.
            ##########

            @AlertGroup = "Duplicate MAC Address"
            @AlertKey = $3
            @Summary = "Duplicate MAC Address Detected on Port " + $3 + " in a TrCRF"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "6": ### ciscoTsPortSoftErrExceededTrap

            ##########
            # This trap is generated when a station local to a port exceeds its
            # Soft Error Threshold within the configured interval.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsStackSwitchNumber - Switch number as determined by
            #        the port number that the switch is connected to in a
            #        Matrix or as determined by the Stack Management software
            #        when two switches are connected back to back.
            # $4 = ciscoTsPortCfgNumber - A unique value for each port entry.
            #        The value corresponds the port number.
            # $5 = ringStationIfIndex
            # $6 = ringStationMacAddress
            # $7 = ifName
            ##########

            @AlertGroup = "Port Errors"
            @AlertKey = $3 + "." + $4
            @Summary = "Port " + $7 + " Exceeded Soft Error Threshold  ( Switch.Port = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5.32.6": ### Catalyst 3900 and 3920 Token Ring Switches (ciscoTsVLANS) - Traps from CISCO-TS-STACK-MIB

    @Agent = "Cisco-TS VLAN (TrCRF & TrBRF)"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoTsTrCRFNewRoot

            ##########
            # This trap is a TrCRF specific version of the newRoot trap as
            # described in RFC1493. The newRoot trap indicates that the sending
            # agent has become the new root of the Spanning Tree; the trap is
            # sent by a bridge soon after its election as the new root, e.g.,
            # upon expiration of the Topology Change Timer immediately
            # subsequent to its election. Implementation of this trap is
            # optional.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsTrCRFInfoTrCRFNumber - Unique identifier for this
            #        entry in the TrCRF table. Corresponds to the TrCRF number.
            #        It is also the index into the vtpVLANEntry table which is
            #        in the VTP MIB.
            ##########

            @AlertGroup = "TrCRF New Root"
            @AlertKey = $3
            @Summary = @Node + " is New Root of the Spanning Tree  ( TrCRF Number " + $3 + " )"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ciscoTsTrCRFTopologyChange

            ##########
            # This trap is a TrCRF specific version of the topologyChange trap
            # as described in RFC1493. A topologyChange trap is sent by a
            # bridge when any of its configured ports transitions from the
            # Learning state to the Forwarding state, or from the Forwarding
            # state to the Blocking state. The trap is not sent if a newRoot
            # trap is sent for the same transition. Implementation of this trap
            # is optional.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsTrCRFInfoTrCRFNumber - Unique identifier for this
            #        entry in the TrCRF table. Corresponds to the TrCRF number.
            #        It is also the index into the vtpVLANEntry table which is
            #        in the VTP MIB.
            ##########

            @AlertGroup = "TrCRF Topology Change"
            @AlertKey = $3
            @Summary = "Port Transitioned from Learning to Forwarding, or from Forwarding to Blocking  ( TrCRF Number " + $3 + " )"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### ciscoTsTrBRFNewRoot

            ##########
            # This trap is a TrBRF specific version of the newRoot trap as
            # described in RFC1493. The newRoot trap indicates that the sending
            # agent has become the new root of the Spanning Tree; the trap is
            # sent by a bridge soon after its election as the new root, e.g.,
            # upon expiration of the Topology Change Timer immediately
            # subsequent to its election. Implementation of this trap is
            # optional.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsTrBRFInfoTrBRFNumber - Unique identifier for this
            #        entry in the TrBRF table. Corresponds to the TrBRF number.
            #        It is also the index into the vtpVLANEntry table which is
            #        in the VTP MIB.
            ##########

            @AlertGroup = "TrBRF New Root"
            @AlertKey = $3
            @Summary = @Node + " is New Root of the Spanning Tree  ( TrBRF Number " + $3 + " )"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### ciscoTsTrBRFTopologyChange

            ##########
            # This trap is a TrBRF specific version of the topologyChange trap
            # as described in RFC1493. A topologyChange trap is sent by a
            # bridge when any of its configured ports transitions from the
            # Learning state to the Forwarding state, or from the Forwarding
            # state to the Blocking state. The trap is not sent if a newRoot
            # trap is sent for the same transition. Implementation of this trap
            # is optional.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsTrBRFInfoTrBRFNumber - Unique identifier for this
            #        entry in the TrBRF table. Corresponds to the TrBRF number.
            #        It is also the index into the vtpVLANEntry table which is
            #        in the VTP MIB.
            ##########

            @AlertGroup = "TrBRF Topology Change"
            @AlertKey = $3
            @Summary = "Port Transitioned from Learning to Forwarding, or from Forwarding to Blocking  ( TrBRF Number " + $3 + " )"
            @Severity = 2
            @Type = 0
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.5.32.7": ### Catalyst 3900 and 3920 Token Ring Switches (ciscoTsTChannel) - Traps from CISCO-TS-STACK-MIB

    @Agent = "Cisco-TS TokenChannel"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoTsTokenChannelFailed

            ##########
            # This trap is sent when one of the links in an TokenChannel fail.
            # The variable ciscoTsTCPorts contains the ports which are
            # operational in the TokenChannel.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsTCPorts - The set of ports in this switch which are
            #        active in this channel. Each octet within the value of
            #        this object specifies a set of eight ports, with the first
            #        octet specifying ports 1 through 8, the second octet
            #        specifying ports 9 through 16, etc. Within each octet, the
            #        most significant bit represents the lowest numbered port,
            #        and the least significant bit represents the highest
            #        numbered port. Thus, each port of the switch is
            #        represented by a single bit within the value of this
            #        object. If that bit has a value of '1' then that port is
            #        included in the set of configured ports; the port is not
            #        included if its bit has a value of '0'. Set requests
            #        containing '1' values in one or more bit positions which
            #        do not have a '1' value in the corresponding position in
            #        ciscoTsStackSwitchPorts will fail with a 'badValue' error.
            #        The maximum number of ports in a channel and therefore the
            #        maximum number of bits in this object containing '1'
            #        values is 8.
            ##########

            @AlertGroup = "Token Channel Status"
            @AlertKey = extract($OID3, "\.([0-9]+\.[0-9]+)$") ### ciscoTsTCSwitchNumber.ciscoTsTCNumber
            @Summary = "Token Channel Failed  ( Switch.Channel = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### ciscoTsTokenChannelStatus

            ##########
            # This trap is sent to report a TokenChannel or ISLChannel status
            # change. The variable ciscoTsTCStatus contains the current channel
            # status. The variable ciscoTsTCPorts contains the ports which are
            # configured in the channel. The variable ciscoTsTCActivePorts
            # contains the ports which are active in the channel.
            #
            # $1 = sysName
            # $2 = sysLocation
            # $3 = ciscoTsTCStatus - The current running status of the channel.
            # $4 = ciscoTsTCPorts - The set of ports in this switch which
            #        are active in this channel. Each octet within the value of
            #        this object specifies a set of eight ports, with the first
            #        octet specifying ports 1 through 8, the second octet
            #        specifying ports 9 through 16, etc. Within each octet, the
            #        most significant bit represents the lowest numbered port,
            #        and the least significant bit represents the highest
            #        numbered port. Thus, each port of the switch is
            #        represented by a single bit within the value of this
            #        object. If that bit has a value of '1' then that port is
            #        included in the set of configured ports; the port is not
            #        included if its bit has a value of '0'. Set requests
            #        containing '1' values in one or more bit positions which
            #        do not have a '1' value in the corresponding position in
            #        ciscoTsStackSwitchPorts will fail with a 'badValue' error.
            #        The maximum number of ports in a channel and therefore the
            #        maximum number of bits in this object containing '1'
            #        values is 8.
            # $5 = ciscoTsTCActivePorts - The set of ports in this switch which
            #        are active in this channel. Each octet within the value of
            #        this object specifies a set of eight ports, with the first
            #        octet specifying ports 1 through 8, the second octet
            #        specifying ports 9 through 16, etc. Within each octet, the
            #        most significant bit represents the lowest numbered port,
            #        and the least significant bit represents the highest
            #        numbered port. Thus, each port of the switch is
            #        represented by a single bit within the value of this
            #        object. If that bit has a value of '1' then that port is
            #        included in the set of active ports; the port is not
            #        included if its bit has a value of '0'. The maximum number
            #        of ports in a channel and therefore the maximum number of
            #        bits in this object containing '1' values is 8.
            ##########

            @AlertGroup = "Token Channel Status"
            @AlertKey = extract($OID3, "\.([0-9]+\.[0-9]+)$") ### ciscoTsTCSwitchNumber.ciscoTsTCNumber
            switch($3)
            {
                case "": ### up
                    @Summary = "Token Channel Up  ( Switch.Channel = " + @AlertKey + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "": ### down
                    @Summary = "Token Channel Down  ( Switch.Channel = " + @AlertKey + " )"
                    @Severity = 4
                    @Type = 1
                case "": ### reduced
                    @Summary = "Token Channel Reduced  ( Switch.Channel = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.190.2"|".1.3.6.1.4.1.9.9.190.2.0": ### Cisco Voice Applications - Notifications from CISCO-VOICE-APPS-MIB

    @Agent = "Cisco-Voice Applications"
    @Class = "40057"
    
    ##########
    # NOTE: All Cisco Voice Application traps contain the following variable
    # bindings.
    #
    # $1 = cvaAlarmSeverity - The application alarm notification severity code.
    #        emergency: System unusable
    #        alert: Immediate response needed
    #        critical: Critical condition
    #        error: Error condition
    #        warning: Warning condition
    #        notice: Normal but significant condition
    #        informational: Informational situation.
    # $2 = cvaModuleName - The application module or subsystem name.
    ##########

    switch($1)
    {
        case "1": ### emergency
            @Severity = 5
            @Type = 1
        case "2": ### alert
            @Severity = 5
            @Type = 1
        case "3": ### critical
            @Severity = 4
            @Type = 1
        case "4": ### error
            @Severity = 3
            @Type = 1
        case "5": ### warning
            @Severity = 2
            @Type = 1
        case "6": ### notice
            #@Severity = 1
            @Severity = 2
            @Type = 1
        case "7": ### informational
            #@Severity = 1
            @Severity = 2
            @Type = 1
        default:
            @Severity = 2
            @Type = 1
    }
    
    switch ($specific-trap)
    {
        case "1": ### cvaModuleStart

            ##########
            # A cvaModuleStart notification signifies that an application
            # module or subsystem has successfully started and transitioned
            # into in-service state. This notification is working in
            # conjunction with the cvaModuleStop notification to notify the
            # start and stop status of a particular application module.
            ##########

            @AlertGroup = "Module Status"
            @AlertKey = $2
            @Summary = "Module " + $2 + " Started"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cvaModuleStop

            ##########
            # A cvaModuleStop notification signifies that an application module
            # or subsystem has stopped. This notification is working in
            # conjunction with the cvaModuleStart notification to notify the
            # start and stop status of a particular application module. If
            # failure cause is known then it will be specified in the
            # cvaModuleFailureCause variable. Additional failure information
            # associated with cvaModuleFailureCause can be specified in the
            # cvaModuleFailureCauseMessage.
            #
            # $3 = cvaModuleFailureCause - The application module failure cause
            #        code. This is used by cvaModuleStop to indicate reason of
            #        module stop if known. (see lookup table)
            # $4 = cvaModuleFailureName - The application module name which
            #        causes the failure.
            # $5 = cvaModuleFailureMessage - The application module failure
            #        message.
            ##########

            @AlertGroup = "Module Status"
            @AlertKey = $2
            @Summary = "Module " + $2 + " Stopped, " + lookup($3, cvaModuleFailureCause) + ", " + $4 + ", " + $5
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        case "3": ### cvaModuleRunTimeFailure

            ##########
            # A cvaModuleRunTimeFailure notification signifies that a runtime
            # failure has occurred. If failure cause is known then it will be
            # specified in the cvaModuleRunTimeFailureCause variable.
            # Additional failure information associated with
            # cvaModuleRunTimeFailureCause can be specified in the
            # cvaModuleFailureCauseMessage.
            #
            # $3 = cvaModuleRunTimeFailureCause - The application module
            #        run-time failure cause code. (see lookup table)
            # $4 = cvaModuleFailureName - The application module name which
            #        causes the failure.
            # $5 = cvaModuleFailureMessage - The application module failure
            #        message.
            ##########

            @AlertGroup = "Module Status"
            @AlertKey = $2
            @Summary = "Module " + $2 + " Runtime " + lookup($3, cvaModuleRunTimeFailureCause)
            if (!match($4, ""))
            {
                @Summary = @Summary + ", " + $4
            }
            if (!match($4, ""))
            {
                @Summary = @Summary + ", " + $5
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $4 + " " + @Agent + " " + @Manager

        case "4": ### cvaProcessStart

            ##########
            # A cvaProcessStart notification signifies that a process has just
            # started. This notification is intended to work in conjunction
            # with the caProcessStop notification to notify the start and stop
            # status of a particular process.
            #
            # $3 = cvaProcessId - A unique value for each of the process
            #        running on the host. Wherever possible, this should be
            #        the system's native, unique Identification number (process
            #        id).
            ##########

            @AlertGroup = "Process Status"
            @AlertKey = $2 + "." + $3 ### cvaModuleName.cvaProcessId
            @Summary = "Process Started  ( Module.ProcessID = " + @AlertGroup + " )"
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### cvaProcessStop

            ##########
            # A cvaProcessStop notification signifies that a process has just
            # stopped. This notification is intended to work in conjunction
            # with the cvaProcessStart notification to notify the start and
            # stop status of a particular process.
            #
            # $3 = cvaProcessId - A unique value for each of the process
            #        running on the host. Wherever possible, this should be the
            #        system's native, unique Identification number (process
            #        id).
            ##########

            @AlertGroup = "Process Status"
            @AlertKey = $2 + "." + $3 ### cvaModuleName.cvaProcessId
            @Summary = "Process Stopped  ( Module.ProcessID = " + @AlertGroup + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.63.2": ### Cisco Voice Dial Control - Notifications from CISCO-VOICE-DIAL-CONTROL-MIB

    @Agent = "Cisco-Voice Dial Control"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cvdcPoorQoVNotification

            ##########
            # Poor quality of voice notification. A cvdcPoorQoVNotification is
            # sent at the call disconnection time if the value of
            # cvVoIPCallHistoryIcpif exceeds the value of cvVoIPPeerCfgIcpif in
            # the call associated peer. 
            #
            # $1 = cvVoIPCallHistoryConnectionId - The global call identifier
            #        for the gateway call.
            # $2 = cvVoIPCallHistoryIcpif - The Calculated Planning Impairment
            #        Factor (Icpif) of the call that is associated to this call
            #        leg. The value in this object is computed by the following
            #        equation. Icpif of the call = Itotal (total impairment
            #        value) of the call - A (Expectation Factor) in the
            #        cvVoIPPeerCfgExpectFactor of the call leg associated peer.
            #        REFERENCE
            #        [1]ITU G.113: Section 7.2 Impairment factors and the total
            #           impairment value.
            #        [2]ITU G.113: Sections 9 Considerations associated with
            #           the Calculated Planning Impairment Factor (Icpif). 
            # $3 = cvVoIPCallHistoryRemoteIPAddress - Remote system IP address
            #        for the call. 
            # $4 = cCallHistoryCallOrigin - The call origin. {originate(1),
            #        answer(2), callback(3)}
            # $5 = cvCommonDcCallHistoryCoderTypeRate - The negotiated coder
            #        rate. It specifies the transmit rate of voice/fax
            #        compression to its associated call leg for the call. This
            #        rate is different from the configuration rate because of
            #        rate negotiation during the call.
            ##########

            @AlertGroup = "Quality of Voice"
            @AlertKey = $1
            switch($4)
            {
                case "1": ### originate
                    @Summary = "Poor Quality of Voice on Call to " + $3 + ", CoderTypeRate = " + lookup($5, CvcCoderTypeRate)
                case "2": ### answer
                    @Summary = "Poor Quality of Voice on Call from " + $3 + ", CoderTypeRate = " + lookup($5, CvcCoderTypeRate)
                case "3": ### callback
                    @Summary = "Poor Quality of Voice on Callback to " + $3 + ", CoderTypeRate = " + lookup($5, CvcCoderTypeRate)
                default:
            }
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.169.2": ### Cisco Wireless DOCS Extension - Notifications from CISCO-WIRELESS-DOCS-EXT-MIB

    @Agent = "Cisco-Wireless DOCS"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cwdxHeSuOnOffNotification

            ##########
            # This notification indicates that the SU coming online and going
            # offline. A notification will be sent from HE for a SU status
            # changing to online or offline within the interval specified in
            # cwdxHeSuOnOffTrapInterval.
            #
            # $1 = cwdIfHeSuStatusMacAddress - MAC address of this Subscriber
            #        Unit. If the Subscriber Unit has multiple MAC addresses,
            #        this is the MAC address associated with the Wireless
            #        interface. Each SU has only one wireless MAC interface.
            # $2 = cwdIfHeSuStatusIpAddress - IP address of this Subscriber
            #        Unit. If the Subscriber Unit has no IP address assigned,
            #        or the IP address is unknown, this object returns a value
            #        of 0.0.0.0. If the Subscriber Unit has multiple IP
            #        addresses, this object returns the IP address associated
            #        with the Wireless interface. Each SU has only one wireless
            #        MAC interface.
            # $3 = cwdIfHeSuStatusDownChanIfIndex - IfIndex of the downstream
            #        channel this Subscriber Unit is connected to. If the
            #        downstream channel is unknown, this object returns a value
            #        of zero.
            # $4 = cwdIfHeSuStatusUpChanIfIndex - IfIndex of the upstream
            #        channel this Subscriber Unit is connected to. If the
            #        upstream channel is unknown, this object returns a value
            #        of zero.
            # $5 = cwdIfHeSuStatusServiceId - The SU's primary Service ID.
            # $6 = cwdxHeSuStatusValue - Current Subscriber-unit connectivity
            #        state. The object extends states in cwdIfHeSuStatusValue
            #        in more detail. (see lookup table)
            ##########

            @AlertGroup = "SU Status"
            @AlertKey = extract($OID6, "\.([0-9]+)$") ### cwdIfHeSuStatusIndex
            switch($6)
            {
                case "1": ### offline - SU considered offline.
                    @Summary = "Subscriber-unit Offline  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 3
                    @Type = 1
                case "2": ### others - states is in cwdIfHeSuStatusValue.
                    @Summary = "Subscriber-unit (see cwdIfHeSuStatusValue for status)  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### initRangingRcvd - SU sent initial ranging.
                    @Summary = "Subscriber-unit   ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                case "4": ### initDhcpReqRcvd - dhcp request received.
                    @Summary = "Subscriber-unit Sent Initial Ranging  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                case "5": ### onlineNetAccessDisabled - SU registered, but network access for the SU is disabled.
                    @Summary = "Subscriber-unit Online, Network Access Disabled  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                case "6": ### onlineKekAssigned - SU registered, BPI enabled and KEK assigned.
                    @Summary = "Subscriber-unit Online, BPI enabled and KEK assigned  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "7": ### onlineTekAssigned - SU registered, BPI enabled and TEK assigned.
                    @Summary = "Subscriber-unit Online, BPI enabled and TEK assigned  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "8": ### rejectBadMic - SU did attempt to register but registration was refused due to bad mic.
                    @Summary = "Subscriber-unit Rejected, Bad MIC  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 3
                    @Type = 1
                case "9": ### rejectBadCos - SU did attempt to register but registration was refused due to bad COS.
                    @Summary = "Subscriber-unit Rejected, Bad COS  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 3
                    @Type = 1
                case "10": ### kekRejected - KEK SU key assignment rejected.
                    @Summary = "Subscriber-unit KEK Key Assignment Rejected  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 3
                    @Type = 1
                case "11": ### tekRejected - TEK SU key assignment rejected.
                    @Summary = "Subscriber-unit TEK Key Assignment Rejected  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 3
                    @Type = 1
                case "12": ### online - SU registered, enabled for data.
                    @Summary = "Subscriber-unit Online  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "13": ### initTftpPacketRcvd - tftp packet received and option file transfer started.
                    @Summary = "Subscriber-unit TFTP File Transfer Started  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                case "14": ### initTodRquestRcvd - Time of the Day (TOD) request received.
                    @Summary = "Subscriber-unit Sent Time of Day Request  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $6 + " " + @Agent + " " + @Manager

        case "2": ### cwdxHeSuChOverNotification

            ##########
            # This notification is sent at the completion of a HE channel
            # override operation if cwdxHeSuChOverTrapOnCompletion is true in
            # the original entry. Once a channel override operation has been
            # activated, it cannot be stopped. That is, it will run until
            # either the HE has generated downstream frequency and/or upstream
            # channel override fields in the RNG-RSP message sent to a HE or
            # cwdxHeSuChOverTimeExpiration time expired. In either case, the
            # operation is completed. State in the cwdxHeSuChOverState object
            # will tell in which condition the operation is completed.
            #
            # $1 = cwdxHeSuChOverMacAddress - The mac address of the
            #        Subscriber-unit that the HE instructs to move to a new
            #        downstream and/or upstream channel. This column must be
            #        set to a valid Mac address currently in the HE in order
            #        for this entry's row status to be set to active
            #        successfully.
            # $2 = cwdxHeSuChOverDownFrequency - The new downstream frequency
            #        which the Subscriber-unit is instructed to move to. The
            #        value 0 is to ask the HE not to override the downstream
            #        frequency.
            # $3 = cwdxHeSuChOverUpChannelId - The new channel Id which the
            #        Subscriber-unit is instructed to move to. The value -1 is
            #        to ask the HE not to override the upstream channel Id.
            # $4 = cwdxHeSuChOverOpInitiatedTime - The value of sysUpTime at
            #        which the operation was initiated. Since it is possible to
            #        have more than one entry in this table for a
            #        Subscriber-unit, this object can help to distinguish the
            #        entries for the same Subscriber-unit.
            # $5 = cwdxHeSuChOverState - The status of the specified channel
            #        override operation. (see lookup table)
            ##########

            @AlertGroup = "SU Channel Override"
            @AlertKey = extract($OID5, "\.([0-9]+)$") ### cwdIfHeSuStatusIndex
            switch($5)
            {
                case "1": ### messageSent
                    @Summary = "Subscriber-unit received RNG-RSP Message  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### commandNotActive
                    @Summary = "Subscriber-unit Command not Active  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                case "3": ### noOpNeeded
                    @Summary = "Subscriber-unit No Operation Needed  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "4": ### suNotFound
                    @Summary = "Subscriber-unit Not Found  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 3
                    @Type = 1
                case "5": ### waitToSendMessage
                    @Summary = "Head-end Waiting to Send RNG-RSP Message to Subscriber-unit  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 2
                    @Type = 1
                case "6": ### timeOut
                    @Summary = "Subscriber-unit Timeout  ( MAC = " + $1 + ", IPAddr = " + $2 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $5 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.136.2.2": ### Cisco Wireless Radio Point-to-Point (cwrRadioDevTraps) - Notifications from CISCO-WIRELESS-IF-MIB

    @Agent = "Cisco-Wireless Radio P2P"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cwrTrapConfigMismatch

            ##########
            # The radio subsystem has detected that the combination of the
            # configuration parameters that has been requested is inconsistent
            # and cannot be supported. The cwrTrapReason is the textual
            # description of what parameter causes the mismatch.
            #
            # $1 = ifIndex
            # $2 = cwrTrapReason - The explanation string for the event trap
            #        cwrEventId.
            ##########

            @AlertGroup = "Configuration"
            @AlertKey = $1
            @Summary = "Configuration Inconsistent, " + $2 + "  ( ifIndex = " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "2": ### cwrTrapInitFailure

            ##########
            # The radio subsystem has failed to initialize the hardware
            # successfully. This implies that there is a critical error
            # condition in the associated hardware. The cwrTrapReason specifies
            # the reason the init failed.
            #
            # $1 = ifIndex
            # $2 = cwrTrapReason - The explanation string for the event trap
            #        cwrEventId.
            ##########

            @AlertGroup = "Hardware Initialization"
            @AlertKey = $1
            @Summary = "Hardware Initialization Failure, " + $2 + "  ( ifIndex = " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "3": ### cwrTrapLinkQuality

            ##########
            # The radio subsystem has detected a significant change in the
            # radio link quality. The cwrTrapReason will describe the quality.
            #
            # $1 = ifIndex
            # $2 = cwrTrapReason - The explanation string for the event trap
            #        cwrEventId.
            ##########

            @AlertGroup = "Link Quality"
            @AlertKey = $1
            @Summary = "Linnk Quality Change, " + $2 + "  ( ifIndex = " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "4": ### cwrTrapLinkSyncLost

            ##########
            # The radio link has lost synchronization with the remote end.
            #
            # $1 = ifIndex
            ##########

            @AlertGroup = "Link Syncronization"
            @AlertKey = $1
            @Summary = "Radio Link Lost Synchronization with Remote End  ( ifIndex = " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### cwrTrapLinkSyncAcquired

            ##########
            # The radio link has acquired synchronization with the remote end.
            #
            # $1 = ifIndex
            ##########

            @AlertGroup = "Link Syncronization"
            @AlertKey = $1
            @Summary = "Radio Link Acquired Synchronization with Remote End  ( ifIndex = " + $1 + " )"
            #@Severity = 1
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "6": ### cwrTrapIfRxOsc

            ##########
            # The IF receive frequency oscillator has changed state.
            #
            # $1 = ifIndex
            # $2 = cwrIfRxOscState - This object represents the state of the IF
            #        receive oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "IF Rx. Freq. Oscillator"
            @AlertKey = $1
            switch($2)
            {
                case "1": ### oscillatorOk
                    @Summary = "IF Receive Frequency Oscillator Ok  ( ifIndex = " + $1 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "IF Receive Frequency Oscillator Bad  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "7": ### cwrTrapIfTxOsc

            ##########
            # The IF transmit frequency oscillator has changed state.
            #
            # $1 = ifIndex
            # $2 = cwrIfTxOscState - This object represents the state of the IF
            #        transmit oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "IF Tx. Freq. Oscillator"
            @AlertKey = $1
            switch($2)
            {
                case "1": ### oscillatorOk
                    @Summary = "IF Transmit Frequency Oscillator Ok  ( ifIndex = " + $1 + " )"
                    #@Severity = 1
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "IF Transmit Frequency Oscillator Bad  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "8": ### cwrTrapIfRefOsc

            ##########
            # The IF Reference Frequency oscillator has changed state.
            #
            # $1 = ifIndex
            # $2 = cwrIfRefOscState - This object represents the state of the
            #        IF reference oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "IF Ref. Freq. Oscillator"
            @AlertKey = $1
            switch($2)
            {
                case "1": ### oscillatorOk
                    @Summary = "IF Reference Frequency Oscillator Ok  ( ifIndex = " + $1 + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "IF Reference Frequency Oscillator Bad  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "9": ### cwrTrapRfSupplyVoltage

            ##########
            # The supply voltage to the RF resource has changed. The
            # cwrRfSupplyVoltageState specifies whether the supply voltage is
            # in spec or not.
            #
            # $1 = ifIndex
            # $2 = cwrRfSupplyVoltageState - This object specifies whether the
            #        voltage supply to the RF unit is within specifications or
            #        not.
            ##########

            @AlertGroup = "RF Supply Voltage"
            @AlertKey = $1
            switch($2)
            {
                case "1": ### withinSpecification
                    @Summary = "RF Supply Voltage Within Specification  ( ifIndex = " + $1 + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### outsideSpecification
                    @Summary = "RF Supply Voltage Outside Specification  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "10": ### cwrTrapRfRxOsc

            ##########
            # The RF receive frequency oscillator has changed state. The
            # cwrRfIndex identifies the RF resource that is the cause of this
            # trap. The cwrRfRxOscState specifies the state of the oscilator.
            #
            # $1 = ifIndex
            # $2 = cwrRfRxOscState - This object represents the state of the
            #        receive oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "RF Rx. Freq. Oscillator"
            @AlertKey = $1
            switch($2)
            {
                case "1": ### oscillatorOk
                    @Summary = "RF Receive Frequency Oscillator Ok  ( ifIndex = " + $1 + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "RF Receive Frequency Oscillator Bad  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "11": ### cwrTrapRfTxOsc

            ##########
            # The RF transmit frequency oscillator has changed state. The
            # cwrRfIndex identifies the RF resource that is the cause of this
            # trap. The cwrRfRxOscState specifies the state of the oscilator.
            #
            # $1 = ifIndex
            # $2 = cwrRfTxOscState - This object represents the state of the
            #        transmit oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "RF Tx. Freq. Oscillator"
            @AlertKey = $1
            switch($2)
            {
                case "1": ### oscillatorOk
                    @Summary = "RF Transmit Frequency Oscillator Ok  ( ifIndex = " + $1 + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "RF Transmit Frequency Oscillator Bad  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "12": ### cwrTrapRfTemp

            ##########
            # The temperature of the RF module identified by cwrRfIndex has
            # exceeded a defined reference.
            #
            # $1 = ifIndex
            # $2 = cwrRfTemperature - This object represents the current
            #        temperature of the RF unit.
            ##########

            @AlertGroup = "RF Module Temperature"
            @AlertKey = $1
            @Summary = "RF Module Temperature ( " + $2 + "C ) Excessive  ( ifIndex = " + $1 + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            update(@Summary)

        case "13": ### cwrTrapRfStatusChange

            ##########
            # This trap indicates that the RF resource either came online(1) or
            # went offline(2). The cwrRfIndex will identify which resource
            # changed state and cwrRfStatus will identify what state it is in.
            #
            # $1 = ifIndex
            # $2 = cwrRfStatus - This object specifies whether the RF resource
            #        is functioning properly or not. If it is functioning
            #        properly then it will be online(1), else offline(2).
            ##########

            @AlertGroup = "RF Resource Status"
            @AlertKey = $1
            switch($2)
            {
                case "1": ### online
                    @Summary = "RF Resource Online  ( ifIndex = " + $1 + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### offline
                    @Summary = "RF Resource Offline  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "14": ### cwrTrapLink1HrThresh

            ##########
            # One of cwrLink1HrESAlarmThresh, cwrLink1HrSESAlarmThresh,
            # cwrLink1HrCSESAlarmThresh, cwrLink1HrDCMAlarmThresh was was
            # exceeded. The cwrTrapReason will identify which threshold was
            # exceeded.
            #
            # $1 = ifIndex
            # $2 = cwrTrapReason - The explanation string for the event trap
            #        cwrEventId.
            ##########

            @AlertGroup = "Link 1hr. Threshold"
            @AlertKey = $1
            @Summary = "Link 1Hr. Threshold Exceeded, " + $2
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        case "15": ### cwrTrapLink24HrThresh

            ##########
            # One of cwrLink24HrESAlarmThresh, cwrLink24HrSESAlarmThresh,
            # cwrLink24HrCSESAlarmThresh, cwrLink24HrDCMAlarmThresh was
            # exceeded. The cwrTrapReason will identify which threshold was
            # exceeded.
            #
            # $1 = ifIndex
            # $2 = cwrTrapReason - The explanation string for the event trap
            #        cwrEventId.
            ##########

            @AlertGroup = "Link 1hr. Threshold"
            @AlertKey = $1
            @Summary = "Link 24Hr. Threshold Exceeded, " + $2
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $2 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.136.2.3": ### Cisco Wireless Radio Point-to-Point (cwrRadioThreshTraps) - Notifications from CISCO-WIRELESS-IF-MIB

    @Agent = "Cisco-Wireless Radio P2P"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cwrTrapThresh

            ##########
            # The radio subsystem generates this trap when a threshold crosses
            # its specified limit. The parameters identify the following
            #
            # $1 = cwrThreshValue - This object represents the value to be
            #        compared against. The cwrThreshType determines the way in
            #        which it is used. It is used as follows: if cwrThreshType
            #        is ..
            #        highThresh : Notify if data sample exceeds the
            #          cwrThreshValue.
            #        lowThresh : Notify if data sample recedes below the
            #          cwrThreshValue.
            #        upChange : Notify if data sample increases by more than
            #          cwrThreshValue.
            #        downChange : Notify if data sample decreases by more than
            #          cwrThreshValue.
            #        upLimit : Notify if data sample crosses cwrThreshValue
            #          while increasing in value.
            #        lowLimit : Notify if data sample crosses cwrThreshValue
            #          while decreasing in value.
            # $2 = cwrThreshHysteresisTime - When radio signals oscillate
            #        around threshold values, they potentially flood the system
            #        with notifications. This object specifies the amount of
            #        time to wait before sending an identical notification if
            #        the oscillations continue. Notifications are not generated
            #        due to any threshold value which is
            #        reached/exceeded/crossed/etc. during this wait time.
            # $3 = cwrThreshLimitTime - This object specifies the amount of
            #        time for which the radio signal should stabilize before a
            #        trap is sent to indicate that the radio signal has
            #        stabilized.
            ##########

            @AlertGroup = "Radio Subsystem Threshold"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### ifIndex.cwrThreshIndex
            @Summary = "Radio Subsystem Threshold Crossed " + $1 + "  ( ifIndex.cwrThreshIndex = " + @AlertKey + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.181.2": ### Cisco Wireless Radio Point to MultiPoint Link Metrics - Notifications from CISCO-WIRELESS-P2MP-LINK-METRICS-MIB

    @Agent = "Cisco-Wireless Radio P2MP Link"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### p2mpHeChPctErrCWThreshTrap

            ##########
            # The p2mpHe1HrPctErrCWThresh for an upstream channel was exceeded.
            #
            # $1 = p2mpHe1HrPctErrCWThresh - This object represents the
            #        threshold for the acceptable ratio of errored codewords to
            #        the total codewords transmitted in an operational hour.
            #        For an Upstream Channel: When the percentage of errored
            #        codewords to total codewords transmitted on a upstream
            #        channel crosses this threshold, the
            #        p2mpHeChPctErrCWThreshTrap is sent out (provided the
            #        number of total codewords transmitted on the upstream
            #        channel in an operational hour, exceeds the value
            #        represented by p2mpHe1HrMinTotalCWThresh). For a
            #        Subscriber Unit (SU): When the percentage of errored
            #        codewords to total codewords transmitted by a SU crosses
            #        this threshold, the SU is added to a list of SU's that
            #        have also crossed this threshold (provided the number of
            #        total codewords transmitted by the SU exceed the value
            #        represented by p2mpHe1HrMinTotalCWThresh). The head end
            #        sends out the p2mpHeMacPctErrCWThreshTrap to indicate that
            #        an SU has been added to the 'bad SU list'.
            ##########

            @AlertGroup = "Upstream Codeword Errors"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            @Summary = "Upstream Channel Errored Codeword Ratio Exceeded " + string(int($1)/100000) + "%  ( ifIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            update(@Summary)

        case "2": ### p2mpHeMacPctErrCWThreshTrap

            ##########
            # The p2mpHe1HrPctErrCWThresh for the subscriber unit was exceeded.
            # The subscriber unit was added to the p2mpHeBadSuTable.
            #
            # $1 = p2mpBadSuMacAddress - This object identifies the subscriber
            #        unit that either failed to transmit a minimum number of
            #        codewords in an operational hour OR whose percentage of
            #        errored codewords transmitted exceeded the threshold.
            # $2 = p2mpTotalErroredCodewords - This object represents the total
            #        errored codewords transmitted by this subscriber unit in
            #        the current operational hour.
            # $3 = p2mpPctErroredCodewords - This object represent the
            #        percentage of errored codewords to total codewords
            #        transmitted by the subscriber unit in the current
            #        operational hour.
            ##########

            @AlertGroup = "SU Codeword Errors"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") + "." + $1 ### ifIndex.p2mpBadSuMacAddress
            @Summary = "Subscriber-unit Errored Codeword Ratio ( " + $3 + "% ) Excessive  ( ifIndex.SuMacAddress = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            update(@Summary)

        case "3": ### p2mpSuErrSecAlarmTrap

            ##########
            # The p2mpSuLink1HrESAlarmThresh was exceeded.
            #
            # $1 = p2mpSuLink1HrESAlarmThresh - This object specifies the one
            #        hour Codeword Error Second threshold. When the number of
            #        Codeword Error Seconds in a 1 Operational Hour period
            #        exceeds this value, the p2mpSuErrSecAlarmTrap trap will be
            #        generated. Time measurement starts after the first
            #        operational second.
            ##########

            @AlertGroup = "SU Errored Seconds"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            @Summary = "Subscriber-unit Excessive Codeword Errored Seconds  ( ifIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### p2mpSuSevErrSecAlarmTrap

            ##########
            # The p2mpSuLink1HrSESAlarmThresh was exceeded.
            #
            # $1 = p2mpSuLink1HrSESAlarmThresh - This object specifies the one
            #        hour Codeword Severely Errored Seconds threshold. When the
            #        number of Codeword Severely Errored Seconds in a 1
            #        Operational Hour period exceeds this value, the
            #        p2mpSuSevErrSecAlarmTrap trap will be generated. Time
            #        measurement starts after the first operational second.
            ##########

            @AlertGroup = "SU Errored Seconds"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            @Summary = "Subscriber-unit Excessive Codeword Severely Errored Seconds  ( ifIndex = " + @AlertKey + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "5": ### p2mpSuConsecSevErrSecAlarmTrap

            ##########
            # The p2mpSuLink1HrCSESAlarmThresh was exceeded.
            #
            # $1 = p2mpSuLink1HrCSESAlarmThresh - This object specifies the one
            #        hour Codeword Consecutively Severely Errored Seconds
            #        threshold. When the number of Codeword Severely Errored
            #        Seconds in a 1 Operational Hour period exceeds this value,
            #        the p2mpSuConsecSevErrSecAlarmTrap trap will be generated.
            #        Time measurement starts after the first operational
            #        second.
            ##########

            @AlertGroup = "SU Errored Seconds"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            @Summary = "Subscriber-unit Excessive Codeword Consecutively Severely Errored Seconds  ( ifIndex = " + @AlertKey + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "6": ### p2mpSuDegradedSecAlarmTrap

            ##########
            # The p2mpSuLink1HrDCSAlarmThresh was exceeded.
            #
            # $1 = p2mpSuLink1HrDCSAlarmThresh - This object specifies the one
            #        hour Degraded Codeword Seconds threshold. When the number
            #        of Degraded Codeword Seconds in a 1 Operational Hour
            #        period exceeds this value, the p2mpSuDegradedSecAlarmTrap
            #        trap will be generated. Time measurement starts after the
            #        first operational second.
            ##########

            @AlertGroup = "SU Degraded Codeword"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            @Summary = "Subscriber-unit Excessive Degraded Codeword Seconds  ( ifIndex = " + @AlertKey + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.170.2": ### Cisco Wireless Radio Point to MultiPoint - Notifications from CISCO-WIRELESS-P2MP-PHY-MIB

    @Agent = "Cisco-Wireless Radio P2MP"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### p2mpRadioPhyFailNotification

            ##########
            # A p2mpRadioPhyFailNotification is sent if the value of
            # p2mpLastPhyFailureType changes due to the new failure being
            # detected in the Radio interface.
            #
            # $1 = p2mpLastPhyFailureType - This object indicates the last
            #        physical link failure that resulted in a
            #        p2mpRadioPhyFailNotification trap.
            #          none(1) - no failure
            #          p2mpHwConfigUnsupported(2) - The radio subsystem has
            #            detected that the configuration requested is not
            #            supported by the hardware. The
            #            p2mpLastPhyFailureReason variable will indicate which
            #            configuration parameter is not supported.
            #          p2mpHwConfigMismatch(3) - The radio subsystem has
            #            detected that the combination of the configuration
            #            parameters requested is inconsistent and cannot be
            #            supported. The p2mpLastPhyFailReason variable will
            #            indicate the configuration parameter that causes the
            #            mismatch.
            #          p2mpHwInitFailure(4) - The radio subsystem has failed to
            #            initialize the hardware. This implies that there is a
            #            critical error condition in the associated hardware.
            #            The p2mpLastPhyFailReason specifies the reason why the
            #            init failed.
            #          p2mpHostIfCommLinkError(5) - The host could not
            #            communicate with the IF module.
            #          p2mpAutoCableCompFailure(6) - Failed to achieve
            #            automatic cable compensation due to loss of Tx signal.
            # $2 = p2mpLastPhyFailureReason - This is a text string that
            #        describes the last physical link failure identified by
            #        p2mpLastPhyFailureType.
            ##########

            @AlertGroup = "Radio Interface Status"
            @AlertKey = extract($OID1, "\.([0-9]+)$") ### ifIndex
            switch($1)
            {
                case "1": ### none
                    @Summary = "Radio Interface OK"
                    @Severity = 2
                    @Type = 2
                case "2": ### p2mpHwConfigUnsupported
                    @Summary = "Radio Interface Hardware Configuration Unsupported  ( ifIndex = " + @AlertKey + " ): " + $2
                    @Severity = 3
                    @Type = 1
                case "3": ### p2mpHwConfigMismatch
                    @Summary = "Radio Interface Hardware Configuration Mismatch  ( ifIndex = " + @AlertKey + " ): " + $2
                    @Severity = 3
                    @Type = 1
                case "4": ### p2mpHwInitFailure
                    @Summary = "Radio Interface Hardware Initialization Failure  ( ifIndex = " + @AlertKey + " ): " + $2
                    @Severity = 3
                    @Type = 1
                case "5": ### p2mpHostIfCommLinkError
                    @Summary = "Radio Interface Communications Link Error  ( ifIndex = " + @AlertKey + " ): " + $2
                    @Severity = 3
                    @Type = 1
                case "6": ### p2mpAutoCableCompFailure
                    @Summary = "Radio Interface Automatic Cable Compensation Failure  ( ifIndex = " + @AlertKey + " ): " + $2
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "2": ### p2mpTrapRfSupplyVoltage

            ##########
            # The supply voltage to the RF resource has changed. The
            # p2mpRfSupplyVoltageState specifies whether the supply voltage
            # is in spec or not.
            #
            # $1 = p2mpRfSupplyVoltageState - This object specifies whether the
            #        voltage supply to the RF unit is within specifications or
            #        not. Voltage specifications are hardware dependent.
            ##########

            @AlertGroup = "RF Supply Voltage"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            switch($1)
            {
                case "1": ### withinSpecification
                    @Summary = "RF Supply Voltage Within Specification  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### outsideSpecification
                    @Summary = "RF Supply Voltage Outside Specification  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "3": ### p2mpTrapRfRxOsc

            ##########
            # The RF receive frequency oscillator has changed state. The
            # p2mpRfRxOscState specifies the current state of the oscillator.
            #
            # $1 = p2mpRfRxOscState - This object represents the state of the
            #        receive oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "RF Rx. Freq. Oscillator"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            switch($1)
            {
                case "1": ### oscillatorOk
                    @Summary = "RF Receive Frequency Oscillator Ok  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "RF Receive Frequency Oscillator Bad  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "4": ### p2mpTrapRfTxOsc

            ##########
            # The RF transmit frequency oscillator has changed state. The
            # p2mpRfRxOscState specifies the state of the oscillator.
            #
            # $1 = p2mpRfTxOscState - This object represents the state of the
            #        transmit oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "RF Tx. Freq. Oscillator"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            switch($1)
            {
                case "1": ### oscillatorOk
                    @Summary = "RF Transmit Frequency Oscillator Ok  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "RF Transmit Frequency Oscillator Bad  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "5": ### p2mpTrapRfTemp

            ##########
            # The temperature of the RF module identified by p2mpRfIndex has
            # exceeded a defined reference.
            #
            # $1 = p2mpRfTemperature - This object represents the current
            #        temperature of the RF unit
            ##########

            @AlertGroup = "RF Module Temperature"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            @Summary = "RF Module Temperature ( " + $2 + "C ) Excessive  ( ifIndex = " + @AlertKey + " )"
            @Severity = 4
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            update(@Summary)

        case "6": ### p2mpTrapRfCommLinkError

            ##########
            # This trap indicates that the host and the IF module cannot
            # communicate with the RF resource identified by p2mpRfType.
            #
            # $1 = p2mpRfType - This object identifies the RF resource.
            ##########

            @AlertGroup = "RF Comm Link"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            @Summary = "Host/IF Module Communications Link Failure to RF " + lookup($1, CwrRfType) + "  ( ifIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "7": ### p2mpTrapTxPower

            ##########
            # This trap indicates that the transmit power for the RF resource
            # identified by p2mpRfType exceeded a predefined threshold.
            #
            # $1 = p2mpRfType - This object identifies the RF resource.
            ##########

            @AlertGroup = "RF Tx. Power"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            @Summary = "RF " + lookup($1, CwrRfType) + " Transmit Power Excessive  ( ifIndex = " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "8": ### p2mpTrapRfStatusChange

            ##########
            # This trap indicates that the RF resource either came online(1) or
            # went offline(2).
            #
            # $1 = p2mpRfStatus - This object specifies whether the RF resource
            #        is functioning properly. If it is functioning properly
            #        then it will be online(1), else offline(2). At the
            #        Subscriber Unit, this object will reflect offline(2) if
            #        p2mpTxMuteEnable in the p2mpSuRadioPhyTable is true(1).
            ##########

            @AlertGroup = "RF Resource Status"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            switch($1)
            {
                case "1": ### online
                    @Summary = "RF Resource Online  ( ifIndex = " + $1 + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### offline
                    @Summary = "RF Resource Offline  ( ifIndex = " + $1 + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "9": ### p2mpTrapHeIfRxOsc

            ##########
            # The IF receive frequency oscillator has changed state.
            #
            # $1 = p2mpHeIfRxOscState - This object indicates the state of the
            #        IF receive oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "IF Rx. Freq. Oscillator"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            switch($1)
            {
                case "1": ### oscillatorOk
                    @Summary = "IF Receive Frequency Oscillator Ok  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "IF Receive Frequency Oscillator Bad  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "10": ### p2mpTrapHeIfTxOsc

            ##########
            # The IF transmit frequency oscillator has changed state.
            #
            # $1 = p2mpHeIfTxOscState - This object indicates the state of the
            #        IF transmit oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "IF Tx. Freq. Oscillator"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            switch($1)
            {
                case "1": ### oscillatorOk
                    @Summary = "IF Transmit Frequency Oscillator Ok  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "IF Transmit Frequency Oscillator Bad  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        case "11": ### p2mpTrapHeIfExtRefOsc

            ##########
            # The IF Reference Frequency oscillator has changed state.
            #
            # $1 = p2mpHeIfRefOscState - This object indicates the state of the
            #        IF reference oscillator. The oscillator must be in
            #        oscillatorOk(1) state for the system to function properly.
            ##########

            @AlertGroup = "IF Tx. Freq. Oscillator"
            @AlertKey = extract($OID1, "\.([0-9]+)\.[0-9]+$") ### ifIndex
            switch($1)
            {
                case "1": ### oscillatorOk
                    @Summary = "IF Reference Frequency Oscillator Ok  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 2
                    @Type = 2
                case "2": ### osccillatorBad
                    @Summary = "IF Reference Frequency Oscillator Bad  ( ifIndex = " + @AlertKey + " )"
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $1 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.180.2": ### Cisco Wireless Radio Point to MultiPoint RF Metrics - Notifications from CISCO-WIRELESS-P2MP-RF-METRICS-MIB

    @Agent = "Cisco-Wireless Radio P2MP RF"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### p2mpTrapThresh

            ##########
            # The radio subsystem generates this trap when a threshold crosses
            # its specified limit. The parameters identify the following:
            #
            # $1 = p2mpThreshValue - This object represents the value to be
            #        compared against. The p2mpThreshType determines the way in
            #        which it is used. It is used as follows: if p2mpThreshType
            #        is ..
            #          highThresh : Notify if data sample exceeds the
            #            p2mpThreshValue.
            #          lowThresh : Notify if data sample recedes below the
            #            p2mpThreshValue.
            #          upChange : Notify if data sample increases by more than
            #            p2mpThreshValue.
            #          downChange : Notify if data sample decreases by more
            #            than p2mpThreshValue.
            #          upLimit : Notify if data sample crosses p2mpThreshValue
            #            while increasing in value.
            #          lowLimit : Notify if data sample crosses p2mpThreshValue
            #            while decreasing in value.
            # $2 = p2mpThreshHysteresisTime - When radio signals oscillate
            #        around threshold values, they potentially flood the system
            #        with notifications. This object specifies the amount of
            #        time to wait before sending an identical notification if
            #        the oscillations continue.
            # $3 = p2mpThreshLimitTime - It is desirable to know when a radio
            #        signal has stabilized. This object specifies the amount of
            #        time that the radio signal should stay below the threshold
            #        after crossing it. If it does then a 'clear' notification
            #        is sent.
            ##########

            @AlertGroup = "Radio Subsystem Threshold"
            @AlertKey = extract($OID1, "\.([0-9]+\.[0-9]+)$") ### ifIndex.cwrThreshIndex
            @Summary = "Radio Subsystem Threshold Crossed " + $1 + "  ( ifIndex.cwrThreshIndex = " + @AlertKey + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.14.1.2": ### Cisco-CiscoWorks - Traps from CISCOWORKS-MIB

    @Agent = "Cisco-CiscoWorks"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cwAppLogTrap

            ##########
            # A cwAppLogTrap is sent by nmlogd when a CW application logs a
            # message to system log file on CW workstation.
            #
            # $1 = sysUpTime
            # $2 = cwLogDate - Date in the format of 'MMM DD HH:MM:SS' when the
            #        message is logged. The timezone used is configured on CW
            #        workstation.
            # $3 = cwLogSource - The source of the log message. ciscoworks(2)
            #        indicates the message is generated by CW apps (e.g.
            #        nmpolld). device(3) indicates the message is generated by
            #        Cisco devices.
            # $4 = cwLogApp - The name of the application that generates the
            #        log message. If the message is generated by a device, this
            #        string will be empty.
            # $5 = cwLogMsg - The text of the log message.
            ##########

            @AlertGroup = "Application Log"
            switch($3)
            {
                case "1": ### other
                    @AlertKey = $4
                    @Summary = $5
                    @Severity = 3
                    @Type = 1
                case "2": ### ciscoworks
                    @AlertKey = $4
                    @Summary = $4 + ": " + $5
                    @Severity = 3
                    @Type = 1
                case "3": ### device
                    @AlertKey = ""
                    @Summary = $5
                    @Severity = 3
                    @Type = 1
                default:
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " +  $4 + " " + $5 + " " + @Agent + " " + @Manager

        case "2": ### cwDevLogTrap

            ##########
            # A cwDevLogTrap is sent by nmlogd when a device logs a message to
            # system log file on CW workstation.
            #
            # $1 = sysUpTime
            # $2 = cwLogDate - Date in the format of 'MMM DD HH:MM:SS' when the
            #        message is logged. The timezone used is configured on CW
            #        workstation.
            # $3 = cwLogSource - The source of the log message. ciscoworks(2)
            #        indicates the message is generated by CW apps (e.g.
            #        nmpolld). device(3) indicates the message is generated by
            #        Cisco devices.
            # $4 = cwLogMsg - The text of the log message.
            ##########

            @AlertGroup = "Device Log"
            @AlertKey = ""
            @Summary = $5
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $specific-trap + " " + $3 + " " +  $4 + " " + @Agent + " " + @Manager

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.215.2": ### Cisco MAC Notification - Notifications from CISCO-MAC-NOTIFICATION-MIB

    @Agent = "Cisco-MAC Notification"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "": ### cmnMacChangedNotification

            ##########
            # This notification is generated when there is enough MAC address
            # information to fully occupy a maximum size SNMP trap message.
            # This notification is also generated when there is at least one
            # MAC address changed or removed and the amount of time elapsed
            # from the previous notification is greater than the maximum wait
            # time denoted by cmnNotificationInterval object. If there are more
            # MAC addresses information than can fit into one
            # cmmHistTrapContent object, then multiple notifications will be
            # generated.
            #
            # $1 = cmnHistMacChangedMsg - This object contains the information
            #        of a MAC change notification event. It consists of several
            #        tuples packed together in the format of
            #        '<tuple1><tuple2>...'. Each tuple consist of 11 octets in
            #        the format of '<operation><VLAN><MAC><dot1dBasePort>'
            #        where <operation> is of size 1 octet and supports the
            #        following values:
            #          0 - End of MIB object.
            #          1 - MAC learnt.
            #          2 - MAC removed.
            #        <VLAN> is vlan number of the VLAN which the MAC address is
            #          belonged to and has size of 2 octet.
            #        <MAC> is the Layer2 Mac Address and has size of 6 octets.
            #        <dot1dBasePort> is the value of dot1dBasePort for the
            #          interface from which the MAC address is learnt and has
            #          size of 2 octets.
            # $2 = cmnHistTimestamp - The value of sysUpTime when the
            #        cmnMacChangedNotification containing the information
            #        denoted by the cmnHistMacChangedMsg object in this entry
            #        was generated.
            ##########

            @AlertGroup = "MAC Change"
            @AlertKey = ""
            @Summary = "MAC Address Update Message"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            discard

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.300": ### Cisco Call Home - Notifications from CISCO-CALLHOME-MIB

    @Agent = "Cisco-Call Home"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ccmSmtpServerFailNotif

            ##########
            # A ccmSmtpServerFailNotif is sent if the device fails on sending
            # an e-mail notification to SMTP server in ccmSmtpServersTable.
            #
            # $1 = ccmSmtpServersPort - Port of the SMTP server. REFERENCE:
            #        RFC2821 - Simple Mail Transfer Protocol.
            ##########

            $ccmSmtpServersPort = $1
            $ccmSmtpServersAddrType = extract($OID1, "9\.9\.300\.1\.1\.22\.1\.3\.([0-9]+)\..*$")
            $ccmSmtpServersAddr = extract($OID1, "9\.9\.300\.1\.1\.22\.1\.3\.[0-9]+\.(.*)$")

            @AlertGroup = "SMTP Status"
            @AlertKey = "ccmSmtpServersEntry." + $ccmSmtpServersAddrType + "." + $ccmSmtpServersAddr
            @Summary = "Failed to Send E-Mail Notification via SMTP  ( SMTP Server: " + $ccmSmtpServersAddr + ":" + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            $ccmSmtpServersAddrType = lookup($ccmSmtpServersAddrType, InetAddressType) + " ( " + $ccmSmtpServersAddrType + " )"
            #details($ccmSmtpServersPort,$ccmSmtpServersAddrType,$ccmSmtpServersAddr)
            
        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.302.1.3": ### Cisco Domain Manager - Notifications from CISCO-DM-MIB

    @Agent = "Cisco-Domain Manager"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "": ### dmDomainIdNotAssignedNotify

            ##########
            # If a Domain ID is not configured or assigned on a VSAN, then the
            # switch may isolate E_ports on that VSAN. The conditions are:
            #   - If the Domain Manager is enabled on the local switch and its
            #     request for a configured static Domain ID is rejected or no
            #     other Domain ID is assigned, then the E_ports are isolated.
            #   - If the domain manager is not enabled and if a static Domain
            #     ID is not configured on the VSAN, then the switch will
            #     isolate all of its E_ports on the VSAN. This notification
            #     contains the vsanIndex of the VSAN on which the condition
            #     happened.
            #
            # $1 = notifyVsanIndex - The id of the VSAN. This object is to be
            #        used only as an object in the notification. We cannot use
            #        the vsanIndex in a notification as it is defined to
            #        not-accessible in the vsanTable.
            # $2 = cffFcFeElementName - The World-Wide Name of this fabric
            #        element. It's a 64-bit identifier and is unique worldwide.
            ##########

            $notifyVsanIndex  = $1
            $cffFcFeElementName = $2
            #details($notifyVsanIndex ,$cffFcFeElementName)

            @AlertGroup = "Domain ID Assignment"
            @AlertKey = "vsanEntry." + $1
            @Summary = "Domain ID Not Assigned"
            if(int($1)<10)
            {
                @Summary = @Summary + "  ( VSAN: VSAN000" + $1 + " )"
            }
            else if(int($1)>9 && int($1)<100)
            {
                @Summary = @Summary + "  ( VSAN: VSAN00" + $1 + " )"
            }
            else if(int($1)>99 && int($1)<1000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN0" + $1 + " )"
            }
            else if(int($1)>999 && int($1)<10000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN" + $1 + " )"
            }
            else
            {
                @Summary = @Summary + "  ( " + @AlertKey + " )"
            }
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "": ### dmNewPrincipalSwitchNotify

            ##########
            # This notification indicates that the sending switch has become
            # the new Principal Switch on a VSAN. This notification is sent
            # soon after its election as the new Principal Switch, i.e., upon
            # expiration of a Principal Switch selection timer which is equal
            # to twice Fabric Stability Timeout value (F_S_TOV). This
            # notification contains the vsanIndex of the VSAN on which the
            # switch became the Principal Switch and the WWN of the switch
            # which became the Principal Switch.
            #
            # $1 = notifyVsanIndex - The id of the VSAN. This object is to be
            #        used only as an object in the notification. We cannot use
            #        the vsanIndex in a notification as it is defined to
            #        not-accessible in the vsanTable.
            # $2 = cffFcFeElementName - The World-Wide Name of this fabric
            #        element. It's a 64-bit identifier and is unique worldwide.
            ##########

            $notifyVsanIndex = $1
            $cffFcFeElementName = $2
            #details($notifyVsanIndex,$cffFcFeElementName)

            @AlertGroup = "Principal Switch Status"
            @AlertKey = "vsanEntry." + $1
            @Summary = "New Principal Switch, WWN: " + $2 + ", on VSAN"
            if(int($1)<10)
            {
                @Summary = @Summary + "  ( VSAN: VSAN000" + $1 + " )"
            }
            else if(int($1)>9 && int($1)<100)
            {
                @Summary = @Summary + "  ( VSAN: VSAN00" + $1 + " )"
            }
            else if(int($1)>99 && int($1)<1000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN0" + $1 + " )"
            }
            else if(int($1)>999 && int($1)<10000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN" + $1 + " )"
            }
            else
            {
                @Summary = @Summary + "  ( " + @AlertKey + " )"
            }
            @Severity = 2
            @Type = 1800
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            update(@Summary)

        case "": ### dmFabricChangeNotify

            ##########
            # This notification is sent whenever a switch sends or receives a
            # Build Fabric (BF) or a ReConfigure Fabric (RCF) message on a
            # VSAN. A switch can receive or issue a BuildFabric (BF) or a
            # ReConfigureFabric (RCF) message under following conditions:
            #   - A new link causes two disjoint fabrics in a VSAN to merge
            #     into one fabric. The sent/received message is BF if the
            #     Domain ID lists on the disjoint fabric does not overlap and
            #     it is RCF if they overlap.
            #   - An upsteam principal ISL which connects to Principal switch
            #     and other switches in a VSAN fails. BF is issued to see if
            #     there is an alternative path to the Principal Switch. If not
            #     paths exit, then an RCF is issued.
            #   - A switch asks for a different set of Domain IDs than the
            #     currently assigned list, the Principal switch would issue an
            #     RCF. The notification is not sent if a
            #     'dmNewPrincipalSwitchNotify' notification is sent for the
            #     same transition. This notification contains the vsanIndex of
            #     the VSAN on which RCF was issued.
            #
            # $1 = notifyVsanIndex - The id of the VSAN. This object is to be
            #        used only as an object in the notification. We cannot use
            #        the vsanIndex in a notification as it is defined to
            #        not-accessible in the vsanTable.
            ##########

            $notifyVsanIndex = $1
            #details($notifyVsanIndex)

            @AlertGroup = "VSAN Fabric Build/ReConfigure"
            @AlertKey = "vsanEntry." + $1
            @Summary = "Build Fabric (BF) or ReConfigure Fabric (RCF) Message Received"
            if(int($1)<10)
            {
                @Summary = @Summary + "  ( VSAN: VSAN000" + $1 + " )"
            }
            else if(int($1)>9 && int($1)<100)
            {
                @Summary = @Summary + "  ( VSAN: VSAN00" + $1 + " )"
            }
            else if(int($1)>99 && int($1)<1000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN0" + $1 + " )"
            }
            else if(int($1)>999 && int($1)<10000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN" + $1 + " )"
            }
            else
            {
                @Summary = @Summary + "  ( " + @AlertKey + " )"
            }
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.299.1.2": ### Cisco SCSI Extensions - Notifications from CISCO-EXT-SCSI-MIB

    @Agent = "Cisco-SCSI Extensions"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoExtScsiLunDiscDoneNotify

            ##########
            # This notification is generated whenever a Lun discovery cycle is
            # completed.
            #
            # $1 = ciscoExtScsiLunDiscStatus - This object indicates the
            #        outcome of the LUN discovery on the local switch. This
            #        object contains the status of the most recent discovery.
            #          inProgress(1) - indicates that the discovery is still in
            #                          progress.
            #          completed(2) - indicates that the discovery is complete.
            #          failure(3) - indicates that the discovery encountered a
            #                       failure.
            ##########

            $ciscoExtScsiLunDiscStatus = lookup($1, ciscoExtScsiLunDiscStatus) + " ( " + $1 + " )"
            #details($ciscoExtScsiLunDiscStatus)

            @AlertGroup = "LUN Discovery Status"
            @AlertKey = ""
            switch($1)
            {
                case "1": ### In Progress
                    @Summary = "LUN Discovery In Progress"
                    @Severity = 2
                    @Type = 1
                case "2": ### Completed
                    @Summary = "LUN Discovery Completed"
                    @Severity = 2
                    @Type = 2
                case "3": ### Failure
                    @Summary = "LUN Discovery Failure"
                    @Severity = 3
                    @Type = 1
                default:
                    @Summary = "LUN Discovery Status Unknown"
                    @Severity = 2
                    @Type = 1
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.289.1.3": ### Cisco Fibre Channel Fibre Element - Notifications from CISCO-FC-FE-MIB

    @Agent = "Cisco-Fibre Channel Fibre Element"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### fcTrunkIfDownNotify

            ##########
            # This notification is generated by the agent whenever the
            # fcTrunkifOperStatus object for this trunk interface is about to
            # enter the down state from some other state. This other state is
            # indicated by the included value of fcTrunkifOperStatus.
            #
            # $1 = fcTrunkIfOperStatus - The operational state of a VSAN on
            #        this port. If the port is in trunking mode, it is possible
            #        that the port state may be 'down(2)' only in some VSANs.
            #        If this port is down in this VSAN only then port state
            #        shown by 'ifOperStatus' may not be 'down(2)', but this
            #        object will show 'down(2)'. The 'fcTrunkIfOperStatusCause'
            #        object shows the reason for port being 'down(2)'. 
            # $2 = fcTrunkIfOperStatusCause - The cause of current operational
            #        state of the port. The current operational state of the
            #        port is shown by the 'fcTrunkIfOperStatus'. This object
            #        will show 'none(2)' for all the 'fcTrunkIfOperStatus'
            #        values except for 'down(2)'. It will show one of the
            #        values from the 'FcIfOperStatusReason' textual convention
            #        if 'fcTrunkIfOperStatus' is 'down(2)'. 
            # $3 = fcTrunkIfOperStatusCauseDescr - The description for the
            #        cause of current operational state of the port, shown by
            #        the object 'fcTrunkIfOperStatusCause'. 
            ##########

            $fcTrunkIfOperStatus = lookup($1, fcTrunkIfOperStatus) + " ( " + $1 + " )"
            $fcTrunkIfOperStatusCause = lookup($2, FcIfOperStatusReason)
            $fcTrunkIfOperStatusCauseDescr = $3
            
            @AlertGroup = "Trunk Interface Status"
            @AlertKey = "fcTrunkIfEntry." + extract($OID1, "\.([0-9]+\.[0-9]+)$")
            @Summary = "Trunk Interface Down, " + $fcTrunkIfOperStatusCause + "  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2
            
            $fcTrunkIfOperStatusCause = $fcTrunkIfOperStatusCause + " ( " + $2 + " )"
            #details($fcTrunkIfOperStatus,$fcTrunkIfOperStatusCause,$fcTrunkIfOperStatusCauseDescr)

        case "2": ### fcTrunkIfUpNotify

            ##########
            # This notification is generated by the agent whenever the
            # fcTrunkifOperStatus object for one of its trunk interfaces has
            # left the down state and transitioned into some other state. This
            # other state is indicated by the included value of
            # fcTrunkifOperStatus.
            #
            # $1 = fcTrunkIfOperStatus - The operational state of a VSAN on
            #        this port. If the port is in trunking mode, it is possible
            #        that the port state may be 'down(2)' only in some VSANs.
            #        If this port is down in this VSAN only then port state
            #        shown by 'ifOperStatus' may not be 'down(2)', but this
            #        object will show 'down(2)'. The 'fcTrunkIfOperStatusCause'
            #        object shows the reason for port being 'down(2)'. 
            # $2 = fcTrunkIfOperStatusCause - The cause of current operational
            #        state of the port. The current operational state of the
            #        port is shown by the 'fcTrunkIfOperStatus'. This object
            #        will show 'none(2)' for all the 'fcTrunkIfOperStatus'
            #        values except for 'down(2)'. It will show one of the
            #        values from the 'FcIfOperStatusReason' textual convention
            #        if 'fcTrunkIfOperStatus' is 'down(2)'. 
            # $3 = fcTrunkIfOperStatusCauseDescr - The description for the
            #        cause of current operational state of the port, shown by
            #        the object 'fcTrunkIfOperStatusCause'. 
            ##########

            $fcTrunkIfOperStatus = lookup($1, fcTrunkIfOperStatus) + " ( " + $1 + " )"
            $fcTrunkIfOperStatusCause = lookup($2, FcIfOperStatusReason)
            $fcTrunkIfOperStatusCauseDescr = $3
            
            @AlertGroup = "Trunk Interface Status"
            @AlertKey = "fcTrunkIfEntry." + extract($OID1, "\.([0-9]+\.[0-9]+)$")
            @Summary = "Trunk Interface Up  ( " + @AlertKey + " )"
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2

            $fcTrunkIfOperStatusCause = $fcTrunkIfOperStatusCause + " ( " + $2 + " )"
            #details($fcTrunkIfOperStatus,$fcTrunkIfOperStatusCause,$fcTrunkIfOperStatusCauseDescr)

        case "3": ### fcIfElpReject

            ##########
            # This notification is generated by the agent whenever this
            # interface received a ELP request and rejected it. 
            #
            # $1 = fcIfElpNbrNodeName - The node world wide name of the peer
            #        Node. 
            # $2 = fcIfElpNbrPortName - The port world wide name of the peer
            #        Interconnect_Port. 
            # $3 = fcIfElpRejectReasonCode - The reason code for the ELP
            #        reject. REFERENCE "FC-SW-2 REV 4.9 Section 6.1.2
            # $4 = fcIfElpRejectReasonCodeExpl - The reason code explanation
            #        for the ELP reject." REFERENCE "FC-SW-2 REV 4.9 Section
            #        6.1.2
            ##########

            $fcIfElpNbrNodeName = $1
            $fcIfElpNbrPortName = $2
            $fcIfElpRejectReasonCode = $3
            $fcIfElpRejectReasonCodeExpl = $4
            #details($fcIfElpNbrNodeName,$fcIfElpNbrPortName,$fcIfElpRejectReasonCode,$fcIfElpRejectReasonCodeExpl)

            @AlertGroup = "Exchange Link Parameters Status"
            @AlertKey = "fcIfElpEntry." + extract($OID1, "\.([0-9]+)$")
            @Summary = "Exchange Link Parameters Request Rejected  ( Peer Node: " + $1 + ", Peer Port: " + $2 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $3

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.295.1.3": ### Cisco Fibre Channel Ping - Notifications from CISCO-FCPING-MIB

    @Agent = "Cisco-Fibre Channel Ping"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### fcPingCompletionNotify

            ##########
            # This notification is generated whenever a sequence of pings is
            # complete and the corresponding instance of fcPingTrapOnCompletion
            # object has been set to 'true'.
            #
            # $1 = fcPingAddress - The address of the device to be pinged. If
            #        the value of the corresponding instance of
            #        fcPingAddressType object is 'wwn', then this object will
            #        contain an 8 octet long WWN. If the value of the
            #        corresponding instance of fcPingAddressType object is
            #        'fcid', then this object will contain a 3 octet long FCID.
            #        This object MUST be set to a valid value before or
            #        concurrently with setting the corresponding instance of
            #        fcPingRowStatus to 'active'.
            # $2 = fcPingTxPackets - The number of ping packets sent to the
            #        target in this sequence.
            # $3 = fcPingRxPackets - The number of ping packets received from
            #        the target in this sequence.
            ##########

            $fcPingAddress = $1
            $fcPingTxPackets = $2
            $fcPingRxPackets = $3
            #details($fcPingAddress,$fcPingTxPackets,$fcPingRxPackets)

            @AlertGroup = "Fibre Channel Ping Status"
            @AlertKey = "fcPingEntry." + extract($OID1, "\.([0-9]+)$")
            if(match($2, $3))
            {
                $status = "success"
                @Summary = "Fibre Channel Ping Successful, Received " + $3 + " of " + $2 + "Sent Packets"
                @Severity = 2
                @Type = 2
            }
            else if(match($3, "0"))
            {
                $status = "failure"
                @Summary = "Fibre Channel Ping Failed, Received " + $3 + " of " + $2 + "Sent Packets"
                @Severity = 3
                @Type = 1
            }
            else
            {
                $status = "errors"
                @Summary = "Fibre Channel Ping Errors, Received " + $3 + " of " + $2 + "Sent Packets"
                @Severity = 2
                @Type = 1
            }
            @Summary = @Summary + "  ( Target: " + $3 + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $status

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.297.1.4": ### Cisco Fabric Configuration Server - Notifications from CISCO-FCS-MIB

    @Agent = "Cisco-Fabric Configuration Server"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### fcsReqRejNotify

            ##########
            # This notification is generated by the Fabric Configuration Server
            # on this switch whenever it rejects a Fabric Configuration Server
            # request. The Fabric Configuration Server should update the
            # fcsRejReasonCode and fcsRejReasonCodeExplanation objects with the
            # corresponding reason code and reason code explanation before
            # sending the notification.
            #
            # $1 = fcsRejReasonCode - This object contains the reason code
            #        corresponding to the latest Fabric Configuration Server
            #        request rejected by the local system.
            # $2 = fcsRejReasonCodeExplanation - This object contains the
            #        reason code explanation if the reason code is 'Unable to
            #        perform command req'. This object also corresponds to the
            #        latest Fabric Configuration Server request rejected by the
            #        local system.
            ##########

            $fcsRejReasonCode = lookup($1, FcGs3RejectReasonCode)
            $fcsRejReasonCodeExplanation = $2
            
            @AlertGroup = "Request Status"
            @AlertKey = ""
            @Summary = "Fabric Configuration Server Request Rejected, " + $fcsRejReasonCode
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1
            
            $fcsRejReasonCode = $fcsRejReasonCode + " ( " + $1 + " )"
            #details($fcsRejReasonCode,$fcsRejReasonCodeExplanation)

        case "2": ### fcsDiscoveryCompleteNotify

            ##########
            # This notification is generated by the Fabric Configuration Server
            # when a discovery cycle specified by fcsVsanDiscoveryList2k,
            # fcsVsanDiscoveryList4k and fcsVsanDiscoveryName is completed.
            #
            # $1 = fcsVsanDiscoveryName - The name of the discovery triggered
            #        by a manager. This object is sent along with the
            #        fcsDiscoveryCompleteNotify notification. This object
            #        cannot be modified when the discovery status is
            #        'inProgress' on the selected set of VSANs as indicated by
            #        the fcsDiscoveryStatus object in the
            #        fcsDiscoveryStatusTable.
            ##########

            $fcsVsanDiscoveryName = $1
            #details($fcsVsanDiscoveryName)

            @AlertGroup = "Discovery Cycle Status"
            @AlertKey = "Discovery: " + $1
            @Summary = "Discover Cycle Complete  ( " + @AlertKey + " )"
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.296.1.3": ### Cisco Fibre Channel Traceroute - Notifications from CISCO-FCTRACEROUTE-MIB

    @Agent = "Cisco-Fibre Channel Traceroute"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### fcTraceRouteCompletionNotify

            ##########
            # This notification is generated whenever a trace route test is
            # completed and the corresponding instance of
            # fcTraceRouteTrapOnCompletion is set to 'true'. The agent is
            # encouraged to append, at the end of this notification's
            # varbindlist, one varbind for each hop of the traced route. Each
            # such appended varbind would contain an instance of
            # fcTraceRouteHopsHopAddr object. If the number of varbinds
            # required would cause the notification to approach it's maximum
            # size, the number of instances of fcTraceRouteHopsHopAddr will be
            # truncated suitably.
            #
            # $1 = fcTraceRouteTargetAddr - The address of the device to which
            #        the route is to be traced. If the value of the
            #        corresponding instance of fcTraceRouteTargetAddrType
            #        object is 'wwn', then this object will contain an 8 octet
            #        long WWN. If the value of the corresponding instance of
            #        fcTraceRouteTargetAddrType object is 'fcid', then this
            #        object will contain a 3 octet long FCID. This object MUST
            #        be set to a valid value before or concurrently with
            #        setting the corresponding instance of
            #        fcTraceRouteRowStatus to 'active'.
            # $2 = fcTraceRouteOperStatus - This object indicates the
            #        operational status of this fcTraceRouteEntry.
            #          inProgress(1) - Indicates that the trace route test as
            #            defined by this instance of fcTraceRouteEntry is
            #            currently running.
            #          success(2) - Indicates that the trace route test as
            #            defined by this instance of fcTraceRouteEntry is
            #            currently complete and the whole path to the
            #            destination has been traced.
            #          partialSuccess(3) - Indicates that the trace route test
            #            as defined by this instance of fcTraceRouteEntry is
            #            currently partially successful.
            #          failure(4) - Indicates that the trace route test as
            #            defined by this instance of fcTraceRouteEntry has
            #            currently failed due to resource limitations.
            #          disabled(5) - Indicates that the trace route test as
            #            defined by this instance of fcTraceRouteEntry is
            #            currently disabled.
            # 
            #        Initially the value of this object will be 'inProgress'
            #        when the test is being executed. Once the test completes,
            #        the value of this object will be 'success' or
            #        'partialSuccess' depending on the outcome of the test. If
            #        the value of this object is 'success', then the route to
            #        the target as determined by this test will be available in
            #        the fcTraceRouteHopsTable. If the value of this object is
            #        'partialSuccess', then the fcTraceRouteHopsTable will
            #        contain that portion of the route that was traced by the
            #        test. If the value of this object is 'failure', then the
            #        test was not carried out and the fcTraceRouteHopsTable
            #        will not have any entries corresponding to this test. If
            #        the value of the corresponding instance of
            #        fcTraceRouteAdminStatus is 'disable', then this object
            #        will have a value of 'disabled'.
            ##########

            $fcTraceRouteTargetAddr = $1
            $fcTraceRouteOperStatus = $2
            #details($fcTraceRouteTargetAddr,$fcTraceRouteOperStatus)

            @AlertGroup = "Fibre Channel Traceroute Status"
            @AlertKey = "fcTraceRouteEntry." + extract($OID1, "\.([0-9]+)$")
            switch($2)
            {
                case "1": ### In Progress
                    @Summary = "Fibre Channel Traceroute In Progress"
                    @Severity = 2
                    @Type = 1
                case "2": ### Success
                    @Summary = "Fibre Channel Traceroute Successful"
                    @Severity = 2
                    @Type = 2
                case "3": ### Partial Success
                    @Summary = "Fibre Channel Traceroute Partially Successful"
                    @Severity = 2
                    @Type = 1
                case "4": ### Failure
                    @Summary = "Fibre Channel Traceroute Failed"
                    @Severity = 3
                    @Type = 1
                case "5": ### Disabled
                    @Summary = "Fibre Channel Traceroute Disabled"
                    @Severity = 2
                    @Type = 1
                default:
                    @Summary = "Fibre Channel Traceroute Status Unknown"
                    @Severity = 2
                    @Type = 1
            }
            @Summary = @Summary + "  ( Target: " + $1 + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.287.3": ### Cisco Fabric Shortest Path First - Notifications from CISCO-FSPF-MIB

    @Agent = "Cisco-Fabric Shortest Path First"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "": ### fspfNbrStateChangeNotify

            ##########
            # This notification signifies that there has been a change in the
            # state of FSPF neighbors. This is generated when the FSPF state
            # regresses (e.g., goes from Full to init or Down) or progresses
            # (e.g., from any state to Full) to a terminal state. The value of
            # 'fspfIfNbrState' is the state of the neighbor after the change.
            #
            # $1 = ifIndex - A unique value for each interface. Its value
            #        ranges between 1 and the value of ifNumber. The value for
            #        each interface must remain constant at least from one
            #        re-initialization of the entity's network management
            #        system to the next re-initialization.
            # $2 = notifyVsanIndex - The id of the VSAN. This object is to be
            #        used only as an object in the notification. We cannot use
            #        the vsanIndex in a notification as it is defined to
            #        not-accessible in the vsanTable.
            # $3 = fspfDomainId - The Domain Id of the local switch on this
            #        VSAN.
            # $4 = fspfIfNbrDomainId - The Domain Id of the neighbor on this
            #        VSAN.
            # $5 = fspfIfNbrState - The state of FSPF's 'neighbor state
            #        machine', which is the operational state of the
            #        interaction with the neighbor's interface which is
            #        connected to this interface. If the 'fspfIfAdminStatus' is
            #        down(2), then this object should be down (1). If the
            #        'fspfIfAdminStatus' is up (2) then this object should be
            #        take any of the possible values depending on the state of
            #        FSPF's 'neighbor state machine' on this interface on this
            #        VSAN.
            #        REFERENCE "FC-SW-2 Rev 5.3, Section 8.7 Neighbor Finite
            #        State Machine
            # $6 = fspfIfPrevNbrState - The previous state of FSPF's 'neighbor
            #        state machine' on an interface. This object is to be used
            #        only as an object in the notification
            #        'fspfNbrStateChangeNotify'.
            ##########

            $ifIndex = $1
            $notifyVsanIndex = $2
            $fspfDomainId = $3
            $fspfIfNbrDomainId = $4
            $fspfIfNbrState = lookup($5, FspfInterfaceState) + " ( " + $5 + " )"
            $fspfIfPrevNbrState = lookup($6, FspfInterfaceState) + " ( " + $6 + " )"
            #details($ifIndex,$notifyVsanIndex,$fspfDomainId,$fspfIfNbrDomainId,$fspfIfNbrState,$fspfIfPrevNbrState)

            @AlertGroup = "FSPF Neighbor Status"
            @AlertKey = "fspfIfEntry." + extract($OID5, "\.([0-9]+\.[0-9]+)$")
            switch($5)
            {
                case "1": ### Down
                    @Summary = "FSPF Neighbor Down"
                    @Severity = 3
                    @Type = 1
                case "2": ### Initializing
                    @Summary = "FSPF Neighbor Initializing"
                    @Severity = 2
                    @Type = 1
                case "3": ### Database Exchange
                    @Summary = "FSPF Neighbor Database Exchange"
                    @Severity = 2
                    @Type = 1
                case "4": ### Waiting for Database Acknowledgement
                    @Summary = "FSPF Neighbor Waiting for Database Acknowledgement"
                    @Severity = 2
                    @Type = 1
                case "5": ### Waiting for Database
                    @Summary = "FSPF Neighbor Waiting for Database"
                    @Severity = 2
                    @Type = 1
                case "6": ### Full (Connected)
                    @Summary = "FSPF Neighbor Connected"
                    @Severity = 2
                    @Type = 2
                default:
                    @Summary = "FSPF Neighbor Status Unknown"
                    @Severity = 2
                    @Type = 1
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $5

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.93.2": ### Cisco High Capacity RMON Alarm - Notifications from CISCO-HC-ALARM-MIB

    @Agent = "Cisco-High Capacity RMON Alarm"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cHcRisingAlarm

            ##########
            # The SNMP notification that is generated when a high capacity
            # alarm entry crosses its rising threshold and generates an event
            # that is configured for sending SNMP traps. The cHcAlarmEntry
            # object instances identified in the OBJECTS clause are from the
            # entry that causes this notification to be generated.
            #
            # $1 = cHcAlarmVariable - The object identifier of the particular
            #        variable to be sampled. Only variables that resolve to an
            #        ASN.1 primitive type of INTEGER (INTEGER, Integer32,
            #        Counter32, Counter64, Gauge, or TimeTicks) may be sampled.
            # $2 = cHcAlarmSampleType - The method of sampling the selected
            #        variable and calculating the value to be compared against
            #        the thresholds. If the value of this object is
            #        absoluteValue(1), the value of the selected variable will
            #        be compared directly with the thresholds at the end of the
            #        sampling interval. If the value of this object is
            #        deltaValue(2), the value of the selected variable at the
            #        last sample will be subtracted from the current value, and
            #        the difference compared with the thresholds. If the
            #        associated cHcAlarmVariable instance could not be obtained
            #        at the previous sample interval, then a delta sample is
            #        not possible, and the value of the associated
            #        cHcAlarmValueStatus object for this interval will be
            #        valueNotAvailable(1).
            # $3 = cHcAlarmAbsValue - The absolute value (i.e. unsigned value)
            #        of the cHcAlarmVariable statistic during the last sampling
            #        period. The value during the current sampling period is
            #        not made available until the period is completed. To
            #        obtain the true value for this sampling interval, the
            #        associated instance of cHcAlarmValueStatus must be
            #        checked, and the value of this object adjusted as
            #        necessary. If the MIB instance could not be accessed
            #        during the sampling interval, then this object will have a
            #        value of zero and the associated instance of
            #        cHcAlarmValueStatus will be set to 'valueNotAvailable(1)'.
            # $4 = cHcAlarmValueStatus - This object indicates the validity and
            #        sign of the data for the cHcAlarmAbsValue object, as
            #        described in the CHcValueStatus textual convention.
            # $5 = cHcAlarmRisingThreshAbsValueLo - The lower 32 bits of the
            #        absolute value for threshold for the sampled statistic.
            # $6 = cHcAlarmRisingThreshAbsValueHi - The upper 32 bits of the
            #        absolute value for threshold for the sampled statistic.
            # $7 = cHcAlarmRisingThresholdValStatus - This object indicates the
            #        sign of the data for the rising threshold, as defined by
            #        the cHcAlarmRisingThresAbsValueLo and
            #        cHcAlarmRisingThresAbsValueHi objects, as described in the
            #        CHcValueStatus textual convention. The enumeration
            #        'valueNotAvailable(1)' is not allowed, and the associated
            #        cHcAlarmStatus object cannot be equal to 'active(1)' if
            #        this object is set to this value. This object may not be
            #        modified if the associated cHcAlarmStatus object is equal
            #        to active(1).
            #
            # NOTE: The actual threshold value is determined by the associated
            # instances of the cHcAlarmRisingThreshAbsValueHi and
            # cHcAlarmRisingThresholdValStatus objects, as follows:
            # ABS(threshold) = cHcAlarmRisingThreshAbsValueLo +
            # (cHcAlarmRisingThreshAbsValueHi * 2^^32)
            # The absolute value of the threshold is adjusted as required, as
            # described in the CHcValueStatus textual convention. These three
            # object instances are conceptually combined to represent the
            # rising threshold for this entry.
            #            
            # $8 = cHcAlarmRisingEventIndex - The index of the eventEntry that
            #        is used when a rising threshold is crossed. The eventEntry
            #        identified by a particular value of this index is the same
            #        as identified by the same value of the eventIndex object.
            #        If there is no corresponding entry in the eventTable, then
            #        no association exists. In particular, if this value is
            #        zero, no associated event will be generated, as zero is
            #        not a valid event index. This object may not be modified
            #        if the associated cHcAlarmStatus object is equal to
            #        active(1).
            ##########

            $cHcAlarmVariable = $1
            $cHcAlarmSampleType = lookup($2, cHcAlarmSampleType)
            $cHcAlarmAbsValue = $3
            $cHcAlarmValueStatus = lookup($4, CHcValueStatus) + " ( " + $4 + " )"
            $cHcAlarmRisingThreshAbsValueLo = $5
            $cHcAlarmRisingThreshAbsValueHi = $6
            $cHcAlarmRisingThresholdValStatus = lookup($7, CHcValueStatus) + " ( " + $7 + " )"
            $cHcAlarmRisingEventIndex = $8
            
            @AlertGroup = "High Capacity RMON Alarm"
            @AlertKey = "cHcAlarmEntry." + extract($OID1, "\.([0-9]+)$")
            $threshold = (int($6)*4294967296) + int($5)
            switch($7)
            {
                case "1": ### Value Not Available
                    $threshold = "[Error Sign of Value Unknown]"
                case "2": ### Value Positive
                case "3": ### Value Negative
                    $threshold = "-" + $threshold
                default:
                    $threshold = "[Error Sign of Value Unknown]"
            }
            @Summary = "HC RMON Alarm: " + $cHcAlarmSampleType + " of " + $1 + " Crossed " + $threshold
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            $cHcAlarmSampleType = $cHcAlarmSampleType + " ( " + $2 + " )"
            #details($cHcAlarmVariable,$cHcAlarmSampleType,$cHcAlarmAbsValue,$cHcAlarmValueStatus,$cHcAlarmRisingThreshAbsValueLo,$cHcAlarmRisingThreshAbsValueHi,$cHcAlarmRisingThresholdValStatus,$cHcAlarmRisingEventIndex)

        case "2": ### cHcFallingAlarm

            ##########
            # The SNMP notification that is generated when a high capacity alarm entry crosses its falling threshold and generates an event that is configured for sending SNMP traps. The cHcAlarmEntry object instances identified in the OBJECTS clause are from the entry that causes this notification to be generated.
            #
            # $1 = cHcAlarmVariable - The object identifier of the particular
            #        variable to be sampled. Only variables that resolve to an
            #        ASN.1 primitive type of INTEGER (INTEGER, Integer32,
            #        Counter32, Counter64, Gauge, or TimeTicks) may be sampled.
            # $2 = cHcAlarmSampleType - The method of sampling the selected
            #        variable and calculating the value to be compared against
            #        the thresholds. If the value of this object is
            #        absoluteValue(1), the value of the selected variable will
            #        be compared directly with the thresholds at the end of the
            #        sampling interval. If the value of this object is
            #        deltaValue(2), the value of the selected variable at the
            #        last sample will be subtracted from the current value, and
            #        the difference compared with the thresholds. If the
            #        associated cHcAlarmVariable instance could not be obtained
            #        at the previous sample interval, then a delta sample is
            #        not possible, and the value of the associated
            #        cHcAlarmValueStatus object for this interval will be
            #        valueNotAvailable(1).
            # $3 = cHcAlarmAbsValue - The absolute value (i.e. unsigned value)
            #        of the cHcAlarmVariable statistic during the last sampling
            #        period. The value during the current sampling period is
            #        not made available until the period is completed. To
            #        obtain the true value for this sampling interval, the
            #        associated instance of cHcAlarmValueStatus must be
            #        checked, and the value of this object adjusted as
            #        necessary. If the MIB instance could not be accessed
            #        during the sampling interval, then this object will have a
            #        value of zero and the associated instance of
            #        cHcAlarmValueStatus will be set to 'valueNotAvailable(1)'.
            # $4 = cHcAlarmValueStatus - This object indicates the validity and
            #        sign of the data for the cHcAlarmAbsValue object, as
            #        described in the CHcValueStatus textual convention.
            # $5 = cHcAlarmFallingThreshAbsValueLo - The lower 32 bits of the
            #        absolute value for threshold for the sampled statistic.
            # $6 = cHcAlarmFallingThreshAbsValueHi - The upper 32 bits of the
            #        absolute value for threshold for the sampled statistic.
            # $7 = cHcAlarmFallingThrsholdValStatus - This object indicates the
            #        sign of the data for the falling threshold, as defined by
            #        the cHcAlarmFallingThreshAbsValueLo and
            #        cHcAlarmFallingThreshAbsValueHi objects, as described in
            #        the CHcValueStatus textual convention. The enumeration
            #        'valueNotAvailable(1)' is not allowed, and the associated
            #        cHcAlarmStatus object cannot be equal to 'active(1)' if
            #        this object is set to this value. This object may not be
            #        modified if the associated cHcAlarmStatus object is equal
            #        to active(1).
            #
            # NOTE: The actual threshold value is determined by the associated
            # instances of the cHcAlarmFallingThreshAbsValueHi and
            # cHcAlarmFallingThrsholdValStatus objects, as follows:
            # ABS(threshold) = cHcAlarmFallingThreshAbsValueLo +
            # (cHcAlarmFallingThreshAbsValueHi * 2^^32) The absolute value of
            # the threshold is adjusted as required, as described in the
            # CHcValueStatus textual convention. These three object instances
            # are conceptually combined to represent the falling threshold for
            # this entry.
            #            
            # $8 = cHcAlarmFallingEventIndex - The index of the eventEntry that
            #        is used when a falling threshold is crossed. The
            #        eventEntry identified by a particular value of this index
            #        is the same as identified by the same value of the
            #        eventIndex object. If there is no corresponding entry in
            #        the eventTable, then no association exists. In particular,
            #        if this value is zero, no associated event will be
            #        generated, as zero is not a valid event index. This object
            #        may not be modified if the associated cHcAlarmStatus
            #        object is equal to active(1).
            ##########

            $cHcAlarmVariable = $1
            $cHcAlarmSampleType = lookup($2, cHcAlarmSampleType)
            $cHcAlarmAbsValue = $3
            $cHcAlarmValueStatus = lookup($4, CHcValueStatus) + " ( " + $4 + " )"
            $cHcAlarmFallingThreshAbsValueLo = $5
            $cHcAlarmFallingThreshAbsValueHi = $6
            $cHcAlarmFallingThrsholdValStatus = lookup($7, CHcValueStatus) + " ( " + $7 + " )"
            $cHcAlarmFallingEventIndex = $8
            #details($cHcAlarmVariable,$cHcAlarmSampleType,$cHcAlarmAbsValue,$cHcAlarmValueStatus,$cHcAlarmFallingThreshAbsValueLo,$cHcAlarmFallingThreshAbsValueHi,$cHcAlarmFallingThrsholdValStatus,$cHcAlarmFallingEventIndex)

            @AlertGroup = "High Capacity RMON Alarm"
            @AlertKey = "cHcAlarmEntry." + extract($OID1, "\.([0-9]+)$")
            $threshold = (int($6)*4294967296) + int($5)
            switch($7)
            {
                case "1": ### Value Not Available
                    $threshold = "[Error Sign of Value Unknown]"
                case "2": ### Value Positive
                case "3": ### Value Negative
                    $threshold = "-" + $threshold
                default:
                    $threshold = "[Error Sign of Value Unknown]"
            }
            @Summary = "HC RMON Alarm Cleared: " + $cHcAlarmSampleType + " of " + $1 + " Crossed " + $threshold
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

            $cHcAlarmSampleType = $cHcAlarmSampleType + " ( " + $2 + " )"
            #details($cHcAlarmVariable,$cHcAlarmSampleType,$cHcAlarmAbsValue,$cHcAlarmValueStatus,$cHcAlarmRisingThreshAbsValueLo,$cHcAlarmRisingThreshAbsValueHi,$cHcAlarmRisingThresholdValStatus,$cHcAlarmRisingEventIndex)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.94.2": ### Cisco iSCSI - Notifications from CISCO-ISCSI-MIB

    @Agent = "Cisco-iSCSI"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cIscsiTgtLoginFailure

            ##########
            # Sent when a login is failed by a target. The implementation of
            # this trap should not send more than 3 notifications of this type
            # in any 10 second time span.
            #
            # $1 = cIscsiTgtLoginFailures - This object counts the number of
            #        times a login attempt to this local target has failed.
            # $2 = cIscsiTgtLastFailureType - The type of the most recent
            #        failure of a login attempt to this target, represented as
            #        the OID of the counter object in
            #        cIscsiTargetLoginStatsTable for which the relevant
            #        instance was incremented. A value of 0.0 indicates a type
            #        which is not represented by any of the counters in
            #        cIscsiTargetLoginStatsTable.
            # $3 = cIscsiTgtLastIntrFailureName - An octet string giving the
            #        name of the initiator that failed the last login attempt.
            # $4 = cIscsiTgtLastIntrFailureAddrType - The type of Internet
            #        Network Address in cIscsiTgtLastIntrFailureAddr.
            # $5 = cIscsiTgtLastIntrFailureAddr - An Internet Network Address
            #        giving the host address of the initiator that failed the
            #        last login attempt.
            ##########

            $cIscsiTgtLoginFailures = $1
            $cIscsiTgtLastFailureType = $2
            $cIscsiTgtLastIntrFailureName = $3
            $cIscsiTgtLastIntrFailureAddrType = lookup($4, InetAddressType) + " ( " + $4 + " )"
            $cIscsiTgtLastIntrFailureAddr = $5
            #details($cIscsiTgtLoginFailures,$cIscsiTgtLastFailureType,$cIscsiTgtLastIntrFailureName,$cIscsiTgtLastIntrFailureAddrType,$cIscsiTgtLastIntrFailureAddr)

            @AlertGroup = "Login Status"
            @AlertKey = "cIscsiTargetAttributesEntry." + extract($OID1, "\.([0-9]+\.[0-9]+)")
            @Summary = "Login Attempt Failed by Target  ( Initiator: " + $5 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### cIscsiIntrLoginFailure

            ##########
            # Sent when a login is failed by a initiator. The implementation of
            # this trap should not send more than 3 notifications of this type
            # in any 10 second time span.
            #
            # $1 = cIscsiIntrLoginFailures - This object counts the number of
            #        times a login attempt from this local initiator has
            #        failed.
            # $2 = cIscsiIntrLastFailureType - The type of the most recent
            #        failure of a login attempt from this initiator,
            #        represented as the OID of the counter object in
            #        cIscsiInitiatorLoginStatsTable for which the relevant
            #        instance was incremented. A value of 0.0 indicates a type
            #        which is not represented by any of the counters in
            #        cIscsiInitiatorLoginStatsTable.
            # $3 = cIscsiIntrLastTgtFailureName - An octet string giving the
            #        name of the target that failed the last login attempt.
            # $4 = cIscsiIntrLastTgtFailureAddrType - The type of Internet
            #        Network Address in cIscsiIntrLastTgtFailureAddr.
            # $5 = cIscsiIntrLastTgtFailureAddr - An Internet Network Address
            #        giving the host address of the target that failed the last
            #        login attempt.
            ##########

            $cIscsiIntrLoginFailures = $1
            $cIscsiIntrLastFailureType = $2
            $cIscsiIntrLastTgtFailureName = $3
            $cIscsiIntrLastTgtFailureAddrType = lookup($4, InetAddressType) + " ( " + $4 + " )"
            $cIscsiIntrLastTgtFailureAddr = $5
            #details($cIscsiIntrLoginFailures,$cIscsiIntrLastFailureType,$cIscsiIntrLastTgtFailureName,$cIscsiIntrLastTgtFailureAddrType,$cIscsiIntrLastTgtFailureAddr)

            @AlertGroup = "Login Status"
            @AlertKey = "cIscsiInitiatorAttributesEntry." + extract($OID1, "\.([0-9]+\.[0-9]+)")
            @Summary = "Login Attempt Failed by Initiator  ( Target: " + $5 + " )"
            @Severity = 2
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### cIscsiInstSessionFailure

            ##########
            # Sent when an active session is failed by either the initiator or
            # the target. The implementation of this trap should not send more
            # than 3 notifications of this type in any 10 second time span.
            #
            # $1 = cIscsiInstSsnFailures - This object counts the number of
            #        times a session belonging to this instance has been
            #        failed.
            # $2 = cIscsiInstLastSsnFailureType - The counter object in the
            #        cIscsiInstSsnErrorStatsTable that was incremented when the
            #        last session failure occurred. If the reason for failure
            #        is not found in the cIscsiInstSsnErrorStatsTable, the
            #        value { 0.0 } is used instead.
            # $3 = cIscsiInstLastSsnRmtNodeName - An octet string describing
            #        the name of the remote node from the failed session.
            ##########

            $cIscsiInstSsnFailures = $1
            $cIscsiInstLastSsnFailureType = $2
            $cIscsiInstLastSsnRmtNodeName = $3
            #details($cIscsiInstSsnFailures,$cIscsiInstLastSsnFailureType,$cIscsiInstLastSsnRmtNodeName)

            @AlertGroup = "Session Status"
            @AlertKey = "cIscsiInstanceAttributesEntry." + extract($OID1, "\.([0-9]+)")
            @Summary = "Active Session Failed  ( Remote Node: " + $3 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 2
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.293.1.4": ### Cisco Name Server - Notifications from CISCO-NS-MIB

    @Agent = "Cisco-Name Server"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### fcNameServerRejectRegNotify

            ##########
            # This notification is generated by the Name Server whenever it
            # rejects a registration request. The Name Server should update the
            # 'fcNameServerRejectReasonCode' and 'fcNameServerRejReasonCodeExp'
            # objects with the corresponding reason code and reason code
            # explanation before sending the notification. These two objects
            # are also included along with the notification to provide the
            # reason for the reject.
            #
            # $1 = fcNameServerPortName - The fibre channel Port_Name (WWN) of
            #        this Nx_port. If this object is not set, then it will
            #        contain the null value '0000000000000000'h.
            # $2 = fcNameServerRejectReasonCode - The registration reject
            #        reason code. This object contains the reason code
            #        corresponding to the most recent Name Server Registration
            #        request failure.
            # $3 = fcNameServerRejReasonCodeExp - The registration reject
            #        reason code explanation. This object contains the reason
            #        code explanation if the above object has a reason code
            #        corresponding to 'Unable to perform command request'. This
            #        object like the one above, corresponds to the most recent
            #        Name Server Registration request rejection.
            ##########

            $fcNameServerPortName = $1
            $fcNameServerRejectReasonCode = lookup($2, FcGs3RejectReasonCode)
            $fcNameServerRejReasonCodeExp = $3

            @AlertGroup = "Registration Status"
            @AlertKey = "fcNameServerEntry." + extract($OID1, "\.9\.293\.1\.1\.4\.1\.2\.(.*)$")
            @Summary = "Name Server Rejected Registration Request, " + $fcNameServerRejectReasonCode + "  ( Name Server Port: " + $1 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2
            
            $fcNameServerRejectReasonCode = $fcNameServerRejectReasonCode + " ( " + $2 + " )"
            #details($fcNameServerPortName,$fcNameServerRejectReasonCode,$fcNameServerRejReasonCodeExp)

        case "2": ### fcNameServerDatabaseFull

            ##########
            # This notification is generated by the Name Server when the Name
            # Server cannot allocate space for a new entry.
            #
            # $1 = notifyVsanIndex - The id of the VSAN. This object is to be
            #        used only as an object in the notification. We cannot use
            #        the vsanIndex in a notification as it is defined to
            #        not-accessible in the vsanTable.
            ##########

            $notifyVsanIndex = $1
            #details($notifyVsanIndex)

            @AlertGroup = "Name Server Database Status"
            @AlertKey = "vsanEntry." + $1
            @Summary = "Name Server Database Full"
            if(int($1)<10)
            {
                @Summary = @Summary + "  ( VSAN: VSAN000" + $1 + " )"
            }
            else if(int($1)>9 && int($1)<100)
            {
                @Summary = @Summary + "  ( VSAN: VSAN00" + $1 + " )"
            }
            else if(int($1)>99 && int($1)<1000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN0" + $1 + " )"
            }
            else if(int($1)>999 && int($1)<10000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN" + $1 + " )"
            }
            else
            {
                @Summary = @Summary + "  ( " + @AlertKey + " )"
            }
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.292.1.4": ### Cisco Registered State Change Notificaton (RSCN) - Notifications from CISCO-RSCN-MIB

    @Agent = "CISCO-RSCN"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### rscnElsRejectReqNotify

            ##########
            # This notification is generated by the RSCN module on this switch
            # whenever it rejects a SCR or RSCN request. The RSCN module should
            # update the rscnElsRejReasonCode object with the corresponding
            # reason code before sending the notification. The rscnScrFcId
            # object indicates the FC-ID of the sender of the request that was
            # rejected.
            #
            # $1 = rscnElsRejReasonCode - The reason code corresponding to an
            #        ELS request rejection. This object contains the reason
            #        code corresponding the most recent SW_RSCN request
            #        rejection by the RSCN module.
            # $2 = rscnNotifyFcId - The FC-ID of an Nx_Port. This object is to
            #        be used in the notifications: rscnElsRejectReqNotify and
            #        rscnIlsRejectReqNotify. This object is defined since the
            #        rscnScrFcId object in the rscnScrTable is not-accessible.
            ##########

            $rscnElsRejReasonCode = lookup($1, FcGs3RejectReasonCode)
            $rscnNotifyFcId = $2
            
            @AlertGroup = "SCR/RSCN Request Status"
            @AlertKey = "Fibre Channel Address: " + $2
            @Summary = "SCR or RSCN Request Rejected, " + $rscnElsRejReasonCode + "  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1
            
            $rscnElsRejReasonCode = $rscnElsRejReasonCode + " ( " + $1 + " )"
            #details($rscnElsRejReasonCode,$rscnNotifyFcId)

        case "2": ### rscnIlsRejectReqNotify

            ##########
            # This notification is generated by the RSCN module on this switch
            # whenever it rejects a SW_RSCN request. The RSCN module should
            # update the rscnIlsRejReasonCode object with the corresponding
            # reason code before sending the notification. The rscnScrFcId
            # object contains the FC-ID of the sender of the request that was
            # rejected.
            #
            # $1 = rscnIlsRejReasonCode - The reason code corresponding to an
            #        ILS request rejection. This object contains the reason
            #        code corresponding to the most recent SCR or RSCN request
            #        rejection by the RSCN module.
            # $2 = rscnNotifyFcId - The FC-ID of an Nx_Port. This object is to
            #        be used in the notifications: rscnElsRejectReqNotify and
            #        rscnIlsRejectReqNotify. This object is defined since the
            #        rscnScrFcId object in the rscnScrTable is not-accessible.
            ##########

            $rscnIlsRejReasonCode = lookup($1, FcGs3RejectReasonCode)
            $rscnNotifyFcId = $2

            @AlertGroup = "SW_RSCN Request Status"
            @AlertKey = "Fibre Channel Address: " + $2
            @Summary = "SW_RSCN Request Rejected, " + $rscnIlsRejReasonCode + "  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

            $rscnIlsRejReasonCode = $rscnIlsRejReasonCode + " ( " + $1 + " )"
            #details($rscnIlsRejReasonCode,$rscnNotifyFcId)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.10.95.2": ### Cisco SCSI - Notifications from CISCO-SCSI-MIB

    @Agent = "Cisco-SCSI"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### ciscoScsiTgtDevStatusChanged

            ##########
            # A notification will be generated for each occurrence of the
            # abnormal status (e.g., if the SCSI target device's current status
            # is abnormal) providing that the SCSI instance's value of
            # ciscoScsiInstNotifEnable is enabled. An SNMP agent implementing
            # the SCSI MIB should not send more than three SCSI identical
            # notifications in any 10-second period.
            #
            # $1 = ciscoScsiTgtDeviceStatus - This object represents the status
            #        of this SCSI device, summarizing the state of both the
            #        addressable devices (i.e., the logical units) and the
            #        non-addressable devices within this SCSI device.
            ##########

            $ciscoScsiTgtDeviceStatus = lookup($1, ciscoScsiTgtDeviceStatus) + " ( " + $1 + " )"
            #details($ciscoScsiTgtDeviceStatus)

            @AlertGroup = "SCSI Device Status"
            @AlertKey = "ciscoScsiTgtDevEntry." + extract($OID1, "\.([0-9]+\.[0-9]+)$")
            switch($1)
            {
                case "1": ### Unknown
                    @Summary = "SCSI Device Status Unknown"
                    @Severity = 2
                    @Type = 1
                case "2": ### Available
                    @Summary = "SCSI Device Available"
                    @Severity = 2
                    @Type = 2
                case "3": ### Broken
                    @Summary = "SCSI Device Broken"
                    @Severity = 3
                    @Type = 1
                case "4": ### Readying
                    @Summary = "SCSI Device Readying"
                    @Severity = 2
                    @Type = 1
                case "5": ### Abnormal
                    @Summary = "SCSI Device Abnormal"
                    @Severity = 3
                    @Type = 1
                case "6": ### Non-Addressable Device Failure
                    @Summary = "SCSI Device Non-Addressable Device Failure"
                    @Severity = 3
                    @Type = 1
                case "7": ### Non-Addressable Device Failure, Readying
                    @Summary = "SCSI Device Non-Addressable Device Failure, Readying"
                    @Severity = 3
                    @Type = 1
                case "8": ### Non-Addressable Device Failure, Abnormal
                    @Summary = "SCSI Device Non-Addressable Device Failure, Abnormal"
                    @Severity = 3
                    @Type = 1
                default:
                    @Summary = "SCSI Device Status Unknown"
                    @Severity = 2
                    @Type = 1
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

        case "2": ### ciscoScsiLuStatusChanged

            ##########
            # A notification will be generated each time that ciscoScsiLuStatus
            # will change providing that the SCSI instance's value of
            # ciscoScsiInstScsiNotificationsEnable is enabled. An SNMP agent
            # implementing the SCSI MIB should not send more than three SCSI
            # identical notifications in any 10-second period.
            #
            # $1 = ciscoScsiLuStatus - The status of this logical unit.
            ##########

            $ciscoScsiLuStatus = lookup($1, ciscoScsiLuStatus) + " ( " + $1 + " )"
            #details($ciscoScsiLuStatus)

            @AlertGroup = "SCSI LUN Status"
            @AlertKey = "ciscoScsiLuEntry." + extract($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+)$")
            switch($1)
            {
                case "1": ### Unknown
                    @Summary = "SCSI LUN Status Unknown"
                    @Severity = 2
                    @Type = 1
                case "2": ### Available
                    @Summary = "SCSI LUN Available"
                    @Severity = 2
                    @Type = 2
                case "3": ### Not Available
                    @Summary = "SCSI LUN Not Available"
                    @Severity = 3
                    @Type = 1
                case "4": ### Broken
                    @Summary = "SCSI LUN Broken"
                    @Severity = 3
                    @Type = 1
                case "5": ### Readying
                    @Summary = "SCSI LUN Readying"
                    @Severity = 3
                    @Type = 1
                case "6": ### Abnormal
                    @Summary = "SCSI LUN Abnormal"
                    @Severity = 3
                    @Type = 1
                default:
                    @Summary = "SCSI LUN Status Unknown"
                    @Severity = 2
                    @Type = 1
            }
            @Summary = @Summary + "  ( " + @AlertKey + " )"
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.305.1.3.5": ### Cisco System Extension - Notifications from CISCO-SYSTEM-EXT-MIB

    @Agent = "Cisco-System Extension"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### cseHaRestartNotify

            ##########
            # A service restart notification is generated whenever a service
            # (or a process) on the 'active' supervisor is restarted.
            #
            # $1 = cseHaRestartReason - The reason for most recent restart of a
            #        service on the 'active' supervisor.
            # $2 = cseHaRestartService - Name of the service (or process) that
            #        was restarted on the 'active' supervisor.
            # $3 = cseHaRestartStateless - Tells if the most recent restart of
            #        a service on the 'active' supervisor was 'stateless' or
            #        not. A 'stateless' restart of a service is where no
            #        runtime information is preserved while restarting the
            #        service.
            ##########

            $cseHaRestartReason = lookup($1, CseHaRestartReason)
            $cseHaRestartService = $2
            $cseHaRestartStateless = lookup($3, TruthValue) + " ( " + $3 + " )"
            
            @AlertGroup = "Service Status"
            @AlertKey = "Service: " + $2
            @Summary = "Service Restarted on Active Supervisor, " + $cseHaRestartReason + "  ( " + @AlertKey + " )" 
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            $cseHaRestartReason = $cseHaRestartReason + " ( " + $1 + " )"
            #details($cseHaRestartReason,$cseHaRestartService,$cseHaRestartStateless)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.290.1.3": ### Cisco Virtual Network Interface - Notifications from CISCO-VIRTUAL-NW-IF-MIB

    @Agent = "Cisco-Virtual Network Interface"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### virtualNwIfCreateEntryNotify

            ##########
            # This notification is generated by the agent whenever an virtual
            # interface is created in the, 'virtualNwIfTable'. Note that this
            # notification is generated only when a new entry is added to the
            # table and not for any modifications to an existing entry. 
            #
            # $1 = virtualNwIfIndex - The ifIndex of this interface. This value
            #        is dynamically assigned by the agent. It is valid whenever
            #        the value of the corresponding virtualNwIfRowStatus is
            #        'active'. The ifType of interface of type vsan(1) will be
            #        'fibreChannel(56)' and of type 'vlan(2)' would be
            #        'ethernetCsmacd(6)'. 
            # $2 = ifName - The textual name of the interface. The value of
            #        this object should be the name of the interface as
            #        assigned by the local device and should be suitable for
            #        use in commands entered at the device's `console'. This
            #        might be a text name, such as `le0' or a simple port
            #        number, such as `1', depending on the interface naming
            #        syntax of the device. If several entries in the ifTable
            #        together represent a single interface as named by the
            #        device, then each will have the same value of ifName.
            #        Note that for an agent which responds to SNMP queries
            #        concerning an interface on some other (proxied) device,
            #        then the value of ifName for such an interface is the
            #        proxied device's local name for it. If there is no local
            #        name, or this object is otherwise not applicable, then
            #        this object contains a zero-length string.
            ##########

            $virtualNwIfIndex = $1
            $ifName = $2
            $entPhysicalIndex = extract($OID1, "\.([0-9]+)\.[0-9]+\.[0-9]+$")
            $virtualNwIfTypeRaw = extract($OID1, "\.[0-9]+\.([0-9]+)\.[0-9]+$")
            $virtualNwIfType = lookup($virtualNwIfTypeRaw, virtualNwIfType)
            
            @AlertGroup = "Virtual Interface Status"
            @AlertKey = "virtualNwIfEntry." + extract($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+)$")
            @Summary = $virtualNwIfType + " Virtual Interface Created  ( " + $2 + " )"
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            $virtualNwIfType = $virtualNwIfType + " ( " + $virtualNwIfTypeRaw + " )"
            #details($virtualNwIfIndex,$ifName,$entPhysicalIndex,$virtualNwIfType)

        case "2": ### virtualNwIfDeleteEntryNotify

            ##########
            # This notification is generated by the agent whenever an virtual
            # interface is deleted from the 'virtualNwIfTable'. 
            #
            # $1 = virtualNwIfIndex - The ifIndex of this interface. This value
            #        is dynamically assigned by the agent. It is valid whenever
            #        the value of the corresponding virtualNwIfRowStatus is
            #        'active'. The ifType of interface of type vsan(1) will be
            #        'fibreChannel(56)' and of type 'vlan(2)' would be
            #        'ethernetCsmacd(6)'. 
            ##########

            $virtualNwIfIndex = $1
            $entPhysicalIndex = extract($OID1, "\.([0-9]+)\.[0-9]+\.[0-9]+$")
            $virtualNwIfTypeRaw = extract($OID1, "\.[0-9]+\.([0-9]+)\.[0-9]+$")
            $virtualNwIfType = lookup($virtualNwIfTypeRaw, virtualNwIfType)

            @AlertGroup = "Virtual Interface Status"
            @AlertKey = "virtualNwIfEntry." + extract($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+)$")
            @Summary = $virtualNwIfType + "Virtual Interface Deleted  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            $virtualNwIfType = $virtualNwIfType + " ( " + $virtualNwIfTypeRaw + " )"
            #details($virtualNwIfIndex,$entPhysicalIndex,$virtualNwIfType)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.282.1.3": ### Cisco Virtual Storage Area Network - Notifications from CISCO-VSAN-MIB

    @Agent = "Cisco-VSAN"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### vsanStatusChange

            ##########
            # A state change notification is generated whenever vsanOperState
            # is changed. The index and both states of the VSAN after the
            # change, are included as variables in the notification.
            #
            # $1 = notifyVsanIndex - The id of the VSAN. This object is to be
            #        used only as an object in the notification. We cannot use
            #        the vsanIndex in a notification as it is defined to
            #        not-accessible in the vsanTable.
            # $2 = vsanAdminState - The state of this VSAN.
            # $3 = vsanOperState - The operational state of the VSAN.
            ##########

            $notifyVsanIndex = $1
            $vsanAdminState = lookup($2, VsanAdminState) + " ( " + $2 + " )"
            $vsanOperState = lookup($3, VsanOperationalState) + " ( " + $3 + " )"
            #details($notifyVsanIndex,$vsanAdminState,$vsanOperState)

            @AlertGroup = "VSAN Status"
            @AlertKey = "vsanEntry." + $1
            switch($3)
            {
                case "1": ### Up
                    switch($2)
                    {
                        case "1": ### Active
                            @Summary = "VSAN Up, Administratively Active"
                            @Severity = 2
                            @Type = 2
                        case "2": ### Suspended
                            @Summary = "VSAN Up, Administratively Suspended"
                            @Severity = 2
                            @Type = 2
                        default:
                            @Summary = "VSAN Up, Administrative Status Unknown"
                            @Severity = 2
                            @Type = 2
                    }
                case "2": ### Down
                    switch($2)
                    {
                        case "1": ### Active
                            @Summary = "VSAN Down, Administratively Active"
                            @Severity = 4
                            @Type = 1
                        case "2": ### Suspended
                            @Summary = "VSAN Down, Administratively Suspended"
                            @Severity = 2
                            @Type = 1
                        default:
                            @Summary = "VSAN Down, Administrative Status Unknown"
                            @Severity = 4
                            @Type = 1
                    }
                default:
                    switch($2)
                    {
                        case "1": ### Active
                            @Summary = "VSAN Status Unknown, Administratively Active"
                            @Severity = 2
                            @Type = 1
                        case "2": ### Suspended
                            @Summary = "VSAN Status Unknown, Administratively Suspended"
                            @Severity = 2
                            @Type = 1
                        default:
                            @Summary = "VSAN Status Unknown, Administrative Status Unknown"
                            @Severity = 2
                            @Type = 1
                    }
            }
            if(int($1)<10)
            {
                @Summary = @Summary + "  ( VSAN: VSAN000" + $1 + " )"
            }
            else if(int($1)>9 && int($1)<100)
            {
                @Summary = @Summary + "  ( VSAN: VSAN00" + $1 + " )"
            }
            else if(int($1)>99 && int($1)<1000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN0" + $1 + " )"
            }
            else if(int($1)>999 && int($1)<10000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN" + $1 + " )"
            }
            else
            {
                @Summary = @Summary + "  ( " + @AlertKey + " )"
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $2 + " " + $3

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.286.1.2.1": ### Cisco World Wide Name Manager - Notifications from CISCO-WWNMGR-MIB

    @Agent = "Cisco-WWN Manager"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### wwnmType1WwnShortageNotify

            ##########
            # A WWN shortage notification is generated whenever the number of
            # available Type 1 WWNs 'wwnmType1AvailableWwns' reduces to either
            # 20% or 10% or 0% of the maximum number of Type 1 WWNs
            # 'wwnmType1MaxWwns'. After a shortage event is generated for a
            # threshhold (say 20%), another such event will not be generated
            # until after an availability event (see
            # wwnmType1WwnAvailableNotify) is generated for the same threshold.
            #
            # $1 = wwnmType1AvailableWwns - Number of NAA Type 1 WWNs that are
            #        currently available for assignment to internal entities.
            #        REFERENCE: FC-FS-2 Rev 1.70, Section 14 Name Identifier
            #          Formats.
            ##########

            $wwnmType1AvailableWwns = $1
            #details($wwnmType1AvailableWwns)

            @AlertGroup = "NAA Type 1 WWN Availablity"
            @AlertKey = ""
            @Summary = "WWN Shortage, " + $1 + " NAA Type 1 WWNs Available"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            update(@Summary)

        case "2": ### wwnmType1WwnAvailableNotify

            ##########
            # An availability notification is generated whenever the number of
            # available Type 1 WWNs (wwnmType1AvailableWwns) increases to
            # either 25% or 15% or 5% of the maximum number of Type 1 WWNs
            # (wwnmType1MaxWwns) after a wwnmType1WwnShortageNotify
            # notification has been generated for either 20% or 10% or 5%
            # respectively.
            #
            # $1 = wwnmType1AvailableWwns - Number of NAA Type 1 WWNs that are
            #        currently available for assignment to internal entities.
            #        REFERENCE: FC-FS-2 Rev 1.70, Section 14 Name Identifier
            #          Formats.
            ##########

            $wwnmType1AvailableWwns = $1
            #details($wwnmType1AvailableWwns)

            @AlertGroup = "NAA Type 1 WWN Availablity"
            @AlertKey = ""
            @Summary = "WWNs Available, " + $1 + " NAA Type 1 WWNs Available"
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            update(@Summary)

        case "3": ### wwnmTypeOtherWwnShortageNotify

            ##########
            # A WWN shortage notification is generated whenever the number of
            # available Type Other WWNs 'wwnmTypeOtherAvailableWwns' reduces to
            # either 20% or 10% or 0% of the maximum number of Type Other WWNs
            # 'wwnmTypeOtherMaxWwns'. After a shortage event is generated for a
            # threshhold (say 20%), another such event will not be generated
            # until after an availability event (see
            # wwnmType1WwnAvailableNotify) is generated for the same threshold.
            #
            # $1 = wwnmTypeOtherAvailableWwns - Sum of number of NAA Type 2 and
            #        Type 5 WWNs currently available for assignment to the
            #        internal entities.
            #        REFERENCE "FC-FS-2 Rev 1.70, Section 14 Name Identifier
            #          Formats.
            ##########

            $wwnmTypeOtherAvailableWwns = $1
            #details($wwnmTypeOtherAvailableWwns)

            @AlertGroup = "NAA Type 2&5 WWN Availablity"
            @AlertKey = ""
            @Summary = "WWN Shortage, " + $1 + " NAA Type 2&5 WWNs Available"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

            update(@Summary)

        case "4": ### wwnmTypeOtherWwnAvailableNotify

            ##########
            # An availability notification is generated whenever the number of
            # available Type Other WWNs (wwnmTypeOtherAvailableWwns) increases
            # to either 25% or 15% or 5% of the maximum number of Type Other
            # WWNs (wwnmTypeOtherMaxWwns) after a
            # wwnmTypeOtherWwnShortageNotify notification has been generated
            # for either 20% or 10% or 5% respectively.
            #
            # $1 = wwnmTypeOtherAvailableWwns - Sum of number of NAA Type 2 and
            #        Type 5 WWNs currently available for assignment to the
            #        internal entities.
            #        REFERENCE "FC-FS-2 Rev 1.70, Section 14 Name Identifier
            #          Formats.
            ##########

            $wwnmTypeOtherAvailableWwns = $1
            #details($wwnmTypeOtherAvailableWwns)

            @AlertGroup = "NAA Type 2&5 WWN Availablity"
            @AlertKey = ""
            @Summary = "WWNs Available, " + $1 + " NAA Type 2&5 WWNs Available"
            @Severity = 1
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

            update(@Summary)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }

case ".1.3.6.1.4.1.9.9.294.1.4": ### Cisco Zone Server - Notifications from CISCO-ZS-MIB

    @Agent = "Cisco-Zone Server"
    @Class = "40057"

    switch ($specific-trap)
    {
        case "1": ### zoneServiceReqRejNotify

            ##########
            # This notification is generated whenever the local Zone Server
            # rejects a registration request. The Zone Server should update the
            # zoneServiceRejReasonCode and zoneServiceRejReasonCodeExp objects
            # with the corresponding reason code and reason code explanation
            # before sending the notification. The zoneMemberType and
            # zoneMemberID identify the source of the request.
            #
            # $1 = zoneMemberFormat - This object identifies the format of the
            #        zone/alias member's identifier contained in zoneMemberID.
            #        This object cannot be modified while the corresponding
            #        value of zoneMemberRowStatus object is 'active'.
            # $2 = zoneMemberID - This object represents the zone/alias member
            #        ID. The interpretation of this object depends on the
            #        zoneMemberFormat object. If the value of corresponding
            #        instance of zoneMemberFormat object is 'wwn', then this
            #        object holds an 8 octet long Port WWN. If the value of the
            #        corresponding instance of zoneMemberFormat object is
            #        'fcAddr', then this object contains the 3 octet N_Port
            #        FC-ID. If the value of the corresponding instance of
            #        zoneMemberFormat object is 'fwwn', then this object
            #        contains the 8 octet Fabric Port WWN. If the value of the
            #        corresponding instance of zoneMemberFormat object is
            #        'symNodeName', then this object contains a symbolic node
            #        name which could be of length 1 to 256 bytes. This object
            #        cannot be modified while the corresponding value of
            #        zoneMemberRowStatus object is 'active'.
            # $3 = zoneServiceRejReasonCode - This object contains the reason
            #        code corresponding to the latest Zone Server request
            #        rejection.
            # $4 = zoneServiceRejReasonCodeExp - This object contains the
            #        reason code explanation if the reason code is 'Unable to
            #        perform command req'. This object also corresponds to the
            #        latest Zone Server request rejection.
            ##########

            $zoneMemberFormat = lookup($1, ZoneMemberType) + " ( " + $1 + " )"
            $zoneMemberID = $2
            $zoneServiceRejReasonCode = lookup($3, FcGs3RejectReasonCode)
            $zoneServiceRejReasonCodeExp = $4
            $vsanIndex = extract($OID1, "\.([0-9]+)\.[0-9]+\.[0-9]+\.[0-9]+$")
            $zoneMemberTypeIndexRaw = extract($OID1, "\.[0-9]+\.([0-9]+)\.[0-9]+\.[0-9]+$")
            $zoneMemberTypeIndex = lookup($zoneMemberTypeIndexRaw, zoneMemberTypeIndex) + " ( " + $zoneMemberTypeIndexRaw + " )"
            $zoneMemberParentIndex = extract($OID1, "\.[0-9]+\.[0-9]+\.([0-9]+)\.[0-9]+$")
            $zoneMemberIndex = extract($OID1, "\.[0-9]+\.[0-9]+\.[0-9]+\.([0-9]+)$")

            @AlertGroup = "Registration Request Status"
            @AlertKey = "zoneMemberEntry." + extract($OID1, "\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$")
            @Summary = "Registration Request Rejected by Local Zone Server, " + $zoneServiceRejReasonCode + "  ( " + $zoneMemberFormat + ": " + $2 + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $3
            
            $zoneMemberFormat = $zoneMemberFormat + " ( " + $1 + " )"
            $zoneServiceRejReasonCode = $zoneServiceRejReasonCode + " ( " + $3 + " )"
            #details($zoneMemberFormat,$zoneMemberID,$zoneServiceRejReasonCode,$zoneServiceRejReasonCodeExp,$vsanIndex,$zoneMemberTypeIndex,$zoneMemberParentIndex,$zoneMemberIndex)

        case "2": ### zoneMergeFailureNotify

            ##########
            # This notification is generated whenever there is a zone merge
            # failure. If all VSANs on a link have a zone-merge failure at the
            # same time, then just one notification is generated in which
            # zoneMergeFailureVSANNum object has a zero value.
            #
            # $1 = ifIndex - A unique value for each interface. Its value
            #        ranges between 1 and the value of ifNumber. The value for
            #        each interface must remain constant at least from one
            #        re-initialization of the entity's network management
            #        system to the next re-initialization.
            # $2 = zoneMergeFailureVSANNum - This object contains the number of
            #        the VSAN on an interface on which the last zone merge
            #        failed. If the zone merge has failed on all VSANs, then
            #        this object will contain the value of 0.
            ##########

            $ifIndex = $1
            $zoneMergeFailureVSANNum = $2
            #details($ifIndex,$zoneMergeFailureVSANNum)

            @AlertGroup = "Zone Merge Status"
            @AlertKey = "ifEntry." + $1 + ", vsanEntry." + $2
            @Summary = "Zone Merge Failure  ( " + @AlertKey + " )"
            @Severity = 3
            @Type = 1
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### zoneMergeSuccessNotify

            ##########
            # This notification is generated whenever a zone merge happens
            # successfully. If all VSANs on a link have a zone-merge success at
            # the same time, then just one notification is generated in which
            # zoneMergeSuccessVSANNum object has a zero value.
            #
            # $1 = ifIndex - A unique value for each interface. Its value
            #        ranges between 1 and the value of ifNumber. The value for
            #        each interface must remain constant at least from one
            #        re-initialization of the entity's network management
            #        system to the next re-initialization.
            # $2 = zoneMergeSuccessVSANNum - This object contains the number of
            #        the VSAN on an interface on which the last zone merge
            #        succeeded. If the zone merge has succeeded on all VSANs,
            #        then this object will contain the value of 0.
            ##########

            $ifIndex = $1
            $zoneMergeSuccessVSANNum = $2
            #details($ifIndex,$zoneMergeSuccessVSANNum)

            @AlertGroup = "Zone Merge Status"
            @AlertKey = "ifEntry." + $1 + ", vsanEntry." + $2
            @Summary = "Zone Merge Successful  ( " + @AlertKey + " )"
            @Severity = 2
            @Type = 2
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "4": ### zoneDefZoneBehaviourChngNotify

            ##########
            # This notification is generated whenever the value of
            # zoneDefaultZoneBehaviour changes.
            #
            # $1 = zoneDefaultZoneBehaviour - This object controls the
            #        behaviour of the default zone on this VSAN. If this object
            #        is set to 'permit', then the members of the default zone
            #        on this VSAN can communicate with each other. If this
            #        object is set to 'deny', then the members of the default
            #        zone on this VSAN cannot communicate with each other.
            ##########

            $zoneDefaultZoneBehaviour = lookup($1, zoneDefaultZoneBehaviour)
            $vsanIndex = extract($OID1, "\.([0-9]+)$")

            @AlertGroup = "Default Zone Behaviour"
            @AlertKey = "zoneDefaultZoneEntry." + $vsanIndex
            @Summary = "Default Zone Behaviour Changed to " + $zoneDefaultZoneBehaviour
            if(int($vsanIndex)<10)
            {
                @Summary = @Summary + "  ( VSAN: VSAN000" + $vsanIndex + " )"
            }
            else if(int($vsanIndex)>9 && int($vsanIndex)<100)
            {
                @Summary = @Summary + "  ( VSAN: VSAN00" + $vsanIndex + " )"
            }
            else if(int($vsanIndex)>99 && int($vsanIndex)<1000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN0" + $vsanIndex + " )"
            }
            else if(int($vsanIndex)>999 && int($vsanIndex)<10000)
            {
                @Summary = @Summary + "  ( VSAN: VSAN" + $vsanIndex + " )"
            }
            else
            {
                @Summary = @Summary + "  ( " + @AlertKey + " )"
            }
            @Severity = 2
            @Type = 1800
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $specific-trap + " " + $1
            
            $zoneDefaultZoneBehaviour = $zoneDefaultZoneBehaviour + " ( " + $1 + " )"
            #details($zoneDefaultZoneBehaviour,$vsanIndex)
            
            update(@Summary)

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            #details($*)
    }




